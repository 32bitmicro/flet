{
  "config": {
    "lang": [
      "en"
    ],
    "separator": "[\\s\\-]+",
    "pipeline": [
      "stopWordFilter"
    ]
  },
  "docs": [
    {
      "location": "",
      "title": "Welcome",
      "text": "<ul> <li>To view the docs in hot reload mode, run <code>mkdocs serve</code> and open the link from the terminal.</li> <li>To build the docs, run <code>mkdocs build</code>.</li> </ul>"
    },
    {
      "location": "controls/alert_dialog/",
      "title": "AlertDialog",
      "text": "<p>               Bases: <code>AdaptiveControl</code></p> <p>An alert dialog informs the user about situations that require acknowledgement. An alert dialog has an optional title and an optional list of actions. The title is displayed above the content and the actions are displayed below the content.</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog--example",
      "title": "Example",
      "text": ""
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog--import-flet-as-ft-def-mainpage-ftpage-pagetitle-alertdialog-examples-pagehorizontal_alignment-ftcrossaxisalignmentcenter-dlg-ftalertdialog-titlefttexthi-this-is-a-non-modal-dialog-on_dismisslambda-e-pageaddfttextnon-modal-dialog-dismissed-def-handle_closee-pageclosedlg_modal-pageaddfttextfmodal-dialog-closed-with-action-econtroltext-dlg_modal-ftalertdialog-modaltrue-titlefttextplease-confirm-contentfttextdo-you-really-want-to-delete-all-those-files-actions-fttextbuttonyes-on_clickhandle_close-fttextbuttonno-on_clickhandle_close-actions_alignmentftmainaxisalignmentend-on_dismisslambda-e-pageadd-fttextmodal-dialog-dismissed-pageadd-ftelevatedbuttonopen-dialog-on_clicklambda-e-pageopendlg-ftelevatedbuttonopen-modal-dialog-on_clicklambda-e-pageopendlg_modal-ftapptargetmain",
      "title": "<pre><code>import flet as ft\n\n\ndef main(page: ft.Page):\n    page.title = \"AlertDialog examples\"\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n\n    dlg = ft.AlertDialog(\n        title=ft.Text(\"Hi, this is a non-modal dialog!\"),\n        on_dismiss=lambda e: page.add(ft.Text(\"Non-modal dialog dismissed\")),\n    )\n\n    def handle_close(e):\n        page.close(dlg_modal)\n        page.add(ft.Text(f\"Modal dialog closed with action: {e.control.text}\"))\n\n    dlg_modal = ft.AlertDialog(\n        modal=True,\n        title=ft.Text(\"Please confirm\"),\n        content=ft.Text(\"Do you really want to delete all those files?\"),\n        actions=[\n            ft.TextButton(\"Yes\", on_click=handle_close),\n            ft.TextButton(\"No\", on_click=handle_close),\n        ],\n        actions_alignment=ft.MainAxisAlignment.END,\n        on_dismiss=lambda e: page.add(\n            ft.Text(\"Modal dialog dismissed\"),\n        ),\n    )\n\n    page.add(\n        ft.ElevatedButton(\"Open dialog\", on_click=lambda e: page.open(dlg)),\n        ft.ElevatedButton(\"Open modal dialog\", on_click=lambda e: page.open(dlg_modal)),\n    )\n\n\nft.app(target=main)\n</code></pre>",
      "text": "<p>Online docs: https://flet.dev/docs/controls/alertdialog</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.action_button_padding",
      "title": "<code>action_button_padding: PaddingValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Padding around each action button.</p> <p>Value is of type <code>PaddingValue</code> and defaults to <code>None</code>.</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.actions",
      "title": "<code>actions: Optional[List[Control]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>List of actions displayed at the bottom of the dialog.</p> <p>Value is of type <code>Optional[List[Control]]</code>.</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.actions_alignment",
      "title": "<code>actions_alignment: Optional[MainAxisAlignment]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Alignment of the action buttons.</p> <p>Value is of type <code>Optional[MainAxisAlignment]</code> and defaults to <code>None</code>.</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.actions_overflow_button_spacing",
      "title": "<code>actions_overflow_button_spacing: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Spacing between the action buttons when they overflow.</p> <p>Value is of type <code>OptionalNumber</code>.</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.actions_padding",
      "title": "<code>actions_padding: PaddingValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Padding around the actions.</p> <p>Value is of type <code>PaddingValue</code> and defaults to <code>None</code>.</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.alignment",
      "title": "<code>alignment: Optional[Alignment]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Alignment of the dialog on the screen.</p> <p>Value is of type <code>Optional[Alignment]</code> and defaults to <code>None</code>.</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.bgcolor",
      "title": "<code>bgcolor: Optional[str]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The background color of the dialog's surface.</p> <p>Value is of type <code>str</code>.</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.clip_behavior",
      "title": "<code>clip_behavior: Optional[ClipBehavior]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Determines how the dialog's content is clipped.</p> <p>Value is of type <code>Optional[ClipBehavior]</code> and defaults to <code>None</code>.</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.content",
      "title": "<code>content: Optional[Control]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The main content of the dialog.</p> <p>Value is of type <code>Optional[Control]</code>.</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.content_padding",
      "title": "<code>content_padding: PaddingValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Padding around the content widget.</p> <p>Value is of type <code>PaddingValue</code> and defaults to <code>None</code>.</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.content_text_style",
      "title": "<code>content_text_style: Optional[TextStyle]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Text style for the content.</p> <p>Value is of type <code>Optional[TextStyle]</code> and defaults to <code>None</code>.</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.elevation",
      "title": "<code>elevation: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Defines the elevation (z-coordinate) at which the dialog should appear.</p> <p>Value is of type <code>OptionalNumber</code>.</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.icon_color",
      "title": "<code>icon_color: Optional[str]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The color of the icon displayed in the dialog.</p> <p>Value is of type <code>str</code>.</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.icon_padding",
      "title": "<code>icon_padding: PaddingValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Padding around the icon.</p> <p>Value is of type <code>PaddingValue</code> and defaults to <code>None</code>.</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.inset_padding",
      "title": "<code>inset_padding: PaddingValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Padding around the dialog's surface, between the dialog and the edge of its parent.</p> <p>Value is of type <code>PaddingValue</code> and defaults to <code>None</code>.</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.modal",
      "title": "<code>modal: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>If <code>True</code>, the dialog will be modal and block user interaction with other parts of the app.</p> <p>Value is of type <code>bool</code> and defaults to <code>False</code>.</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.on_dismiss",
      "title": "<code>on_dismiss: OptionalEventCallable</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Callback triggered when the dialog is dismissed.</p> <p>Value is of type <code>OptionalEventCallable</code>.</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.open",
      "title": "<code>open: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Set to <code>True</code> to display a dialog.</p> <p>Value is of type <code>bool</code> and defaults to <code>False</code>.</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.semantics_label",
      "title": "<code>semantics_label: Optional[str]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Optional label for accessibility purposes.</p> <p>Value is of type <code>str</code>.</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.shadow_color",
      "title": "<code>shadow_color: Optional[str]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The color used to paint a drop shadow under the dialog, which reflects the dialog's elevation.</p> <p>Value is of type <code>str</code>.</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.shape",
      "title": "<code>shape: Optional[OutlinedBorder]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Defines the shape of the dialog's surface.</p> <p>Value is of type <code>Optional[OutlinedBorder]</code> and defaults to <code>None</code>.</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.surface_tint_color",
      "title": "<code>surface_tint_color: Optional[str]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The color used as a surface tint overlay on the dialog's background color, which reflects the dialog's elevation.</p> <p>Value is of type <code>str</code>.</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.title",
      "title": "<code>title: Optional[Control]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Optional title widget for the dialog.</p> <p>Value is of type <code>Optional[Control]</code>.</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.title_padding",
      "title": "<code>title_padding: PaddingValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Padding around the title widget.</p> <p>Value is of type <code>PaddingValue</code> and defaults to <code>None</code>.</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.title_text_style",
      "title": "<code>title_text_style: Optional[TextStyle]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Text style for the title.</p> <p>Value is of type <code>Optional[TextStyle]</code> and defaults to <code>None</code>.</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/alert_dialog/#flet_core.alert_dialog.AlertDialog.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/animated_switcher/",
      "title": "AnimatedSwitcher",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>A control that by default does a cross-fade between a new control and the control previously set on the AnimatedSwitcher as a <code>content</code>.</p>"
    },
    {
      "location": "controls/animated_switcher/#flet_core.animated_switcher.AnimatedSwitcher--example",
      "title": "Example",
      "text": "<pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    c1 = ft.Container(\n        ft.Text(\"Hello!\", style=ft.TextThemeStyle.HEADLINE_MEDIUM),\n        alignment=ft.alignment.center,\n        width=200,\n        height=200,\n        bgcolor=ft.colors.GREEN,\n    )\n    c2 = ft.Container(\n        ft.Text(\"Bye!\", size=50),\n        alignment=ft.alignment.center,\n        width=200,\n        height=200,\n        bgcolor=ft.colors.YELLOW,\n    )\n    c = ft.AnimatedSwitcher(\n        content=c1,\n        transition=ft.AnimatedSwitcherTransition.SCALE,\n        duration=500,\n        reverse_duration=100,\n        switch_in_curve=ft.AnimationCurve.BOUNCE_OUT,\n        switch_out_curve=ft.AnimationCurve.BOUNCE_IN,\n    )\n\n    def animate(e):\n        c.content = c2 if c.content == c1 else c1\n        c.update()\n\n    page.add(\n        c,\n        ft.ElevatedButton(\"Animate!\", on_click=animate),\n    )\n\nft.app(target=main)\n</code></pre> <p>Online docs: https://flet.dev/docs/controls/animatedswitcher</p>"
    },
    {
      "location": "controls/animated_switcher/#flet_core.animated_switcher.AnimatedSwitcher.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/animated_switcher/#flet_core.animated_switcher.AnimatedSwitcher.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/animated_switcher/#flet_core.animated_switcher.AnimatedSwitcher.content",
      "title": "<code>content: Control</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The content to display. When the <code>content</code> changes, the AnimatedSwitcher will animate the transition from the old <code>content</code> to the new one.</p> <p>Value is of type <code>Control</code>.</p>"
    },
    {
      "location": "controls/animated_switcher/#flet_core.animated_switcher.AnimatedSwitcher.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/animated_switcher/#flet_core.animated_switcher.AnimatedSwitcher.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/animated_switcher/#flet_core.animated_switcher.AnimatedSwitcher.duration",
      "title": "<code>duration: int</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The duration, in milliseconds, of the transition from the old <code>content</code> value to the new one.</p> <p>Value is of type <code>int</code> and defaults to <code>1000</code> milliseconds.</p>"
    },
    {
      "location": "controls/animated_switcher/#flet_core.animated_switcher.AnimatedSwitcher.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/animated_switcher/#flet_core.animated_switcher.AnimatedSwitcher.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/animated_switcher/#flet_core.animated_switcher.AnimatedSwitcher.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/animated_switcher/#flet_core.animated_switcher.AnimatedSwitcher.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/animated_switcher/#flet_core.animated_switcher.AnimatedSwitcher.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/animated_switcher/#flet_core.animated_switcher.AnimatedSwitcher.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/animated_switcher/#flet_core.animated_switcher.AnimatedSwitcher.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/animated_switcher/#flet_core.animated_switcher.AnimatedSwitcher.reverse_duration",
      "title": "<code>reverse_duration: int</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The duration, in milliseconds, of the transition from the new <code>content</code> value to the old one.</p> <p>Value is of type <code>int</code> and defaults to <code>1000</code> milliseconds.</p>"
    },
    {
      "location": "controls/animated_switcher/#flet_core.animated_switcher.AnimatedSwitcher.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/animated_switcher/#flet_core.animated_switcher.AnimatedSwitcher.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/animated_switcher/#flet_core.animated_switcher.AnimatedSwitcher.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/animated_switcher/#flet_core.animated_switcher.AnimatedSwitcher.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/animated_switcher/#flet_core.animated_switcher.AnimatedSwitcher.switch_in_curve",
      "title": "<code>switch_in_curve: Optional[AnimationCurve]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The animation curve to use when transitioning in a new <code>content</code>.</p>"
    },
    {
      "location": "controls/animated_switcher/#flet_core.animated_switcher.AnimatedSwitcher.switch_out_curve",
      "title": "<code>switch_out_curve: Optional[AnimationCurve]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The animation curve to use when transitioning a previous <code>content</code> out.</p>"
    },
    {
      "location": "controls/animated_switcher/#flet_core.animated_switcher.AnimatedSwitcher.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/animated_switcher/#flet_core.animated_switcher.AnimatedSwitcher.transition",
      "title": "<code>transition: Optional[AnimatedSwitcherTransition]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>An animation type to transition between new and old <code>content</code>.</p>"
    },
    {
      "location": "controls/animated_switcher/#flet_core.animated_switcher.AnimatedSwitcher.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/animated_switcher/#flet_core.animated_switcher.AnimatedSwitcher.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/animated_switcher/#flet_core.animated_switcher.AnimatedSwitcher.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/app_bar/",
      "title": "AppBar",
      "text": "<p>               Bases: <code>AdaptiveControl</code></p> <p>A material design app bar.</p> <p>Example: <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    def check_item_clicked(e):\n        e.control.checked = not e.control.checked\n        page.update()\n\n    page.appbar = ft.AppBar(\n        leading=ft.Icon(ft.icons.PALETTE),\n        leading_width=40,\n        title=ft.Text(\"AppBar Example\"),\n        center_title=False,\n        bgcolor=ft.colors.SURFACE_VARIANT,\n        actions=[\n            ft.IconButton(ft.icons.WB_SUNNY_OUTLINED),\n            ft.IconButton(ft.icons.FILTER_3),\n            ft.PopupMenuButton(\n                items=[\n                    ft.PopupMenuItem(text=\"Item 1\"),\n                    ft.PopupMenuItem(),  # divider\n                    ft.PopupMenuItem(\n                        text=\"Checked item\", checked=False, on_click=check_item_clicked\n                    ),\n                ]\n            ),\n        ],\n    )\n    page.add(ft.Text(\"Body!\"))\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/appbar</p>"
    },
    {
      "location": "controls/app_bar/#flet_core.app_bar.AppBar.actions",
      "title": "<code>actions: Optional[List[Control]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>A list of <code>Control</code> objects displayed on the right side of the app bar.</p> <p>Typically these controls are icons or buttons for various actions.</p>"
    },
    {
      "location": "controls/app_bar/#flet_core.app_bar.AppBar.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/app_bar/#flet_core.app_bar.AppBar.automatically_imply_leading",
      "title": "<code>automatically_imply_leading: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Controls whether the leading widget should be implied if <code>leading</code> is <code>None</code>.</p> <p>If <code>True</code> and <code>leading</code> is <code>None</code>, the system will automatically try to deduce what the leading widget should be. If <code>False</code> and <code>leading</code> is <code>None</code>, the leading space is given to the title. If a leading widget is provided, this parameter has no effect.</p> <p>Value is of type <code>bool</code>.</p>"
    },
    {
      "location": "controls/app_bar/#flet_core.app_bar.AppBar.bgcolor",
      "title": "<code>bgcolor: Optional[str]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The background color of the app bar.</p> <p>Value is of type <code>str</code>.</p>"
    },
    {
      "location": "controls/app_bar/#flet_core.app_bar.AppBar.center_title",
      "title": "<code>center_title: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the <code>title</code> is centered.</p> <p>If set to <code>True</code>, the <code>title</code> widget will be centered within the app bar. Otherwise, the <code>title</code> will align to the start of the space between <code>leading</code> and <code>actions</code>.</p> <p>Value is of type <code>bool</code>.</p>"
    },
    {
      "location": "controls/app_bar/#flet_core.app_bar.AppBar.clip_behavior",
      "title": "<code>clip_behavior: Optional[ClipBehavior]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The content of the app bar will be clipped (or not) according to this option.</p> <p>Value is of type <code>ClipBehavior</code>.</p>"
    },
    {
      "location": "controls/app_bar/#flet_core.app_bar.AppBar.color",
      "title": "<code>color: Optional[str]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The foreground color to be used within the app bar, typically applied to text and iconography.</p> <p>Value is of type <code>str</code>.</p>"
    },
    {
      "location": "controls/app_bar/#flet_core.app_bar.AppBar.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/app_bar/#flet_core.app_bar.AppBar.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/app_bar/#flet_core.app_bar.AppBar.elevation",
      "title": "<code>elevation: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The z-coordinate at which to place this app bar. This controls the size of the shadow below the app bar.</p> <p>Value is of type <code>OptionalNumber</code>.</p>"
    },
    {
      "location": "controls/app_bar/#flet_core.app_bar.AppBar.elevation_on_scroll",
      "title": "<code>elevation_on_scroll: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The elevation to be applied to the app bar when the user scrolls up.</p> <p>Value is of type <code>OptionalNumber</code>.</p>"
    },
    {
      "location": "controls/app_bar/#flet_core.app_bar.AppBar.exclude_header_semantics",
      "title": "<code>exclude_header_semantics: Optional[bool]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether to exclude the app bar's header semantics from the overall app bar semantics.</p> <p>Value is of type <code>bool</code>.</p>"
    },
    {
      "location": "controls/app_bar/#flet_core.app_bar.AppBar.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/app_bar/#flet_core.app_bar.AppBar.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/app_bar/#flet_core.app_bar.AppBar.force_material_transparency",
      "title": "<code>force_material_transparency: Optional[bool]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Forces the app bar to use a material design with transparent background, even if it is not secondary.</p> <p>Value is of type <code>bool</code>.</p>"
    },
    {
      "location": "controls/app_bar/#flet_core.app_bar.AppBar.is_secondary",
      "title": "<code>is_secondary: Optional[bool]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Indicates whether the app bar is a secondary app bar.</p> <p>Value is of type <code>bool</code>.</p>"
    },
    {
      "location": "controls/app_bar/#flet_core.app_bar.AppBar.leading",
      "title": "<code>leading: Optional[Control]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>A <code>Control</code> to display before the toolbar's title.</p> <p>Typically the leading control is an <code>Icon</code> or an <code>IconButton</code>.</p>"
    },
    {
      "location": "controls/app_bar/#flet_core.app_bar.AppBar.leading_width",
      "title": "<code>leading_width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Defines the width of the leading control.</p> <p>Value is of type <code>OptionalNumber</code> and defaults to <code>56.0</code>.</p>"
    },
    {
      "location": "controls/app_bar/#flet_core.app_bar.AppBar.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/app_bar/#flet_core.app_bar.AppBar.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/app_bar/#flet_core.app_bar.AppBar.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/app_bar/#flet_core.app_bar.AppBar.shadow_color",
      "title": "<code>shadow_color: Optional[str]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The color of the shadow below the app bar.</p> <p>Value is of type <code>str</code>.</p>"
    },
    {
      "location": "controls/app_bar/#flet_core.app_bar.AppBar.shape",
      "title": "<code>shape: Optional[OutlinedBorder]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The shape of the app bar's Material as well as its shadow.</p> <p>Value is of type <code>OutlinedBorder</code>.</p>"
    },
    {
      "location": "controls/app_bar/#flet_core.app_bar.AppBar.surface_tint_color",
      "title": "<code>surface_tint_color: Optional[str]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The color used as an overlay on the app bar when it has a background color.</p> <p>Value is of type <code>str</code>.</p>"
    },
    {
      "location": "controls/app_bar/#flet_core.app_bar.AppBar.title",
      "title": "<code>title: Optional[Control]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The primary widget displayed in the app bar, typically a <code>Text</code> widget.</p> <p>The title is placed between the <code>leading</code> and <code>actions</code> widgets.</p>"
    },
    {
      "location": "controls/app_bar/#flet_core.app_bar.AppBar.title_spacing",
      "title": "<code>title_spacing: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The spacing around the <code>title</code> on the horizontal axis. It is applied even if there are no <code>leading</code> or <code>actions</code> controls.</p> <p>If you want <code>title</code> to take all the space available, set this value to <code>0.0</code>.</p> <p>Value is of type <code>OptionalNumber</code>.</p>"
    },
    {
      "location": "controls/app_bar/#flet_core.app_bar.AppBar.title_text_style",
      "title": "<code>title_text_style: Optional[TextStyle]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The style to be used for the <code>Text</code> controls in the <code>title</code>.</p> <p>Value is of type <code>TextStyle</code>.</p>"
    },
    {
      "location": "controls/app_bar/#flet_core.app_bar.AppBar.toolbar_height",
      "title": "<code>toolbar_height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the toolbar.</p> <p>Value is of type <code>OptionalNumber</code>.</p>"
    },
    {
      "location": "controls/app_bar/#flet_core.app_bar.AppBar.toolbar_opacity",
      "title": "<code>toolbar_opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the toolbar. Value ranges from <code>0.0</code> (transparent) to <code>1.0</code> (fully opaque).</p> <p>Value is of type <code>OptionalNumber</code> and defaults to <code>1.0</code>.</p>"
    },
    {
      "location": "controls/app_bar/#flet_core.app_bar.AppBar.toolbar_text_style",
      "title": "<code>toolbar_text_style: Optional[TextStyle]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The style to be used for the <code>Text</code> controls in the app bar's <code>leading</code> and <code>actions</code> (but not <code>title</code>).</p> <p>Value is of type <code>TextStyle</code>.</p>"
    },
    {
      "location": "controls/app_bar/#flet_core.app_bar.AppBar.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/app_bar/#flet_core.app_bar.AppBar.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/app_bar/#flet_core.app_bar.AppBar.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/audio/",
      "title": "Audio",
      "text": "<p>               Bases: <code>Control</code></p> <p>A control to simultaneously play multiple audio files. Works on macOS, Linux, Windows, iOS, Android and web. Based on audioplayers Flutter widget (https://pub.dev/packages/audioplayers).</p> <p>Audio control is non-visual and should be added to <code>page.overlay</code> list.</p> <p>Example: <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    audio1 = ft.Audio(\n        src=\"https://luan.xyz/files/audio/ambient_c_motion.mp3\", autoplay=True\n    )\n    page.overlay.append(audio1)\n    page.add(\n        ft.Text(\"This is an app with background audio.\"),\n        ft.ElevatedButton(\"Stop playing\", on_click=lambda _: audio1.pause()),\n    )\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/audio</p>"
    },
    {
      "location": "controls/audio/#flet_core.audio.Audio.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/audio/#flet_core.audio.Audio.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/audio/#flet_core.audio.Audio.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/audio/#flet_core.audio.Audio.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/audio/#flet_core.audio.Audio.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/audio/#flet_core.audio.Audio.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/audio/#flet_core.audio.Audio.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/audio/#flet_core.audio.Audio.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/audio/#flet_core.audio.Audio.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/audio/#flet_core.audio.Audio.before_update",
      "title": "<code>before_update()</code>",
      "text": "<p>Mainly used when creating custom controls.</p> <p>It is called before this control is updated.</p> <p>Make sure not to call <code>update()</code> method within <code>before_update()</code>.</p>"
    },
    {
      "location": "controls/audio/#flet_core.audio.Audio.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/audio_recorder/",
      "title": "AudioRecorder",
      "text": "<p>               Bases: <code>Control</code></p> <p>A control that allows you to record audio from your device.</p> <p>Online docs: https://flet.dev/docs/controls/audiorecorder</p>"
    },
    {
      "location": "controls/audio_recorder/#flet_core.audio_recorder.AudioRecorder.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/audio_recorder/#flet_core.audio_recorder.AudioRecorder.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/audio_recorder/#flet_core.audio_recorder.AudioRecorder.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/audio_recorder/#flet_core.audio_recorder.AudioRecorder.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/audio_recorder/#flet_core.audio_recorder.AudioRecorder.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/audio_recorder/#flet_core.audio_recorder.AudioRecorder.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/audio_recorder/#flet_core.audio_recorder.AudioRecorder.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/audio_recorder/#flet_core.audio_recorder.AudioRecorder.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/audio_recorder/#flet_core.audio_recorder.AudioRecorder.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/audio_recorder/#flet_core.audio_recorder.AudioRecorder.before_update",
      "title": "<code>before_update()</code>",
      "text": "<p>Mainly used when creating custom controls.</p> <p>It is called before this control is updated.</p> <p>Make sure not to call <code>update()</code> method within <code>before_update()</code>.</p>"
    },
    {
      "location": "controls/audio_recorder/#flet_core.audio_recorder.AudioRecorder.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/auto_complete/",
      "title": "AutoComplete",
      "text": "<p>               Bases: <code>Control</code></p> <p>Helps the user make a selection by entering some text and choosing from among a list of displayed options.</p> <p>Online docs: https://flet.dev/docs/controls/autocomplete</p>"
    },
    {
      "location": "controls/auto_complete/#flet_core.auto_complete.AutoComplete.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/auto_complete/#flet_core.auto_complete.AutoComplete.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/auto_complete/#flet_core.auto_complete.AutoComplete.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/auto_complete/#flet_core.auto_complete.AutoComplete.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/auto_complete/#flet_core.auto_complete.AutoComplete.on_select",
      "title": "<code>on_select: OptionalEventCallable[AutoCompleteSelectEvent]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Fires when a suggestion is selected.</p> <p>Event handler is of type <code>AutoCompleteSelectEvent</code>.</p>"
    },
    {
      "location": "controls/auto_complete/#flet_core.auto_complete.AutoComplete.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/auto_complete/#flet_core.auto_complete.AutoComplete.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/auto_complete/#flet_core.auto_complete.AutoComplete.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/auto_complete/#flet_core.auto_complete.AutoComplete.selected_index",
      "title": "<code>selected_index: Optional[int]</code>  <code>property</code>",
      "text": "<p>The index of the selected suggestion in the list of <code>suggestions</code>.</p> <p>This property is read-only and <code>None</code> at initialization, until a suggestion is selected for the first time.</p> <p>Value is of type <code>int</code>.</p>"
    },
    {
      "location": "controls/auto_complete/#flet_core.auto_complete.AutoComplete.suggestions",
      "title": "<code>suggestions: Optional[List[AutoCompleteSuggestion]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>A list of <code>AutoCompleteSuggestion</code> controls representing the suggestions to be displayed.</p> <p>Note:</p> <ul> <li>The internal filtration process of the suggestions (based on their <code>key</code>s) with respect to the user's input is case-insensitive because the comparison is done in lowercase.</li> <li>A valid <code>AutoCompleteSuggestion</code> must have at least a <code>key</code> or <code>value</code> specified, else it will be ignored. If only <code>key</code> is provided, <code>value</code> will be set to <code>key</code> as fallback and vice versa.</li> </ul>"
    },
    {
      "location": "controls/auto_complete/#flet_core.auto_complete.AutoComplete.suggestions_max_height",
      "title": "<code>suggestions_max_height: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The maximum visual height of the suggestions list.</p> <p>Value is of type <code>float</code> and defaults to <code>200.0</code>.</p>"
    },
    {
      "location": "controls/auto_complete/#flet_core.auto_complete.AutoComplete.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/auto_complete/#flet_core.auto_complete.AutoComplete.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/auto_complete/#flet_core.auto_complete.AutoComplete.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/autofill_group/",
      "title": "AutofillGroup",
      "text": "<p>               Bases: <code>Control</code></p> <p>Helps the user make a selection by entering some text and choosing from among a list of displayed options.</p> <p>Online docs: https://flet.dev/docs/controls/autocomplete</p>"
    },
    {
      "location": "controls/autofill_group/#flet_core.auto_complete.AutoComplete.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/autofill_group/#flet_core.auto_complete.AutoComplete.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/autofill_group/#flet_core.auto_complete.AutoComplete.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/autofill_group/#flet_core.auto_complete.AutoComplete.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/autofill_group/#flet_core.auto_complete.AutoComplete.on_select",
      "title": "<code>on_select: OptionalEventCallable[AutoCompleteSelectEvent]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Fires when a suggestion is selected.</p> <p>Event handler is of type <code>AutoCompleteSelectEvent</code>.</p>"
    },
    {
      "location": "controls/autofill_group/#flet_core.auto_complete.AutoComplete.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/autofill_group/#flet_core.auto_complete.AutoComplete.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/autofill_group/#flet_core.auto_complete.AutoComplete.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/autofill_group/#flet_core.auto_complete.AutoComplete.selected_index",
      "title": "<code>selected_index: Optional[int]</code>  <code>property</code>",
      "text": "<p>The index of the selected suggestion in the list of <code>suggestions</code>.</p> <p>This property is read-only and <code>None</code> at initialization, until a suggestion is selected for the first time.</p> <p>Value is of type <code>int</code>.</p>"
    },
    {
      "location": "controls/autofill_group/#flet_core.auto_complete.AutoComplete.suggestions",
      "title": "<code>suggestions: Optional[List[AutoCompleteSuggestion]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>A list of <code>AutoCompleteSuggestion</code> controls representing the suggestions to be displayed.</p> <p>Note:</p> <ul> <li>The internal filtration process of the suggestions (based on their <code>key</code>s) with respect to the user's input is case-insensitive because the comparison is done in lowercase.</li> <li>A valid <code>AutoCompleteSuggestion</code> must have at least a <code>key</code> or <code>value</code> specified, else it will be ignored. If only <code>key</code> is provided, <code>value</code> will be set to <code>key</code> as fallback and vice versa.</li> </ul>"
    },
    {
      "location": "controls/autofill_group/#flet_core.auto_complete.AutoComplete.suggestions_max_height",
      "title": "<code>suggestions_max_height: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The maximum visual height of the suggestions list.</p> <p>Value is of type <code>float</code> and defaults to <code>200.0</code>.</p>"
    },
    {
      "location": "controls/autofill_group/#flet_core.auto_complete.AutoComplete.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/autofill_group/#flet_core.auto_complete.AutoComplete.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/autofill_group/#flet_core.auto_complete.AutoComplete.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/badge/",
      "title": "Badge",
      "text": "<p>               Bases: <code>Control</code></p> <p>A Material Design \"badge\".</p> <p>Badges are used to show notifications, counts, or status information on navigation items such as NavigationBar or NavigationRail destinations or a button's icon.</p>"
    },
    {
      "location": "controls/badge/#flet_core.badge.Badge--example",
      "title": "Example",
      "text": "<pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Badges in NavigationBar icons\"\n    page.navigation_bar = ft.NavigationBar(\n        destinations=[\n            ft.NavigationDestination(\n                icon_content=ft.Badge(\n                    content=ft.Icon(ft.icons.EXPLORE),\n                    small_size=10,\n                ),\n                label=\"Explore\",\n            ),\n            ft.NavigationDestination(icon=ft.icons.COMMUTE, label=\"Commute\"),\n            ft.NavigationDestination(\n                icon_content=ft.Badge(content=ft.Icon(ft.icons.PHONE), text=\"10\")\n            ),\n        ]\n    )\n    page.add(ft.Text(\"Body!\"))\n\n\nft.app(target=main)\n</code></pre> <p>Online docs: https://flet.dev/docs/controls/badge</p>"
    },
    {
      "location": "controls/badge/#flet_core.badge.Badge.alignment",
      "title": "<code>alignment: Optional[Alignment]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Aligns the label relative to the content of the badge.</p> <p>Alignment is an instance of <code>alignment.Alignment</code> class object with <code>x</code> and <code>y</code> properties representing the distance from the center of a rectangle.</p>"
    },
    {
      "location": "controls/badge/#flet_core.badge.Badge.bgcolor",
      "title": "<code>bgcolor: Optional[str]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Background color of the label.</p>"
    },
    {
      "location": "controls/badge/#flet_core.badge.Badge.content",
      "title": "<code>content: Optional[Control]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>A child <code>Control</code> contained by the badge, typically an icon that's part of a NavigationBar or a NavigationRail destination or a button's icon.</p>"
    },
    {
      "location": "controls/badge/#flet_core.badge.Badge.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/badge/#flet_core.badge.Badge.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/badge/#flet_core.badge.Badge.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/badge/#flet_core.badge.Badge.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/badge/#flet_core.badge.Badge.label_visible",
      "title": "<code>label_visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>If False, label is not displayed. By default, <code>label_visible</code> is True. It can be used to create a badge that's only shown under certain conditions.</p>"
    },
    {
      "location": "controls/badge/#flet_core.badge.Badge.large_size",
      "title": "<code>large_size: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The badge's label height if <code>text</code> is provided.</p> <p>If the default value is overridden then it may be useful to also override <code>padding</code> and <code>alignment</code>.</p>"
    },
    {
      "location": "controls/badge/#flet_core.badge.Badge.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Combined with <code>alignment</code> to determine the location of the label relative to the content.</p> <p>Has effect only if <code>text</code> is also provided.</p>"
    },
    {
      "location": "controls/badge/#flet_core.badge.Badge.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/badge/#flet_core.badge.Badge.padding",
      "title": "<code>padding: PaddingValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The padding added to the badge's label.</p> <p>This value is only used if <code>text</code> is provided. Defaults to 4 pixels on the left and right.</p>"
    },
    {
      "location": "controls/badge/#flet_core.badge.Badge.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/badge/#flet_core.badge.Badge.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/badge/#flet_core.badge.Badge.small_size",
      "title": "<code>small_size: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The badge's label diameter if <code>text</code> is not provided.</p> <p>If <code>text</code> is not provided, the badge is shown as a filled circle of <code>small_size</code> diameter.</p>"
    },
    {
      "location": "controls/badge/#flet_core.badge.Badge.text",
      "title": "<code>text: Optional[str]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The text shown on badge's label, typically 1 to 4 characters.</p> <p>If the text is not provided, the badge is shown as a filled circle of <code>small_size</code> diameter.</p>"
    },
    {
      "location": "controls/badge/#flet_core.badge.Badge.text_color",
      "title": "<code>text_color: Optional[str]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Color of the text shown in the label. This color overrides the color of the label's <code>text_style</code>.</p>"
    },
    {
      "location": "controls/badge/#flet_core.badge.Badge.text_style",
      "title": "<code>text_style: Optional[TextStyle]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The text style to use for text in the label.</p>"
    },
    {
      "location": "controls/badge/#flet_core.badge.Badge.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/badge/#flet_core.badge.Badge.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/badge/#flet_core.badge.Badge.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/banner/",
      "title": "Banner",
      "text": "<p>               Bases: <code>Control</code></p> <p>A banner displays an important, succinct message, and provides actions for users to address (or dismiss the banner). A user action is required for it to be dismissed.</p> <p>Banners are displayed at the top of the screen, below a top app bar. They are persistent and non-modal, allowing the user to either ignore them or interact with them at any time.</p>"
    },
    {
      "location": "controls/banner/#flet_core.banner.Banner--example",
      "title": "Example",
      "text": "<p>```python import flet as ft</p> <p>def main(page):     page.horizontal_alignment = ft.CrossAxisAlignment.CENTER</p> <pre><code>def close_banner(e):\n    page.close(banner)\n    page.add(ft.Text(\"Action clicked: \" + e.control.text))\n\naction_button_style = ft.ButtonStyle(color=ft.colors.BLUE)\nbanner = ft.Banner(\n    bgcolor=ft.colors.AMBER_100,\n    leading=ft.Icon(ft.icons.WARNING_AMBER_ROUNDED, color=ft.colors.AMBER, size=40),\n    content=ft.Text(\n        value=\"Oops, there were some errors while trying to delete the file. What would you like me to do?\",\n        color=ft.colors.BLACK,\n    ),\n    actions=[\n        ft.TextButton(text=\"Retry\", style=action_button_style, on_click=close_banner),\n        ft.TextButton(text=\"Ignore\", style=action_button_style, on_click=close_banner),\n        ft.TextButton(text=\"Cancel\", style=action_button_style, on_click=close_banner),\n    ],\n)\n\npage.add(ft.ElevatedButton(\"Show Banner\", on_click=lambda e: page.open(banner)))\n</code></pre> <p>ft.app(main)</p> <p>Online docs: https://flet.dev/docs/controls/banner</p>"
    },
    {
      "location": "controls/banner/#flet_core.banner.Banner.actions",
      "title": "<code>actions: List[Control]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The actions displayed at the bottom or trailing side of the banner.</p> <p>Typically a list of TextButton controls.</p>"
    },
    {
      "location": "controls/banner/#flet_core.banner.Banner.bgcolor",
      "title": "<code>bgcolor: Optional[str]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The color of the banner's surface.</p> <p>Defaults to <code>None</code>, meaning no specific background color is applied.</p>"
    },
    {
      "location": "controls/banner/#flet_core.banner.Banner.content",
      "title": "<code>content: Control</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The content of the banner.</p> <p>Typically a Text control.</p>"
    },
    {
      "location": "controls/banner/#flet_core.banner.Banner.content_padding",
      "title": "<code>content_padding: PaddingValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The padding around the content.</p> <p>If the actions are below the content, defaults to padding.only(left=16.0, top=24.0, right=16.0, bottom=4.0). If the actions are trailing the content, defaults to padding.only(left=16.0, top=2.0).</p>"
    },
    {
      "location": "controls/banner/#flet_core.banner.Banner.content_text_style",
      "title": "<code>content_text_style: Optional[TextStyle]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The style used for the Text controls in the content.</p> <p>Value is of type TextStyle.</p>"
    },
    {
      "location": "controls/banner/#flet_core.banner.Banner.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/banner/#flet_core.banner.Banner.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/banner/#flet_core.banner.Banner.divider_color",
      "title": "<code>divider_color: Optional[str]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The color of the divider line, if applicable.</p>"
    },
    {
      "location": "controls/banner/#flet_core.banner.Banner.elevation",
      "title": "<code>elevation: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The elevation of the banner, which affects the shadow depth.</p> <p>Defaults to <code>None</code>, meaning no specific elevation is applied. Elevation cannot be negative.</p>"
    },
    {
      "location": "controls/banner/#flet_core.banner.Banner.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/banner/#flet_core.banner.Banner.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/banner/#flet_core.banner.Banner.force_actions_below",
      "title": "<code>force_actions_below: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Forces actions to be below the content regardless of how many there are.</p> <p>Defaults to <code>False</code>. If <code>True</code>, actions are always placed below the content. If <code>False</code>, actions are placed trailing if there is only one, otherwise below the content.</p>"
    },
    {
      "location": "controls/banner/#flet_core.banner.Banner.leading",
      "title": "<code>leading: Optional[Control]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The leading control of the banner.</p> <p>Typically an Icon control.</p>"
    },
    {
      "location": "controls/banner/#flet_core.banner.Banner.leading_padding",
      "title": "<code>leading_padding: PaddingValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The padding around the leading control.</p> <p>Defaults to 16 virtual pixels.</p>"
    },
    {
      "location": "controls/banner/#flet_core.banner.Banner.margin",
      "title": "<code>margin: MarginValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The margin around the banner.</p> <p>The value is an instance of Margin class or a number.</p>"
    },
    {
      "location": "controls/banner/#flet_core.banner.Banner.modal",
      "title": "<code>modal: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Determines whether the banner is modal.</p> <p>Modal banners block user interaction with the rest of the interface until they are dismissed. Defaults to <code>False</code>.</p>"
    },
    {
      "location": "controls/banner/#flet_core.banner.Banner.on_visible",
      "title": "<code>on_visible: OptionalControlEventCallable</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Event handler for when the banner is shown or made visible for the first time.</p>"
    },
    {
      "location": "controls/banner/#flet_core.banner.Banner.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/banner/#flet_core.banner.Banner.open",
      "title": "<code>open: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Determines whether the banner is open and visible.</p> <p>Defaults to <code>False</code>. Set to <code>True</code> to display the banner.</p>"
    },
    {
      "location": "controls/banner/#flet_core.banner.Banner.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/banner/#flet_core.banner.Banner.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/banner/#flet_core.banner.Banner.shadow_color",
      "title": "<code>shadow_color: Optional[str]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The color of the shadow below the banner.</p>"
    },
    {
      "location": "controls/banner/#flet_core.banner.Banner.surface_tint_color",
      "title": "<code>surface_tint_color: Optional[str]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The color used as an overlay on <code>bgcolor</code> to indicate elevation.</p>"
    },
    {
      "location": "controls/banner/#flet_core.banner.Banner.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/banner/#flet_core.banner.Banner.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/banner/#flet_core.banner.Banner.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/bottom_app_bar/",
      "title": "BottomAppBar",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>A material design bottom app bar.</p> <p>Online docs: https://flet.dev/docs/controls/bottomappbar</p>"
    },
    {
      "location": "controls/bottom_app_bar/#flet_core.bottom_app_bar.BottomAppBar.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/bottom_app_bar/#flet_core.bottom_app_bar.BottomAppBar.bgcolor",
      "title": "<code>bgcolor: Optional[str]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The fill color to use for the BottomAppBar.</p> <p>Default color is defined by the current theme.</p>"
    },
    {
      "location": "controls/bottom_app_bar/#flet_core.bottom_app_bar.BottomAppBar.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/bottom_app_bar/#flet_core.bottom_app_bar.BottomAppBar.clip_behavior",
      "title": "<code>clip_behavior: Optional[ClipBehavior]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The content will be clipped (or not) according to this option.</p> <p>Value is of type <code>ClipBehavior</code> and defaults to <code>ClipBehavior.NONE</code>.</p>"
    },
    {
      "location": "controls/bottom_app_bar/#flet_core.bottom_app_bar.BottomAppBar.content",
      "title": "<code>content: Optional[Control]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>A child Control contained by the BottomAppBar.</p> <p>This is typically a widget or set of widgets that are displayed within the BottomAppBar.</p>"
    },
    {
      "location": "controls/bottom_app_bar/#flet_core.bottom_app_bar.BottomAppBar.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/bottom_app_bar/#flet_core.bottom_app_bar.BottomAppBar.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/bottom_app_bar/#flet_core.bottom_app_bar.BottomAppBar.elevation",
      "title": "<code>elevation: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>This property controls the size of the shadow below the BottomAppBar.</p> <p>Defaults to <code>4</code>. The value must be <code>None</code> or a non-negative number.</p>"
    },
    {
      "location": "controls/bottom_app_bar/#flet_core.bottom_app_bar.BottomAppBar.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/bottom_app_bar/#flet_core.bottom_app_bar.BottomAppBar.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/bottom_app_bar/#flet_core.bottom_app_bar.BottomAppBar.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/bottom_app_bar/#flet_core.bottom_app_bar.BottomAppBar.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/bottom_app_bar/#flet_core.bottom_app_bar.BottomAppBar.notch_margin",
      "title": "<code>notch_margin: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The margin between the FloatingActionButton and the BottomAppBar's notch.</p> <p>Can be visible only if <code>shape</code> is not <code>None</code>.</p>"
    },
    {
      "location": "controls/bottom_app_bar/#flet_core.bottom_app_bar.BottomAppBar.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/bottom_app_bar/#flet_core.bottom_app_bar.BottomAppBar.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/bottom_app_bar/#flet_core.bottom_app_bar.BottomAppBar.padding",
      "title": "<code>padding: PaddingValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Empty space to inscribe inside a container decoration (background, border).</p> <p>Padding is an instance of the <code>Padding</code> class. Defaults to <code>padding.symmetric(vertical=12.0, horizontal=16.0)</code>.</p>"
    },
    {
      "location": "controls/bottom_app_bar/#flet_core.bottom_app_bar.BottomAppBar.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/bottom_app_bar/#flet_core.bottom_app_bar.BottomAppBar.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/bottom_app_bar/#flet_core.bottom_app_bar.BottomAppBar.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/bottom_app_bar/#flet_core.bottom_app_bar.BottomAppBar.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/bottom_app_bar/#flet_core.bottom_app_bar.BottomAppBar.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/bottom_app_bar/#flet_core.bottom_app_bar.BottomAppBar.shadow_color",
      "title": "<code>shadow_color: Optional[str]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The color of the shadow below the BottomAppBar.</p>"
    },
    {
      "location": "controls/bottom_app_bar/#flet_core.bottom_app_bar.BottomAppBar.shape",
      "title": "<code>shape: Optional[NotchShape]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The notch that is made for the floating action button.</p> <p>The shape is an instance of the <code>NotchShape</code> class.</p>"
    },
    {
      "location": "controls/bottom_app_bar/#flet_core.bottom_app_bar.BottomAppBar.surface_tint_color",
      "title": "<code>surface_tint_color: Optional[str]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The color used as an overlay on <code>bgcolor</code> to indicate elevation.</p> <p>If this is <code>None</code>, no overlay will be applied. Otherwise, this color will be composited on top of <code>bgcolor</code> with an opacity related to <code>elevation</code> and used to paint the BottomAppBar's background.</p>"
    },
    {
      "location": "controls/bottom_app_bar/#flet_core.bottom_app_bar.BottomAppBar.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/bottom_app_bar/#flet_core.bottom_app_bar.BottomAppBar.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/bottom_app_bar/#flet_core.bottom_app_bar.BottomAppBar.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/bottom_app_bar/#flet_core.bottom_app_bar.BottomAppBar.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/bottom_sheet/",
      "title": "BottomSheet",
      "text": "<p>               Bases: <code>Control</code></p> <p>A modal bottom sheet is an alternative to a menu or a dialog and prevents the user from interacting with the rest of the app.</p> <p>Example: <pre><code>import flet as ft\n\n\ndef main(page: ft.Page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n\n    def handle_dismissal(e):\n        page.add(ft.Text(\"Bottom sheet dismissed\"))\n    bs = ft.BottomSheet(\n        on_dismiss=handle_dismissal,\n        content=ft.Container(\n            padding=50,\n            content=ft.Column(\n                tight=True,\n                controls=[\n                    ft.Text(\"This is bottom sheet's content!\"),\n                    ft.ElevatedButton(\"Close bottom sheet\", on_click=lambda _: page.close(bs)),\n                ],\n            ),\n        ),\n    )\n    page.add(ft.ElevatedButton(\"Display bottom sheet\", on_click=lambda _: page.open(bs)))\n\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/bottomsheet</p>"
    },
    {
      "location": "controls/bottom_sheet/#flet_core.bottom_sheet.BottomSheet.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/bottom_sheet/#flet_core.bottom_sheet.BottomSheet.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/bottom_sheet/#flet_core.bottom_sheet.BottomSheet.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/bottom_sheet/#flet_core.bottom_sheet.BottomSheet.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/bottom_sheet/#flet_core.bottom_sheet.BottomSheet.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/bottom_sheet/#flet_core.bottom_sheet.BottomSheet.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/bottom_sheet/#flet_core.bottom_sheet.BottomSheet.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/bottom_sheet/#flet_core.bottom_sheet.BottomSheet.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/bottom_sheet/#flet_core.bottom_sheet.BottomSheet.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/bottom_sheet/#flet_core.bottom_sheet.BottomSheet.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/canvas/",
      "title": "Canvas",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p>"
    },
    {
      "location": "controls/canvas/#flet_core.canvas.Canvas.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/canvas/#flet_core.canvas.Canvas.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/canvas/#flet_core.canvas.Canvas.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/canvas/#flet_core.canvas.Canvas.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/canvas/#flet_core.canvas.Canvas.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/canvas/#flet_core.canvas.Canvas.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/canvas/#flet_core.canvas.Canvas.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/canvas/#flet_core.canvas.Canvas.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/canvas/#flet_core.canvas.Canvas.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/canvas/#flet_core.canvas.Canvas.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/canvas/#flet_core.canvas.Canvas.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/canvas/#flet_core.canvas.Canvas.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/canvas/#flet_core.canvas.Canvas.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/canvas/#flet_core.canvas.Canvas.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/canvas/#flet_core.canvas.Canvas.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/canvas/#flet_core.canvas.Canvas.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/canvas/#flet_core.canvas.Canvas.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/canvas/#flet_core.canvas.Canvas.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/canvas/#flet_core.canvas.Canvas.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/card/",
      "title": "Card",
      "text": "<p>               Bases: <code>ConstrainedControl</code>, <code>AdaptiveControl</code></p> <p>A material design card: a panel with slightly rounded corners and an elevation shadow.</p> <p>Example: <pre><code>import flet as ft\n\ndef main(page):\n    page.title = \"Card Example\"\n    page.add(\n        ft.Card(\n            content=ft.Container(\n                content=ft.Column(\n                    [\n                        ft.ListTile(\n                            leading=ft.Icon(ft.icons.ALBUM),\n                            title=ft.Text(\"The Enchanted Nightingale\"),\n                            subtitle=ft.Text(\n                                \"Music by Julie Gable. Lyrics by Sidney Stein.\"\n                            ),\n                        ),\n                        ft.Row(\n                            [ft.TextButton(\"Buy tickets\"), ft.TextButton(\"Listen\")],\n                            alignment=ft.MainAxisAlignment.END,\n                        ),\n                    ]\n                ),\n                width=400,\n                padding=10,\n            )\n        )\n    )\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/card</p>"
    },
    {
      "location": "controls/card/#flet_core.card.Card.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/card/#flet_core.card.Card.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/card/#flet_core.card.Card.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/card/#flet_core.card.Card.clip_behavior",
      "title": "<code>clip_behavior: Optional[ClipBehavior]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The content will be clipped (or not) according to this option.</p> <p>Value is of type <code>ClipBehavior</code> and defaults to <code>ClipBehavior.NONE</code>.</p>"
    },
    {
      "location": "controls/card/#flet_core.card.Card.color",
      "title": "<code>color: Optional[str]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The card's background color.</p> <p>This is the color used to fill the card's background. Defaults to <code>None</code>.</p>"
    },
    {
      "location": "controls/card/#flet_core.card.Card.content",
      "title": "<code>content: Optional[Control]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The Control that should be displayed inside the card.</p> <p>This control can only have one child. To lay out multiple children, let this control's child be a control such as <code>Row</code>, <code>Column</code>, or <code>Stack</code>, which have a children property, and then provide the children to that control.</p>"
    },
    {
      "location": "controls/card/#flet_core.card.Card.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/card/#flet_core.card.Card.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/card/#flet_core.card.Card.elevation",
      "title": "<code>elevation: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Controls the size of the shadow below the card.</p> <p>Defaults to <code>1.0</code>. The value must be <code>None</code> or a non-negative number.</p>"
    },
    {
      "location": "controls/card/#flet_core.card.Card.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/card/#flet_core.card.Card.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/card/#flet_core.card.Card.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/card/#flet_core.card.Card.is_semantic_container",
      "title": "<code>is_semantic_container: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Set to <code>True</code> (default) if this card represents a single semantic container, or <code>False</code> if it represents a collection of individual semantic nodes (different types of content).</p>"
    },
    {
      "location": "controls/card/#flet_core.card.Card.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/card/#flet_core.card.Card.margin",
      "title": "<code>margin: MarginValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The empty space that surrounds the card.</p> <p>Value can be one of the following types: <code>int</code>, <code>float</code>, or <code>Margin</code>.</p>"
    },
    {
      "location": "controls/card/#flet_core.card.Card.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/card/#flet_core.card.Card.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/card/#flet_core.card.Card.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/card/#flet_core.card.Card.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/card/#flet_core.card.Card.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/card/#flet_core.card.Card.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/card/#flet_core.card.Card.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/card/#flet_core.card.Card.shadow_color",
      "title": "<code>shadow_color: Optional[str]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The color of the shadow below the card.</p> <p>This color will be used to paint the shadow effect. Defaults to <code>None</code>.</p>"
    },
    {
      "location": "controls/card/#flet_core.card.Card.shape",
      "title": "<code>shape: Optional[OutlinedBorder]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The shape of the card.</p> <p>Value is of type <code>OutlinedBorder</code> and defaults to <code>RoundedRectangleBorder(radius=4.0)</code>.</p>"
    },
    {
      "location": "controls/card/#flet_core.card.Card.show_border_on_foreground",
      "title": "<code>show_border_on_foreground: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the shape of the border should be painted in front of the content or behind.</p> <p>Defaults to <code>True</code>.</p>"
    },
    {
      "location": "controls/card/#flet_core.card.Card.surface_tint_color",
      "title": "<code>surface_tint_color: Optional[str]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The color used as an overlay on <code>color</code> to indicate elevation.</p> <p>If this is <code>None</code>, no overlay will be applied. Otherwise, this color will be composited on top of <code>color</code> with an opacity related to <code>elevation</code> and used to paint the card's background. Defaults to <code>None</code>.</p>"
    },
    {
      "location": "controls/card/#flet_core.card.Card.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/card/#flet_core.card.Card.variant",
      "title": "<code>variant: Optional[CardVariant]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Defines the card variant to be used.</p> <p>Value is of type <code>CardVariant</code> and defaults to <code>CardVariant.ELEVATED</code>.</p>"
    },
    {
      "location": "controls/card/#flet_core.card.Card.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/card/#flet_core.card.Card.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/card/#flet_core.card.Card.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/checkbox/",
      "title": "Checkbox",
      "text": "<p>               Bases: <code>ConstrainedControl</code>, <code>AdaptiveControl</code></p> <p>Checkbox allows to select one or more items from a group, or switch between two mutually exclusive options (checked or unchecked, on or off).</p> <p>Example: <pre><code>import flet as ft\n\ndef main(page):\n    def button_clicked(e):\n        t.value = (\n            f\"Checkboxes values are:  {c1.value}, {c2.value}, {c3.value}, {c4.value}, {c5.value}.\"\n        )\n        page.update()\n\n    t = ft.Text()\n    c1 = ft.Checkbox(label=\"Unchecked by default checkbox\", value=False)\n    c2 = ft.Checkbox(label=\"Undefined by default tristate checkbox\", tristate=True)\n    c3 = ft.Checkbox(label=\"Checked by default checkbox\", value=True)\n    c4 = ft.Checkbox(label=\"Disabled checkbox\", disabled=True)\n    c5 = ft.Checkbox(\n        label=\"Checkbox with rendered label_position='left'\", label_position=ft.LabelPosition.LEFT\n    )\n    b = ft.ElevatedButton(text=\"Submit\", on_click=button_clicked)\n    page.add(c1, c2, c3, c4, c5, b, t)\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/checkbox</p>"
    },
    {
      "location": "controls/checkbox/#flet_core.checkbox.Checkbox.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/checkbox/#flet_core.checkbox.Checkbox.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/checkbox/#flet_core.checkbox.Checkbox.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/checkbox/#flet_core.checkbox.Checkbox.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/checkbox/#flet_core.checkbox.Checkbox.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/checkbox/#flet_core.checkbox.Checkbox.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/checkbox/#flet_core.checkbox.Checkbox.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/checkbox/#flet_core.checkbox.Checkbox.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/checkbox/#flet_core.checkbox.Checkbox.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/checkbox/#flet_core.checkbox.Checkbox.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/checkbox/#flet_core.checkbox.Checkbox.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/checkbox/#flet_core.checkbox.Checkbox.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/checkbox/#flet_core.checkbox.Checkbox.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/checkbox/#flet_core.checkbox.Checkbox.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/checkbox/#flet_core.checkbox.Checkbox.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/checkbox/#flet_core.checkbox.Checkbox.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/checkbox/#flet_core.checkbox.Checkbox.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/checkbox/#flet_core.checkbox.Checkbox.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/checkbox/#flet_core.checkbox.Checkbox.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/checkbox/#flet_core.checkbox.Checkbox.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/chip/",
      "title": "Chip",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>Chips are compact elements that represent an attribute, text, entity, or action.</p> <p>Example: <pre><code>import flet as ft\n\n\ndef main(page: ft.Page):\n    def save_to_favorites_clicked(e):\n        e.control.label.value = \"Saved to favorites\"\n        e.control.leading = ft.Icon(ft.icons.FAVORITE_OUTLINED)\n        e.control.disabled = True\n        page.update()\n\n    def open_google_maps(e):\n        page.launch_url(\"https://maps.google.com\")\n        page.update()\n\n    save_to_favourites = ft.Chip(\n        label=ft.Text(\"Save to favourites\"),\n        leading=ft.Icon(ft.icons.FAVORITE_BORDER_OUTLINED),\n        bgcolor=ft.colors.GREEN_200,\n        disabled_color=ft.colors.GREEN_100,\n        autofocus=True,\n        on_click=save_to_favorites_clicked,\n    )\n\n    open_in_maps = ft.Chip(\n        label=ft.Text(\"9 min walk\"),\n        leading=ft.Icon(ft.icons.MAP_SHARP),\n        bgcolor=ft.colors.GREEN_200,\n        on_click=open_google_maps,\n    )\n\n    page.add(ft.Row([save_to_favourites, open_in_maps]))\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/chip</p>"
    },
    {
      "location": "controls/chip/#flet_core.chip.Chip.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/chip/#flet_core.chip.Chip.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/chip/#flet_core.chip.Chip.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/chip/#flet_core.chip.Chip.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/chip/#flet_core.chip.Chip.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/chip/#flet_core.chip.Chip.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/chip/#flet_core.chip.Chip.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/chip/#flet_core.chip.Chip.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/chip/#flet_core.chip.Chip.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/chip/#flet_core.chip.Chip.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/chip/#flet_core.chip.Chip.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/chip/#flet_core.chip.Chip.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/chip/#flet_core.chip.Chip.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/chip/#flet_core.chip.Chip.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/chip/#flet_core.chip.Chip.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/chip/#flet_core.chip.Chip.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/chip/#flet_core.chip.Chip.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/chip/#flet_core.chip.Chip.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/chip/#flet_core.chip.Chip.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/circle_avatar/",
      "title": "CircleAvatar",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>A circle that represents a user.</p> <p>If <code>foreground_image_src</code> fails then <code>background_image_src</code> is used. If <code>background_image_src</code> fails too, then <code>bgcolor</code> is used.</p> <p>Example: <pre><code>import flet as ft\n\ndef main(page):\n    # a \"normal\" avatar with background image\n    a1 = ft.CircleAvatar(\n        foreground_image_src=\"https://avatars.githubusercontent.com/u/5041459?s=88&amp;v=4\",\n        content=ft.Text(\"FF\"),\n    )\n    # avatar with failing foreground image and fallback text\n    a2 = ft.CircleAvatar(\n        foreground_image_src=\"https://avatars.githubusercontent.com/u/_5041459?s=88&amp;v=4\",\n        content=ft.Text(\"FF\"),\n    )\n    # avatar with icon, aka icon with inverse background\n    a3 = ft.CircleAvatar(\n        content=ft.Icon(ft.icons.ABC),\n    )\n    # avatar with icon and custom colors\n    a4 = ft.CircleAvatar(\n        content=ft.Icon(ft.icons.WARNING_ROUNDED),\n        color=ft.colors.YELLOW_200,\n        bgcolor=ft.colors.AMBER_700,\n    )\n    # avatar with online status\n    a5 = ft.Stack(\n        [\n            ft.CircleAvatar(\n                foreground_image_src=\"https://avatars.githubusercontent.com/u/5041459?s=88&amp;v=4\"\n            ),\n            ft.Container(\n                content=ft.CircleAvatar(bgcolor=ft.colors.GREEN, radius=5),\n                alignment=ft.alignment.bottom_left,\n            ),\n        ],\n        width=40,\n        height=40,\n    )\n    page.add(a1, a2, a3, a4, a5)\n\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/circleavatar</p>"
    },
    {
      "location": "controls/circle_avatar/#flet_core.circle_avatar.CircleAvatar.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/circle_avatar/#flet_core.circle_avatar.CircleAvatar.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/circle_avatar/#flet_core.circle_avatar.CircleAvatar.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/circle_avatar/#flet_core.circle_avatar.CircleAvatar.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/circle_avatar/#flet_core.circle_avatar.CircleAvatar.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/circle_avatar/#flet_core.circle_avatar.CircleAvatar.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/circle_avatar/#flet_core.circle_avatar.CircleAvatar.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/circle_avatar/#flet_core.circle_avatar.CircleAvatar.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/circle_avatar/#flet_core.circle_avatar.CircleAvatar.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/circle_avatar/#flet_core.circle_avatar.CircleAvatar.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/circle_avatar/#flet_core.circle_avatar.CircleAvatar.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/circle_avatar/#flet_core.circle_avatar.CircleAvatar.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/circle_avatar/#flet_core.circle_avatar.CircleAvatar.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/circle_avatar/#flet_core.circle_avatar.CircleAvatar.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/circle_avatar/#flet_core.circle_avatar.CircleAvatar.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/circle_avatar/#flet_core.circle_avatar.CircleAvatar.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/circle_avatar/#flet_core.circle_avatar.CircleAvatar.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/circle_avatar/#flet_core.circle_avatar.CircleAvatar.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/circle_avatar/#flet_core.circle_avatar.CircleAvatar.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/client_storage/",
      "title": "Client storage",
      "text": ""
    },
    {
      "location": "controls/column/",
      "title": "Column",
      "text": "<p>               Bases: <code>ConstrainedControl</code>, <code>ScrollableControl</code>, <code>AdaptiveControl</code></p> <p>Container allows to decorate a control with background color and border and position it with padding, margin and alignment.</p> <p>Example:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Column example\"\n\n    page.add(\n        ft.Column(\n            expand=True,\n            controls=[\n                ft.Container(\n                    expand=1,\n                    content=ft.Text(\"Container 1\"),\n                    bgcolor=ft.colors.GREEN_100,\n                ),\n                ft.Container(\n                    expand=2, content=ft.Text(\"Container 2\"), bgcolor=ft.colors.RED_100\n                ),\n            ],\n        ),\n    ),\n\nft.app(target=main)\n</code></pre> <p>Online docs: https://flet.dev/docs/controls/column</p>"
    },
    {
      "location": "controls/column/#flet_core.column.Column.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/column/#flet_core.column.Column.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/column/#flet_core.column.Column.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/column/#flet_core.column.Column.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/column/#flet_core.column.Column.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/column/#flet_core.column.Column.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/column/#flet_core.column.Column.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/column/#flet_core.column.Column.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/column/#flet_core.column.Column.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/column/#flet_core.column.Column.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/column/#flet_core.column.Column.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/column/#flet_core.column.Column.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/column/#flet_core.column.Column.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/column/#flet_core.column.Column.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/column/#flet_core.column.Column.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/column/#flet_core.column.Column.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/column/#flet_core.column.Column.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/column/#flet_core.column.Column.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/column/#flet_core.column.Column.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/column/#flet_core.column.Column.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/container/",
      "title": "Container",
      "text": "<p>               Bases: <code>ConstrainedControl</code>, <code>AdaptiveControl</code></p> <p>Container allows to decorate a control with background color and border and position it with padding, margin and alignment.</p> <p>Example:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Container\"\n\n    c1 = ft.Container(\n        content=ft.Text(\"Container with background\"),\n        bgcolor=ft.colors.AMBER_100,\n        padding=5,\n    )\n    page.add(c1)\n\nft.app(target=main)\n</code></pre> <p>Online docs: https://flet.dev/docs/controls/container</p>"
    },
    {
      "location": "controls/container/#flet_core.container.Container.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/container/#flet_core.container.Container.alignment",
      "title": "<code>alignment: Optional[Alignment]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>:obj:<code>Alignment</code>, optional: Align the child control within the container.</p> <p>Alignment is an instance of <code>alignment.Alignment</code> class object with <code>x</code> and <code>y</code> properties representing the distance from the center of a rectangle.</p>"
    },
    {
      "location": "controls/container/#flet_core.container.Container.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/container/#flet_core.container.Container.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/container/#flet_core.container.Container.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/container/#flet_core.container.Container.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/container/#flet_core.container.Container.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/container/#flet_core.container.Container.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/container/#flet_core.container.Container.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/container/#flet_core.container.Container.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/container/#flet_core.container.Container.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/container/#flet_core.container.Container.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/container/#flet_core.container.Container.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/container/#flet_core.container.Container.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/container/#flet_core.container.Container.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/container/#flet_core.container.Container.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/container/#flet_core.container.Container.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/container/#flet_core.container.Container.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/container/#flet_core.container.Container.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/container/#flet_core.container.Container.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/container/#flet_core.container.Container.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/cupertino_action_sheet/",
      "title": "CupertinoActionSheet",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>An iOS-style action sheet.</p> <p>Online docs: https://flet.dev/docs/controls/cupertinoactionsheet</p>"
    },
    {
      "location": "controls/cupertino_action_sheet/#flet_core.cupertino_action_sheet.CupertinoActionSheet.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/cupertino_action_sheet/#flet_core.cupertino_action_sheet.CupertinoActionSheet.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_action_sheet/#flet_core.cupertino_action_sheet.CupertinoActionSheet.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/cupertino_action_sheet/#flet_core.cupertino_action_sheet.CupertinoActionSheet.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_action_sheet/#flet_core.cupertino_action_sheet.CupertinoActionSheet.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/cupertino_action_sheet/#flet_core.cupertino_action_sheet.CupertinoActionSheet.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/cupertino_action_sheet/#flet_core.cupertino_action_sheet.CupertinoActionSheet.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/cupertino_action_sheet/#flet_core.cupertino_action_sheet.CupertinoActionSheet.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_action_sheet/#flet_core.cupertino_action_sheet.CupertinoActionSheet.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_action_sheet/#flet_core.cupertino_action_sheet.CupertinoActionSheet.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/cupertino_action_sheet/#flet_core.cupertino_action_sheet.CupertinoActionSheet.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/cupertino_action_sheet/#flet_core.cupertino_action_sheet.CupertinoActionSheet.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_action_sheet/#flet_core.cupertino_action_sheet.CupertinoActionSheet.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_action_sheet/#flet_core.cupertino_action_sheet.CupertinoActionSheet.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/cupertino_action_sheet/#flet_core.cupertino_action_sheet.CupertinoActionSheet.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_action_sheet/#flet_core.cupertino_action_sheet.CupertinoActionSheet.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/cupertino_action_sheet/#flet_core.cupertino_action_sheet.CupertinoActionSheet.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/cupertino_action_sheet/#flet_core.cupertino_action_sheet.CupertinoActionSheet.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/cupertino_action_sheet/#flet_core.cupertino_action_sheet.CupertinoActionSheet.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/cupertino_action_sheet_action/",
      "title": "CupertinoActionSheetAction",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>An action button typically used in a CupertinoActionSheet.</p> <p>Online docs: https://flet.dev/docs/controls/cupertinoactionsheetaction</p>"
    },
    {
      "location": "controls/cupertino_action_sheet_action/#flet_core.cupertino_action_sheet_action.CupertinoActionSheetAction.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/cupertino_action_sheet_action/#flet_core.cupertino_action_sheet_action.CupertinoActionSheetAction.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_action_sheet_action/#flet_core.cupertino_action_sheet_action.CupertinoActionSheetAction.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/cupertino_action_sheet_action/#flet_core.cupertino_action_sheet_action.CupertinoActionSheetAction.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_action_sheet_action/#flet_core.cupertino_action_sheet_action.CupertinoActionSheetAction.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/cupertino_action_sheet_action/#flet_core.cupertino_action_sheet_action.CupertinoActionSheetAction.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/cupertino_action_sheet_action/#flet_core.cupertino_action_sheet_action.CupertinoActionSheetAction.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/cupertino_action_sheet_action/#flet_core.cupertino_action_sheet_action.CupertinoActionSheetAction.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_action_sheet_action/#flet_core.cupertino_action_sheet_action.CupertinoActionSheetAction.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_action_sheet_action/#flet_core.cupertino_action_sheet_action.CupertinoActionSheetAction.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/cupertino_action_sheet_action/#flet_core.cupertino_action_sheet_action.CupertinoActionSheetAction.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/cupertino_action_sheet_action/#flet_core.cupertino_action_sheet_action.CupertinoActionSheetAction.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_action_sheet_action/#flet_core.cupertino_action_sheet_action.CupertinoActionSheetAction.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_action_sheet_action/#flet_core.cupertino_action_sheet_action.CupertinoActionSheetAction.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/cupertino_action_sheet_action/#flet_core.cupertino_action_sheet_action.CupertinoActionSheetAction.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_action_sheet_action/#flet_core.cupertino_action_sheet_action.CupertinoActionSheetAction.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/cupertino_action_sheet_action/#flet_core.cupertino_action_sheet_action.CupertinoActionSheetAction.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/cupertino_action_sheet_action/#flet_core.cupertino_action_sheet_action.CupertinoActionSheetAction.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/cupertino_action_sheet_action/#flet_core.cupertino_action_sheet_action.CupertinoActionSheetAction.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/cupertino_activity_indicator/",
      "title": "CupertinoActivityIndicator",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>An iOS-style activity indicator that spins clockwise.</p> <p>Online docs: https://flet.dev/docs/controls/cupertinoactivityindicator</p>"
    },
    {
      "location": "controls/cupertino_activity_indicator/#flet_core.cupertino_activity_indicator.CupertinoActivityIndicator.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/cupertino_activity_indicator/#flet_core.cupertino_activity_indicator.CupertinoActivityIndicator.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_activity_indicator/#flet_core.cupertino_activity_indicator.CupertinoActivityIndicator.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/cupertino_activity_indicator/#flet_core.cupertino_activity_indicator.CupertinoActivityIndicator.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_activity_indicator/#flet_core.cupertino_activity_indicator.CupertinoActivityIndicator.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/cupertino_activity_indicator/#flet_core.cupertino_activity_indicator.CupertinoActivityIndicator.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/cupertino_activity_indicator/#flet_core.cupertino_activity_indicator.CupertinoActivityIndicator.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/cupertino_activity_indicator/#flet_core.cupertino_activity_indicator.CupertinoActivityIndicator.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_activity_indicator/#flet_core.cupertino_activity_indicator.CupertinoActivityIndicator.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_activity_indicator/#flet_core.cupertino_activity_indicator.CupertinoActivityIndicator.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/cupertino_activity_indicator/#flet_core.cupertino_activity_indicator.CupertinoActivityIndicator.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/cupertino_activity_indicator/#flet_core.cupertino_activity_indicator.CupertinoActivityIndicator.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_activity_indicator/#flet_core.cupertino_activity_indicator.CupertinoActivityIndicator.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_activity_indicator/#flet_core.cupertino_activity_indicator.CupertinoActivityIndicator.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/cupertino_activity_indicator/#flet_core.cupertino_activity_indicator.CupertinoActivityIndicator.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_activity_indicator/#flet_core.cupertino_activity_indicator.CupertinoActivityIndicator.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/cupertino_activity_indicator/#flet_core.cupertino_activity_indicator.CupertinoActivityIndicator.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/cupertino_activity_indicator/#flet_core.cupertino_activity_indicator.CupertinoActivityIndicator.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/cupertino_activity_indicator/#flet_core.cupertino_activity_indicator.CupertinoActivityIndicator.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/cupertino_alert_dialog/",
      "title": "CupertinoAlertDialog",
      "text": "<p>               Bases: <code>Control</code></p> <p>An iOS-style alert dialog. An alert dialog informs the user about situations that require acknowledgement. An alert dialog has an optional title and an optional list of actions. The title is displayed above the content and the actions are displayed below the content.</p> <p>Example: <pre><code>import flet as ft\n\n\ndef main(page: ft.Page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n    page.scroll = True\n\n    def handle_action_click(e):\n        page.add(ft.Text(f\"Action clicked: {e.control.text}\"))\n        # e.control is the clicked action button, e.control.parent is the corresponding parent dialog of the button\n        page.close(e.control.parent)\n\n    cupertino_actions = [\n        ft.CupertinoDialogAction(\n            \"Yes\",\n            is_destructive_action=True,\n            on_click=handle_action_click,\n        ),\n        ft.CupertinoDialogAction(\n            text=\"No\",\n            is_default_action=False,\n            on_click=handle_action_click,\n        ),\n    ]\n\n    material_actions = [\n        ft.TextButton(text=\"Yes\", on_click=handle_action_click),\n        ft.TextButton(text=\"No\", on_click=handle_action_click),\n    ]\n\n    page.add(\n        ft.FilledButton(\n            text=\"Open Material Dialog\",\n            on_click=lambda e: page.open(\n                ft.AlertDialog(\n                    title=ft.Text(\"Material Alert Dialog\"),\n                    content=ft.Text(\"Do you want to delete this file?\"),\n                    actions=material_actions,\n                )\n            ),\n        ),\n        ft.CupertinoFilledButton(\n            text=\"Open Cupertino Dialog\",\n            on_click=lambda e: page.open(\n                ft.CupertinoAlertDialog(\n                    title=ft.Text(\"Cupertino Alert Dialog\"),\n                    content=ft.Text(\"Do you want to delete this file?\"),\n                    actions=cupertino_actions,\n                )\n            ),\n        ),\n        ft.FilledButton(\n            text=\"Open Adaptive Dialog\",\n            adaptive=True,\n            on_click=lambda e: page.open(\n                ft.AlertDialog(\n                    adaptive=True,\n                    title=ft.Text(\"Adaptive Alert Dialog\"),\n                    content=ft.Text(\"Do you want to delete this file?\"),\n                    actions=cupertino_actions if page.platform in [ft.PagePlatform.IOS, ft.PagePlatform.MACOS] else material_actions,\n                )\n            ),\n        ),\n    )\n\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/cupertinoalertdialog</p>"
    },
    {
      "location": "controls/cupertino_alert_dialog/#flet_core.cupertino_alert_dialog.CupertinoAlertDialog.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/cupertino_alert_dialog/#flet_core.cupertino_alert_dialog.CupertinoAlertDialog.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_alert_dialog/#flet_core.cupertino_alert_dialog.CupertinoAlertDialog.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/cupertino_alert_dialog/#flet_core.cupertino_alert_dialog.CupertinoAlertDialog.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/cupertino_alert_dialog/#flet_core.cupertino_alert_dialog.CupertinoAlertDialog.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/cupertino_alert_dialog/#flet_core.cupertino_alert_dialog.CupertinoAlertDialog.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/cupertino_alert_dialog/#flet_core.cupertino_alert_dialog.CupertinoAlertDialog.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/cupertino_alert_dialog/#flet_core.cupertino_alert_dialog.CupertinoAlertDialog.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/cupertino_alert_dialog/#flet_core.cupertino_alert_dialog.CupertinoAlertDialog.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/cupertino_alert_dialog/#flet_core.cupertino_alert_dialog.CupertinoAlertDialog.before_update",
      "title": "<code>before_update()</code>",
      "text": "<p>Mainly used when creating custom controls.</p> <p>It is called before this control is updated.</p> <p>Make sure not to call <code>update()</code> method within <code>before_update()</code>.</p>"
    },
    {
      "location": "controls/cupertino_alert_dialog/#flet_core.cupertino_alert_dialog.CupertinoAlertDialog.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/cupertino_app_bar/",
      "title": "Container",
      "text": "<p>               Bases: <code>Control</code></p> <p>An iOS-styled application bar.</p> <p>Example: <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.theme_mode = ft.ThemeMode.LIGHT\n\n    page.appbar = ft.CupertinoAppBar(\n        leading=ft.Icon(ft.icons.PALETTE),\n        bgcolor=ft.colors.SURFACE_VARIANT,\n        trailing=ft.Icon(ft.icons.WB_SUNNY_OUTLINED),\n        middle=ft.Text(\"AppBar Example\"),\n    )\n    page.add(ft.Text(\"Body!\"))\n\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/cupertinoappbar</p>"
    },
    {
      "location": "controls/cupertino_app_bar/#flet_core.cupertino_app_bar.CupertinoAppBar.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/cupertino_app_bar/#flet_core.cupertino_app_bar.CupertinoAppBar.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_app_bar/#flet_core.cupertino_app_bar.CupertinoAppBar.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/cupertino_app_bar/#flet_core.cupertino_app_bar.CupertinoAppBar.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/cupertino_app_bar/#flet_core.cupertino_app_bar.CupertinoAppBar.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/cupertino_app_bar/#flet_core.cupertino_app_bar.CupertinoAppBar.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/cupertino_app_bar/#flet_core.cupertino_app_bar.CupertinoAppBar.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/cupertino_app_bar/#flet_core.cupertino_app_bar.CupertinoAppBar.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/cupertino_app_bar/#flet_core.cupertino_app_bar.CupertinoAppBar.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/cupertino_app_bar/#flet_core.cupertino_app_bar.CupertinoAppBar.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/cupertino_bottom_sheet/",
      "title": "CupertinoBottomSheet",
      "text": "<p>               Bases: <code>Control</code></p> <p>A Cupertino version of modal bottom sheet.</p> <p>Online docs: https://flet.dev/docs/controls/cupertinobottomsheet</p>"
    },
    {
      "location": "controls/cupertino_bottom_sheet/#flet_core.cupertino_bottom_sheet.CupertinoBottomSheet.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/cupertino_bottom_sheet/#flet_core.cupertino_bottom_sheet.CupertinoBottomSheet.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_bottom_sheet/#flet_core.cupertino_bottom_sheet.CupertinoBottomSheet.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/cupertino_bottom_sheet/#flet_core.cupertino_bottom_sheet.CupertinoBottomSheet.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/cupertino_bottom_sheet/#flet_core.cupertino_bottom_sheet.CupertinoBottomSheet.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/cupertino_bottom_sheet/#flet_core.cupertino_bottom_sheet.CupertinoBottomSheet.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/cupertino_bottom_sheet/#flet_core.cupertino_bottom_sheet.CupertinoBottomSheet.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/cupertino_bottom_sheet/#flet_core.cupertino_bottom_sheet.CupertinoBottomSheet.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/cupertino_bottom_sheet/#flet_core.cupertino_bottom_sheet.CupertinoBottomSheet.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/cupertino_bottom_sheet/#flet_core.cupertino_bottom_sheet.CupertinoBottomSheet.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/cupertino_button/",
      "title": "CupertinoButton",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>An iOS-style button.</p> <p>Online docs: https://flet.dev/docs/controls/cupertinobutton</p>"
    },
    {
      "location": "controls/cupertino_button/#flet_core.cupertino_button.CupertinoButton.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/cupertino_button/#flet_core.cupertino_button.CupertinoButton.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_button/#flet_core.cupertino_button.CupertinoButton.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/cupertino_button/#flet_core.cupertino_button.CupertinoButton.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_button/#flet_core.cupertino_button.CupertinoButton.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/cupertino_button/#flet_core.cupertino_button.CupertinoButton.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/cupertino_button/#flet_core.cupertino_button.CupertinoButton.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/cupertino_button/#flet_core.cupertino_button.CupertinoButton.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_button/#flet_core.cupertino_button.CupertinoButton.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_button/#flet_core.cupertino_button.CupertinoButton.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/cupertino_button/#flet_core.cupertino_button.CupertinoButton.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/cupertino_button/#flet_core.cupertino_button.CupertinoButton.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_button/#flet_core.cupertino_button.CupertinoButton.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_button/#flet_core.cupertino_button.CupertinoButton.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/cupertino_button/#flet_core.cupertino_button.CupertinoButton.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_button/#flet_core.cupertino_button.CupertinoButton.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/cupertino_button/#flet_core.cupertino_button.CupertinoButton.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/cupertino_button/#flet_core.cupertino_button.CupertinoButton.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/cupertino_button/#flet_core.cupertino_button.CupertinoButton.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/cupertino_checkbox/",
      "title": "CupertinoCheckbox",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>A macOS style checkbox. Checkbox allows to select one or more items from a group, or switch between two mutually exclusive options (checked or unchecked, on or off).</p> <p>Example: <pre><code>import flet as ft\n\ndef main(page):\n    c = ft.CupertinoCheckbox(\n        label=\"Cupertino Checkbox\",\n        active_color=ft.colors.GREEN,\n        inactive_color=ft.colors.RED,\n        check_color=ft.colors.BLUE,\n    ),\n    page.add(c)\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/cupertinocheckbox</p>"
    },
    {
      "location": "controls/cupertino_checkbox/#flet_core.cupertino_checkbox.CupertinoCheckbox.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/cupertino_checkbox/#flet_core.cupertino_checkbox.CupertinoCheckbox.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_checkbox/#flet_core.cupertino_checkbox.CupertinoCheckbox.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/cupertino_checkbox/#flet_core.cupertino_checkbox.CupertinoCheckbox.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_checkbox/#flet_core.cupertino_checkbox.CupertinoCheckbox.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/cupertino_checkbox/#flet_core.cupertino_checkbox.CupertinoCheckbox.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/cupertino_checkbox/#flet_core.cupertino_checkbox.CupertinoCheckbox.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/cupertino_checkbox/#flet_core.cupertino_checkbox.CupertinoCheckbox.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_checkbox/#flet_core.cupertino_checkbox.CupertinoCheckbox.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_checkbox/#flet_core.cupertino_checkbox.CupertinoCheckbox.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/cupertino_checkbox/#flet_core.cupertino_checkbox.CupertinoCheckbox.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/cupertino_checkbox/#flet_core.cupertino_checkbox.CupertinoCheckbox.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_checkbox/#flet_core.cupertino_checkbox.CupertinoCheckbox.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_checkbox/#flet_core.cupertino_checkbox.CupertinoCheckbox.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/cupertino_checkbox/#flet_core.cupertino_checkbox.CupertinoCheckbox.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_checkbox/#flet_core.cupertino_checkbox.CupertinoCheckbox.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/cupertino_checkbox/#flet_core.cupertino_checkbox.CupertinoCheckbox.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/cupertino_checkbox/#flet_core.cupertino_checkbox.CupertinoCheckbox.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/cupertino_checkbox/#flet_core.cupertino_checkbox.CupertinoCheckbox.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/cupertino_context_menu/",
      "title": "CupertinoContextMenu",
      "text": "<p>               Bases: <code>AdaptiveControl</code></p> <p>A full-screen modal route that opens up when the content is long-pressed.</p> <p>Online docs: https://flet.dev/docs/controls/cupertinocontextmenu</p>"
    },
    {
      "location": "controls/cupertino_context_menu/#flet_core.cupertino_context_menu.CupertinoContextMenu.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/cupertino_context_menu/#flet_core.cupertino_context_menu.CupertinoContextMenu.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/cupertino_context_menu/#flet_core.cupertino_context_menu.CupertinoContextMenu.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_context_menu/#flet_core.cupertino_context_menu.CupertinoContextMenu.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/cupertino_context_menu/#flet_core.cupertino_context_menu.CupertinoContextMenu.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/cupertino_context_menu/#flet_core.cupertino_context_menu.CupertinoContextMenu.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/cupertino_context_menu/#flet_core.cupertino_context_menu.CupertinoContextMenu.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/cupertino_context_menu/#flet_core.cupertino_context_menu.CupertinoContextMenu.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/cupertino_context_menu/#flet_core.cupertino_context_menu.CupertinoContextMenu.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/cupertino_context_menu/#flet_core.cupertino_context_menu.CupertinoContextMenu.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/cupertino_context_menu/#flet_core.cupertino_context_menu.CupertinoContextMenu.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/cupertino_context_menu_action/",
      "title": "CupertinoContextMenuAction",
      "text": "<p>               Bases: <code>AdaptiveControl</code></p> <p>An action that can be added to a CupertinoContextMenu.</p> <p>Online docs: https://flet.dev/docs/controls/cupertinocontextmenuaction</p>"
    },
    {
      "location": "controls/cupertino_context_menu_action/#flet_core.cupertino_context_menu_action.CupertinoContextMenuAction.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/cupertino_context_menu_action/#flet_core.cupertino_context_menu_action.CupertinoContextMenuAction.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/cupertino_context_menu_action/#flet_core.cupertino_context_menu_action.CupertinoContextMenuAction.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_context_menu_action/#flet_core.cupertino_context_menu_action.CupertinoContextMenuAction.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/cupertino_context_menu_action/#flet_core.cupertino_context_menu_action.CupertinoContextMenuAction.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/cupertino_context_menu_action/#flet_core.cupertino_context_menu_action.CupertinoContextMenuAction.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/cupertino_context_menu_action/#flet_core.cupertino_context_menu_action.CupertinoContextMenuAction.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/cupertino_context_menu_action/#flet_core.cupertino_context_menu_action.CupertinoContextMenuAction.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/cupertino_context_menu_action/#flet_core.cupertino_context_menu_action.CupertinoContextMenuAction.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/cupertino_context_menu_action/#flet_core.cupertino_context_menu_action.CupertinoContextMenuAction.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/cupertino_context_menu_action/#flet_core.cupertino_context_menu_action.CupertinoContextMenuAction.before_update",
      "title": "<code>before_update()</code>",
      "text": "<p>Mainly used when creating custom controls.</p> <p>It is called before this control is updated.</p> <p>Make sure not to call <code>update()</code> method within <code>before_update()</code>.</p>"
    },
    {
      "location": "controls/cupertino_context_menu_action/#flet_core.cupertino_context_menu_action.CupertinoContextMenuAction.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/cupertino_date_picker/",
      "title": "CupertinoDatePicker",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>An iOS-styled date picker.</p> <p>Online docs: https://flet.dev/docs/controls/cupertinodatepicker</p>"
    },
    {
      "location": "controls/cupertino_date_picker/#flet_core.cupertino_date_picker.CupertinoDatePicker.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/cupertino_date_picker/#flet_core.cupertino_date_picker.CupertinoDatePicker.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_date_picker/#flet_core.cupertino_date_picker.CupertinoDatePicker.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/cupertino_date_picker/#flet_core.cupertino_date_picker.CupertinoDatePicker.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_date_picker/#flet_core.cupertino_date_picker.CupertinoDatePicker.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/cupertino_date_picker/#flet_core.cupertino_date_picker.CupertinoDatePicker.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/cupertino_date_picker/#flet_core.cupertino_date_picker.CupertinoDatePicker.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/cupertino_date_picker/#flet_core.cupertino_date_picker.CupertinoDatePicker.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_date_picker/#flet_core.cupertino_date_picker.CupertinoDatePicker.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_date_picker/#flet_core.cupertino_date_picker.CupertinoDatePicker.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/cupertino_date_picker/#flet_core.cupertino_date_picker.CupertinoDatePicker.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/cupertino_date_picker/#flet_core.cupertino_date_picker.CupertinoDatePicker.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_date_picker/#flet_core.cupertino_date_picker.CupertinoDatePicker.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_date_picker/#flet_core.cupertino_date_picker.CupertinoDatePicker.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/cupertino_date_picker/#flet_core.cupertino_date_picker.CupertinoDatePicker.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_date_picker/#flet_core.cupertino_date_picker.CupertinoDatePicker.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/cupertino_date_picker/#flet_core.cupertino_date_picker.CupertinoDatePicker.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/cupertino_date_picker/#flet_core.cupertino_date_picker.CupertinoDatePicker.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/cupertino_date_picker/#flet_core.cupertino_date_picker.CupertinoDatePicker.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/cupertino_dialog_action/",
      "title": "CupertinoDialogAction",
      "text": "<p>               Bases: <code>Control</code></p> <p>A button typically used in a CupertinoAlertDialog.</p> <p>Example: <pre><code>import flet as ft\n\n\ndef main(page: ft.Page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n\n    def dialog_dismissed(e):\n        page.add(ft.Text(\"Dialog dismissed\"))\n\n    def handle_action_click(e):\n        page.add(ft.Text(f\"Action clicked: {e.control.text}\"))\n        page.close(cupertino_alert_dialog)\n\n    cupertino_alert_dialog = ft.CupertinoAlertDialog(\n        title=ft.Text(\"Cupertino Alert Dialog\"),\n        content=ft.Text(\"Do you want to delete this file?\"),\n        on_dismiss=dialog_dismissed,\n        actions=[\n            ft.CupertinoDialogAction(\n                text=\"Yes\",\n                is_destructive_action=True,\n                on_click=handle_action_click,\n            ),\n            ft.CupertinoDialogAction(\n                text=\"No\",\n                is_default_action=True,\n                on_click=handle_action_click\n            ),\n        ],\n    )\n\n    page.add(\n        ft.CupertinoFilledButton(\n            text=\"Open CupertinoAlertDialog\",\n            on_click=lambda e: page.open(cupertino_alert_dialog),\n        )\n    )\n\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/cupertinodialogaction</p>"
    },
    {
      "location": "controls/cupertino_dialog_action/#flet_core.cupertino_dialog_action.CupertinoDialogAction.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/cupertino_dialog_action/#flet_core.cupertino_dialog_action.CupertinoDialogAction.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_dialog_action/#flet_core.cupertino_dialog_action.CupertinoDialogAction.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/cupertino_dialog_action/#flet_core.cupertino_dialog_action.CupertinoDialogAction.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/cupertino_dialog_action/#flet_core.cupertino_dialog_action.CupertinoDialogAction.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/cupertino_dialog_action/#flet_core.cupertino_dialog_action.CupertinoDialogAction.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/cupertino_dialog_action/#flet_core.cupertino_dialog_action.CupertinoDialogAction.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/cupertino_dialog_action/#flet_core.cupertino_dialog_action.CupertinoDialogAction.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/cupertino_dialog_action/#flet_core.cupertino_dialog_action.CupertinoDialogAction.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/cupertino_dialog_action/#flet_core.cupertino_dialog_action.CupertinoDialogAction.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/cupertino_filled_button/",
      "title": "CupertinoFilledButton",
      "text": "<p>               Bases: <code>CupertinoButton</code></p> <p>An iOS-style button filled with default background color.</p> <p>Example: <pre><code>import flet as ft\n\n\ndef main(page: ft.Page):\n    page.add(\n        ft.CupertinoFilledButton(text=\"OK\"),\n    )\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/cupertinofilledbutton</p>"
    },
    {
      "location": "controls/cupertino_filled_button/#flet_core.cupertino_filled_button.CupertinoFilledButton.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/cupertino_filled_button/#flet_core.cupertino_filled_button.CupertinoFilledButton.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_filled_button/#flet_core.cupertino_filled_button.CupertinoFilledButton.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/cupertino_filled_button/#flet_core.cupertino_filled_button.CupertinoFilledButton.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_filled_button/#flet_core.cupertino_filled_button.CupertinoFilledButton.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/cupertino_filled_button/#flet_core.cupertino_filled_button.CupertinoFilledButton.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/cupertino_filled_button/#flet_core.cupertino_filled_button.CupertinoFilledButton.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/cupertino_filled_button/#flet_core.cupertino_filled_button.CupertinoFilledButton.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_filled_button/#flet_core.cupertino_filled_button.CupertinoFilledButton.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_filled_button/#flet_core.cupertino_filled_button.CupertinoFilledButton.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/cupertino_filled_button/#flet_core.cupertino_filled_button.CupertinoFilledButton.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/cupertino_filled_button/#flet_core.cupertino_filled_button.CupertinoFilledButton.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_filled_button/#flet_core.cupertino_filled_button.CupertinoFilledButton.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_filled_button/#flet_core.cupertino_filled_button.CupertinoFilledButton.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/cupertino_filled_button/#flet_core.cupertino_filled_button.CupertinoFilledButton.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_filled_button/#flet_core.cupertino_filled_button.CupertinoFilledButton.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/cupertino_filled_button/#flet_core.cupertino_filled_button.CupertinoFilledButton.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/cupertino_filled_button/#flet_core.cupertino_filled_button.CupertinoFilledButton.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/cupertino_filled_button/#flet_core.cupertino_filled_button.CupertinoFilledButton.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/cupertino_list_tile/",
      "title": "CupertinoListTile",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>An iOS-style list tile. The CupertinoListTile is a Cupertino equivalent of Material ListTile.</p> <p>Example:</p> <pre><code>import flet as ft\n\n\ndef main(page: ft.Page):\n    def tile_clicked(e):\n        print(\"Tile Clicked!\")\n\n    page.add(\n        ft.CupertinoListTile(\n            notched=True,\n            additional_info=ft.Text(\"Wed Jan 25\"),\n            bgcolor_activated=ft.colors.AMBER_ACCENT,\n            leading=ft.Icon(name=ft.cupertino_icons.GAME_CONTROLLER),\n            title=ft.Text(\"CupertinoListTile not notched\"),\n            subtitle=ft.Text(\"Subtitle\"),\n            trailing=ft.Icon(name=ft.cupertino_icons.ALARM),\n            on_click=tile_clicked,\n        ),\n\n    )\n\nft.app(target=main)\n</code></pre> <p>Online docs: https://flet.dev/docs/controls/cupertinolisttile</p>"
    },
    {
      "location": "controls/cupertino_list_tile/#flet_core.cupertino_list_tile.CupertinoListTile.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/cupertino_list_tile/#flet_core.cupertino_list_tile.CupertinoListTile.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_list_tile/#flet_core.cupertino_list_tile.CupertinoListTile.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/cupertino_list_tile/#flet_core.cupertino_list_tile.CupertinoListTile.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_list_tile/#flet_core.cupertino_list_tile.CupertinoListTile.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/cupertino_list_tile/#flet_core.cupertino_list_tile.CupertinoListTile.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/cupertino_list_tile/#flet_core.cupertino_list_tile.CupertinoListTile.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/cupertino_list_tile/#flet_core.cupertino_list_tile.CupertinoListTile.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_list_tile/#flet_core.cupertino_list_tile.CupertinoListTile.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_list_tile/#flet_core.cupertino_list_tile.CupertinoListTile.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/cupertino_list_tile/#flet_core.cupertino_list_tile.CupertinoListTile.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/cupertino_list_tile/#flet_core.cupertino_list_tile.CupertinoListTile.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_list_tile/#flet_core.cupertino_list_tile.CupertinoListTile.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_list_tile/#flet_core.cupertino_list_tile.CupertinoListTile.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/cupertino_list_tile/#flet_core.cupertino_list_tile.CupertinoListTile.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_list_tile/#flet_core.cupertino_list_tile.CupertinoListTile.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/cupertino_list_tile/#flet_core.cupertino_list_tile.CupertinoListTile.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/cupertino_list_tile/#flet_core.cupertino_list_tile.CupertinoListTile.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/cupertino_list_tile/#flet_core.cupertino_list_tile.CupertinoListTile.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/cupertino_navigation_bar/",
      "title": "CupertinoNavigationBar",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>An iOS-styled bottom navigation tab bar.</p> <p>Navigation bars offer a persistent and convenient way to switch between primary destinations in an app.</p> <p>Example:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"CupertinoNavigationBar Example\"\n    page.navigation_bar = ft.CupertinoNavigationBar(\n        bgcolor=ft.colors.AMBER_100,\n        inactive_color=ft.colors.GREY,\n        active_color=ft.colors.BLACK,\n        on_change=lambda e: print(\"Selected tab:\", e.control.selected_index),\n        destinations=[\n            ft.NavigationBarDestination(icon=ft.icons.EXPLORE, label=\"Explore\"),\n            ft.NavigationBarDestination(icon=ft.icons.COMMUTE, label=\"Commute\"),\n            ft.NavigationBarDestination(\n                icon=ft.icons.BOOKMARK_BORDER,\n                selected_icon=ft.icons.BOOKMARK,\n                label=\"Explore\",\n            ),\n        ]\n    )\n    page.add(ft.SafeArea(ft.Text(\"Body!\")))\n\n\nft.app(target=main)\n</code></pre> <p>Online docs: https://flet.dev/docs/controls/cupertinonavigationbar</p>"
    },
    {
      "location": "controls/cupertino_navigation_bar/#flet_core.cupertino_navigation_bar.CupertinoNavigationBar.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/cupertino_navigation_bar/#flet_core.cupertino_navigation_bar.CupertinoNavigationBar.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_navigation_bar/#flet_core.cupertino_navigation_bar.CupertinoNavigationBar.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/cupertino_navigation_bar/#flet_core.cupertino_navigation_bar.CupertinoNavigationBar.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_navigation_bar/#flet_core.cupertino_navigation_bar.CupertinoNavigationBar.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/cupertino_navigation_bar/#flet_core.cupertino_navigation_bar.CupertinoNavigationBar.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/cupertino_navigation_bar/#flet_core.cupertino_navigation_bar.CupertinoNavigationBar.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/cupertino_navigation_bar/#flet_core.cupertino_navigation_bar.CupertinoNavigationBar.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_navigation_bar/#flet_core.cupertino_navigation_bar.CupertinoNavigationBar.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_navigation_bar/#flet_core.cupertino_navigation_bar.CupertinoNavigationBar.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/cupertino_navigation_bar/#flet_core.cupertino_navigation_bar.CupertinoNavigationBar.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/cupertino_navigation_bar/#flet_core.cupertino_navigation_bar.CupertinoNavigationBar.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_navigation_bar/#flet_core.cupertino_navigation_bar.CupertinoNavigationBar.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_navigation_bar/#flet_core.cupertino_navigation_bar.CupertinoNavigationBar.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/cupertino_navigation_bar/#flet_core.cupertino_navigation_bar.CupertinoNavigationBar.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_navigation_bar/#flet_core.cupertino_navigation_bar.CupertinoNavigationBar.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/cupertino_navigation_bar/#flet_core.cupertino_navigation_bar.CupertinoNavigationBar.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/cupertino_navigation_bar/#flet_core.cupertino_navigation_bar.CupertinoNavigationBar.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/cupertino_navigation_bar/#flet_core.cupertino_navigation_bar.CupertinoNavigationBar.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/cupertino_picker/",
      "title": "CupertinoPicker",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>An iOS-styled picker.</p> <p>Online docs: https://flet.dev/docs/controls/cupertinopicker</p>"
    },
    {
      "location": "controls/cupertino_picker/#flet_core.cupertino_picker.CupertinoPicker.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/cupertino_picker/#flet_core.cupertino_picker.CupertinoPicker.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_picker/#flet_core.cupertino_picker.CupertinoPicker.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/cupertino_picker/#flet_core.cupertino_picker.CupertinoPicker.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_picker/#flet_core.cupertino_picker.CupertinoPicker.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/cupertino_picker/#flet_core.cupertino_picker.CupertinoPicker.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/cupertino_picker/#flet_core.cupertino_picker.CupertinoPicker.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/cupertino_picker/#flet_core.cupertino_picker.CupertinoPicker.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_picker/#flet_core.cupertino_picker.CupertinoPicker.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_picker/#flet_core.cupertino_picker.CupertinoPicker.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/cupertino_picker/#flet_core.cupertino_picker.CupertinoPicker.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/cupertino_picker/#flet_core.cupertino_picker.CupertinoPicker.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_picker/#flet_core.cupertino_picker.CupertinoPicker.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_picker/#flet_core.cupertino_picker.CupertinoPicker.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/cupertino_picker/#flet_core.cupertino_picker.CupertinoPicker.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_picker/#flet_core.cupertino_picker.CupertinoPicker.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/cupertino_picker/#flet_core.cupertino_picker.CupertinoPicker.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/cupertino_picker/#flet_core.cupertino_picker.CupertinoPicker.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/cupertino_picker/#flet_core.cupertino_picker.CupertinoPicker.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/cupertino_radio/",
      "title": "CupertinoRadio",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>Radio buttons let people select a single option from two or more choices.</p> <p>Online docs: https://flet.dev/docs/controls/cupertinoradio</p>"
    },
    {
      "location": "controls/cupertino_radio/#flet_core.cupertino_radio.CupertinoRadio.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/cupertino_radio/#flet_core.cupertino_radio.CupertinoRadio.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_radio/#flet_core.cupertino_radio.CupertinoRadio.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/cupertino_radio/#flet_core.cupertino_radio.CupertinoRadio.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_radio/#flet_core.cupertino_radio.CupertinoRadio.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/cupertino_radio/#flet_core.cupertino_radio.CupertinoRadio.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/cupertino_radio/#flet_core.cupertino_radio.CupertinoRadio.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/cupertino_radio/#flet_core.cupertino_radio.CupertinoRadio.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_radio/#flet_core.cupertino_radio.CupertinoRadio.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_radio/#flet_core.cupertino_radio.CupertinoRadio.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/cupertino_radio/#flet_core.cupertino_radio.CupertinoRadio.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/cupertino_radio/#flet_core.cupertino_radio.CupertinoRadio.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_radio/#flet_core.cupertino_radio.CupertinoRadio.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_radio/#flet_core.cupertino_radio.CupertinoRadio.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/cupertino_radio/#flet_core.cupertino_radio.CupertinoRadio.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_radio/#flet_core.cupertino_radio.CupertinoRadio.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/cupertino_radio/#flet_core.cupertino_radio.CupertinoRadio.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/cupertino_radio/#flet_core.cupertino_radio.CupertinoRadio.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/cupertino_radio/#flet_core.cupertino_radio.CupertinoRadio.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/cupertino_segmented_button/",
      "title": "CupertinoSegmentedControl",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>An iOS-style segmented button.</p> <p>Online docs: https://flet.dev/docs/controls/cupertinosegmentedbutton</p>"
    },
    {
      "location": "controls/cupertino_segmented_button/#flet_core.cupertino_segmented_button.CupertinoSegmentedButton.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/cupertino_segmented_button/#flet_core.cupertino_segmented_button.CupertinoSegmentedButton.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_segmented_button/#flet_core.cupertino_segmented_button.CupertinoSegmentedButton.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/cupertino_segmented_button/#flet_core.cupertino_segmented_button.CupertinoSegmentedButton.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_segmented_button/#flet_core.cupertino_segmented_button.CupertinoSegmentedButton.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/cupertino_segmented_button/#flet_core.cupertino_segmented_button.CupertinoSegmentedButton.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/cupertino_segmented_button/#flet_core.cupertino_segmented_button.CupertinoSegmentedButton.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/cupertino_segmented_button/#flet_core.cupertino_segmented_button.CupertinoSegmentedButton.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_segmented_button/#flet_core.cupertino_segmented_button.CupertinoSegmentedButton.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_segmented_button/#flet_core.cupertino_segmented_button.CupertinoSegmentedButton.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/cupertino_segmented_button/#flet_core.cupertino_segmented_button.CupertinoSegmentedButton.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/cupertino_segmented_button/#flet_core.cupertino_segmented_button.CupertinoSegmentedButton.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_segmented_button/#flet_core.cupertino_segmented_button.CupertinoSegmentedButton.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_segmented_button/#flet_core.cupertino_segmented_button.CupertinoSegmentedButton.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/cupertino_segmented_button/#flet_core.cupertino_segmented_button.CupertinoSegmentedButton.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_segmented_button/#flet_core.cupertino_segmented_button.CupertinoSegmentedButton.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/cupertino_segmented_button/#flet_core.cupertino_segmented_button.CupertinoSegmentedButton.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/cupertino_segmented_button/#flet_core.cupertino_segmented_button.CupertinoSegmentedButton.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/cupertino_segmented_button/#flet_core.cupertino_segmented_button.CupertinoSegmentedButton.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/cupertino_slider/",
      "title": "CupertinoSlider",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>An iOS-type slider.</p> <p>It provides a visual indication of adjustable content, as well as the current setting in the total range of content.</p> <p>Use a slider when you want people to set defined values (such as volume or brightness), or when people would benefit from instant feedback on the effect of setting changes.</p> <p>Online docs: https://flet.dev/docs/controls/cupertinoslider</p>"
    },
    {
      "location": "controls/cupertino_slider/#flet_core.cupertino_slider.CupertinoSlider.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/cupertino_slider/#flet_core.cupertino_slider.CupertinoSlider.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_slider/#flet_core.cupertino_slider.CupertinoSlider.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/cupertino_slider/#flet_core.cupertino_slider.CupertinoSlider.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_slider/#flet_core.cupertino_slider.CupertinoSlider.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/cupertino_slider/#flet_core.cupertino_slider.CupertinoSlider.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/cupertino_slider/#flet_core.cupertino_slider.CupertinoSlider.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/cupertino_slider/#flet_core.cupertino_slider.CupertinoSlider.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_slider/#flet_core.cupertino_slider.CupertinoSlider.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_slider/#flet_core.cupertino_slider.CupertinoSlider.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/cupertino_slider/#flet_core.cupertino_slider.CupertinoSlider.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/cupertino_slider/#flet_core.cupertino_slider.CupertinoSlider.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_slider/#flet_core.cupertino_slider.CupertinoSlider.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_slider/#flet_core.cupertino_slider.CupertinoSlider.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/cupertino_slider/#flet_core.cupertino_slider.CupertinoSlider.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_slider/#flet_core.cupertino_slider.CupertinoSlider.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/cupertino_slider/#flet_core.cupertino_slider.CupertinoSlider.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/cupertino_slider/#flet_core.cupertino_slider.CupertinoSlider.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/cupertino_slider/#flet_core.cupertino_slider.CupertinoSlider.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/cupertino_sliding_segmented_button/",
      "title": "CupertinoSlidingSegmentedControl",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>Online docs: https://flet.dev/docs/controls/cupertinoslidingsegmentedbutton</p>"
    },
    {
      "location": "controls/cupertino_sliding_segmented_button/#flet_core.cupertino_sliding_segmented_button.CupertinoSlidingSegmentedButton.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/cupertino_sliding_segmented_button/#flet_core.cupertino_sliding_segmented_button.CupertinoSlidingSegmentedButton.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_sliding_segmented_button/#flet_core.cupertino_sliding_segmented_button.CupertinoSlidingSegmentedButton.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/cupertino_sliding_segmented_button/#flet_core.cupertino_sliding_segmented_button.CupertinoSlidingSegmentedButton.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_sliding_segmented_button/#flet_core.cupertino_sliding_segmented_button.CupertinoSlidingSegmentedButton.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/cupertino_sliding_segmented_button/#flet_core.cupertino_sliding_segmented_button.CupertinoSlidingSegmentedButton.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/cupertino_sliding_segmented_button/#flet_core.cupertino_sliding_segmented_button.CupertinoSlidingSegmentedButton.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/cupertino_sliding_segmented_button/#flet_core.cupertino_sliding_segmented_button.CupertinoSlidingSegmentedButton.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_sliding_segmented_button/#flet_core.cupertino_sliding_segmented_button.CupertinoSlidingSegmentedButton.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_sliding_segmented_button/#flet_core.cupertino_sliding_segmented_button.CupertinoSlidingSegmentedButton.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/cupertino_sliding_segmented_button/#flet_core.cupertino_sliding_segmented_button.CupertinoSlidingSegmentedButton.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/cupertino_sliding_segmented_button/#flet_core.cupertino_sliding_segmented_button.CupertinoSlidingSegmentedButton.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_sliding_segmented_button/#flet_core.cupertino_sliding_segmented_button.CupertinoSlidingSegmentedButton.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_sliding_segmented_button/#flet_core.cupertino_sliding_segmented_button.CupertinoSlidingSegmentedButton.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/cupertino_sliding_segmented_button/#flet_core.cupertino_sliding_segmented_button.CupertinoSlidingSegmentedButton.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_sliding_segmented_button/#flet_core.cupertino_sliding_segmented_button.CupertinoSlidingSegmentedButton.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/cupertino_sliding_segmented_button/#flet_core.cupertino_sliding_segmented_button.CupertinoSlidingSegmentedButton.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/cupertino_sliding_segmented_button/#flet_core.cupertino_sliding_segmented_button.CupertinoSlidingSegmentedButton.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/cupertino_sliding_segmented_button/#flet_core.cupertino_sliding_segmented_button.CupertinoSlidingSegmentedButton.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/cupertino_switch/",
      "title": "CupertinoSwitch",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>An iOS-style switch. Used to toggle the on/off state of a single setting.</p> <p>Example: <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.add(\n        ft.CupertinoSwitch(label=\"Cupertino Switch\", value=True),\n        ft.Switch(label=\"Material Checkbox\", value=True),\n        ft.Container(height=20),\n        ft.Text(\n            \"Adaptive Switch shows as CupertinoSwitch on macOS and iOS and as Switch on other platforms:\"\n        ),\n        ft.Switch(adaptive=True, label=\"Adaptive Switch\", value=True),\n    )\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/cupertinoswitch</p>"
    },
    {
      "location": "controls/cupertino_switch/#flet_core.cupertino_switch.CupertinoSwitch.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/cupertino_switch/#flet_core.cupertino_switch.CupertinoSwitch.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_switch/#flet_core.cupertino_switch.CupertinoSwitch.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/cupertino_switch/#flet_core.cupertino_switch.CupertinoSwitch.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_switch/#flet_core.cupertino_switch.CupertinoSwitch.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/cupertino_switch/#flet_core.cupertino_switch.CupertinoSwitch.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/cupertino_switch/#flet_core.cupertino_switch.CupertinoSwitch.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/cupertino_switch/#flet_core.cupertino_switch.CupertinoSwitch.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_switch/#flet_core.cupertino_switch.CupertinoSwitch.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_switch/#flet_core.cupertino_switch.CupertinoSwitch.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/cupertino_switch/#flet_core.cupertino_switch.CupertinoSwitch.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/cupertino_switch/#flet_core.cupertino_switch.CupertinoSwitch.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_switch/#flet_core.cupertino_switch.CupertinoSwitch.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_switch/#flet_core.cupertino_switch.CupertinoSwitch.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/cupertino_switch/#flet_core.cupertino_switch.CupertinoSwitch.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_switch/#flet_core.cupertino_switch.CupertinoSwitch.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/cupertino_switch/#flet_core.cupertino_switch.CupertinoSwitch.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/cupertino_switch/#flet_core.cupertino_switch.CupertinoSwitch.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/cupertino_switch/#flet_core.cupertino_switch.CupertinoSwitch.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/cupertino_textfield/",
      "title": "CupertinoTextField",
      "text": "<p>               Bases: <code>TextField</code></p> <p>An iOS-style text field.</p> <p>Online docs: https://flet.dev/docs/controls/cupertinotextfield</p>"
    },
    {
      "location": "controls/cupertino_textfield/#flet_core.cupertino_textfield.CupertinoTextField.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/cupertino_textfield/#flet_core.cupertino_textfield.CupertinoTextField.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/cupertino_textfield/#flet_core.cupertino_textfield.CupertinoTextField.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_textfield/#flet_core.cupertino_textfield.CupertinoTextField.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/cupertino_textfield/#flet_core.cupertino_textfield.CupertinoTextField.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_textfield/#flet_core.cupertino_textfield.CupertinoTextField.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/cupertino_textfield/#flet_core.cupertino_textfield.CupertinoTextField.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/cupertino_textfield/#flet_core.cupertino_textfield.CupertinoTextField.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/cupertino_textfield/#flet_core.cupertino_textfield.CupertinoTextField.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_textfield/#flet_core.cupertino_textfield.CupertinoTextField.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_textfield/#flet_core.cupertino_textfield.CupertinoTextField.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/cupertino_textfield/#flet_core.cupertino_textfield.CupertinoTextField.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/cupertino_textfield/#flet_core.cupertino_textfield.CupertinoTextField.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_textfield/#flet_core.cupertino_textfield.CupertinoTextField.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_textfield/#flet_core.cupertino_textfield.CupertinoTextField.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/cupertino_textfield/#flet_core.cupertino_textfield.CupertinoTextField.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_textfield/#flet_core.cupertino_textfield.CupertinoTextField.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/cupertino_textfield/#flet_core.cupertino_textfield.CupertinoTextField.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/cupertino_textfield/#flet_core.cupertino_textfield.CupertinoTextField.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/cupertino_textfield/#flet_core.cupertino_textfield.CupertinoTextField.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/cupertino_timer_picker/",
      "title": "CupertinoTimerPicker",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>A countdown timer picker in iOS style.</p> <p>It can show a countdown duration with hour, minute and second spinners. The duration is bound between 0 and 23 hours 59 minutes 59 seconds.</p> <p>Online docs: https://flet.dev/docs/controls/cupertinotimerpicker</p>"
    },
    {
      "location": "controls/cupertino_timer_picker/#flet_core.cupertino_timer_picker.CupertinoTimerPicker.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/cupertino_timer_picker/#flet_core.cupertino_timer_picker.CupertinoTimerPicker.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_timer_picker/#flet_core.cupertino_timer_picker.CupertinoTimerPicker.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/cupertino_timer_picker/#flet_core.cupertino_timer_picker.CupertinoTimerPicker.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_timer_picker/#flet_core.cupertino_timer_picker.CupertinoTimerPicker.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/cupertino_timer_picker/#flet_core.cupertino_timer_picker.CupertinoTimerPicker.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/cupertino_timer_picker/#flet_core.cupertino_timer_picker.CupertinoTimerPicker.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/cupertino_timer_picker/#flet_core.cupertino_timer_picker.CupertinoTimerPicker.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_timer_picker/#flet_core.cupertino_timer_picker.CupertinoTimerPicker.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_timer_picker/#flet_core.cupertino_timer_picker.CupertinoTimerPicker.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/cupertino_timer_picker/#flet_core.cupertino_timer_picker.CupertinoTimerPicker.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/cupertino_timer_picker/#flet_core.cupertino_timer_picker.CupertinoTimerPicker.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/cupertino_timer_picker/#flet_core.cupertino_timer_picker.CupertinoTimerPicker.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_timer_picker/#flet_core.cupertino_timer_picker.CupertinoTimerPicker.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/cupertino_timer_picker/#flet_core.cupertino_timer_picker.CupertinoTimerPicker.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/cupertino_timer_picker/#flet_core.cupertino_timer_picker.CupertinoTimerPicker.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/cupertino_timer_picker/#flet_core.cupertino_timer_picker.CupertinoTimerPicker.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/cupertino_timer_picker/#flet_core.cupertino_timer_picker.CupertinoTimerPicker.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/cupertino_timer_picker/#flet_core.cupertino_timer_picker.CupertinoTimerPicker.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/datatable/",
      "title": "DataTable",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p>"
    },
    {
      "location": "controls/datatable/#flet_core.datatable.DataTable.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/datatable/#flet_core.datatable.DataTable.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/datatable/#flet_core.datatable.DataTable.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/datatable/#flet_core.datatable.DataTable.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/datatable/#flet_core.datatable.DataTable.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/datatable/#flet_core.datatable.DataTable.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/datatable/#flet_core.datatable.DataTable.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/datatable/#flet_core.datatable.DataTable.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/datatable/#flet_core.datatable.DataTable.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/datatable/#flet_core.datatable.DataTable.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/datatable/#flet_core.datatable.DataTable.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/datatable/#flet_core.datatable.DataTable.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/datatable/#flet_core.datatable.DataTable.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/datatable/#flet_core.datatable.DataTable.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/datatable/#flet_core.datatable.DataTable.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/datatable/#flet_core.datatable.DataTable.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/datatable/#flet_core.datatable.DataTable.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/datatable/#flet_core.datatable.DataTable.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/datatable/#flet_core.datatable.DataTable.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/date_picker/",
      "title": "DatePicker",
      "text": "<p>               Bases: <code>Control</code></p> <p>A Material-style date picker dialog.</p> <p>It is added to <code>page.overlay</code> and can be opened by setting <code>open=True</code> or by calling <code>Page.open()</code> method.</p> <p>Depending on the <code>date_picker_entry_mode</code>, it will show either a Calendar or an Input (TextField) for picking a date.</p> <p>Example: <pre><code>import flet as ft\n\n\ndef main(page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n\n    def handle_date_change(e: ft.ControlEvent):\n        page.add(ft.Text(f\"Date changed: {e.control.value.strftime('%Y-%m-%d %H:%M %p')}\"))\n\n    cupertino_date_picker = ft.CupertinoDatePicker(\n        date_picker_mode=ft.CupertinoDatePickerMode.DATE_AND_TIME,\n        on_change=handle_date_change,\n    )\n    page.add(\n        ft.CupertinoFilledButton(\n            \"Open CupertinoDatePicker\",\n            on_click=lambda e: page.open(\n                ft.CupertinoBottomSheet(\n                    cupertino_date_picker,\n                    height=216,\n                    padding=ft.padding.only(top=6),\n                )\n            ),\n        )\n    )\n\n\nft.app(main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/datepicker</p>"
    },
    {
      "location": "controls/date_picker/#flet_core.date_picker.DatePicker.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/date_picker/#flet_core.date_picker.DatePicker.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/date_picker/#flet_core.date_picker.DatePicker.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/date_picker/#flet_core.date_picker.DatePicker.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/date_picker/#flet_core.date_picker.DatePicker.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/date_picker/#flet_core.date_picker.DatePicker.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/date_picker/#flet_core.date_picker.DatePicker.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/date_picker/#flet_core.date_picker.DatePicker.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/date_picker/#flet_core.date_picker.DatePicker.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/date_picker/#flet_core.date_picker.DatePicker.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/dismissible/",
      "title": "Dismissible",
      "text": "<p>               Bases: <code>ConstrainedControl</code>, <code>AdaptiveControl</code></p> <p>A control that can be dismissed by dragging in the indicated <code>dismiss_direction</code>. When dragged or flung in the specified <code>dismiss_direction</code>, it's content smoothly slides out of view.</p> <p>After completing the sliding animation, if a <code>resize_duration</code> is provided, this control further animates its height (or width, depending on what is perpendicular to the <code>dismiss_direction</code>), gradually reducing it to zero over the specified <code>resize_duration</code>.</p> <p>Online Docs: https://flet.dev/docs/controls/dismissible</p>"
    },
    {
      "location": "controls/dismissible/#flet_core.dismissible.Dismissible.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/dismissible/#flet_core.dismissible.Dismissible.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/dismissible/#flet_core.dismissible.Dismissible.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/dismissible/#flet_core.dismissible.Dismissible.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/dismissible/#flet_core.dismissible.Dismissible.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/dismissible/#flet_core.dismissible.Dismissible.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/dismissible/#flet_core.dismissible.Dismissible.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/dismissible/#flet_core.dismissible.Dismissible.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/dismissible/#flet_core.dismissible.Dismissible.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/dismissible/#flet_core.dismissible.Dismissible.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/dismissible/#flet_core.dismissible.Dismissible.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/dismissible/#flet_core.dismissible.Dismissible.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/dismissible/#flet_core.dismissible.Dismissible.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/dismissible/#flet_core.dismissible.Dismissible.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/dismissible/#flet_core.dismissible.Dismissible.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/dismissible/#flet_core.dismissible.Dismissible.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/dismissible/#flet_core.dismissible.Dismissible.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/dismissible/#flet_core.dismissible.Dismissible.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/dismissible/#flet_core.dismissible.Dismissible.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/dismissible/#flet_core.dismissible.Dismissible.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/divider/",
      "title": "Divider",
      "text": "<p>               Bases: <code>Control</code></p> <p>A thin horizontal line, with padding on either side. In the material design language, this represents a divider.</p>"
    },
    {
      "location": "controls/divider/#flet_core.divider.Divider--examples",
      "title": "Examples",
      "text": "<pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Column(\n            [\n                ft.Container(\n                    bgcolor=ft.colors.AMBER,\n                    alignment=ft.alignment.center,\n                    expand=True,\n                ),\n                ft.Divider(),\n                ft.Container(\n                    bgcolor=ft.colors.PINK, alignment=ft.alignment.center, expand=True\n                ),\n            ],\n            spacing=0,\n            expand=True,\n        ),\n    )\n\nft.app(target=main)\n</code></pre> <p>Live example: https://flet-controls-gallery.fly.dev/layout/divider</p> <p>Online docs: https://flet.dev/docs/controls/divider</p>"
    },
    {
      "location": "controls/divider/#flet_core.divider.Divider.color",
      "title": "<code>color: Optional[str]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The color of this divider.</p>"
    },
    {
      "location": "controls/divider/#flet_core.divider.Divider.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/divider/#flet_core.divider.Divider.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/divider/#flet_core.divider.Divider.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/divider/#flet_core.divider.Divider.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/divider/#flet_core.divider.Divider.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of this divider.</p>"
    },
    {
      "location": "controls/divider/#flet_core.divider.Divider.leading_indent",
      "title": "<code>leading_indent: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The leading indentation of this divider.</p>"
    },
    {
      "location": "controls/divider/#flet_core.divider.Divider.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/divider/#flet_core.divider.Divider.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/divider/#flet_core.divider.Divider.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/divider/#flet_core.divider.Divider.thickness",
      "title": "<code>thickness: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The thickness of this divider.</p>"
    },
    {
      "location": "controls/divider/#flet_core.divider.Divider.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/divider/#flet_core.divider.Divider.trailing_indent",
      "title": "<code>trailing_indent: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The trailing indentation of this divider.</p>"
    },
    {
      "location": "controls/divider/#flet_core.divider.Divider.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/divider/#flet_core.divider.Divider.before_update",
      "title": "<code>before_update()</code>",
      "text": "<p>Mainly used when creating custom controls.</p> <p>It is called before this control is updated.</p> <p>Make sure not to call <code>update()</code> method within <code>before_update()</code>.</p>"
    },
    {
      "location": "controls/divider/#flet_core.divider.Divider.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/drag_target/",
      "title": "DragTarget",
      "text": "<p>               Bases: <code>Control</code></p> <p>A control that completes drag operation when a <code>Draggable</code> widget is dropped.</p> <p>When a draggable is dragged on top of a drag target, the drag target is asked whether it will accept the data the draggable is carrying. The drag target will accept incoming drag if it belongs to the same group as draggable. If the user does drop the draggable on top of the drag target (and the drag target has indicated that it will accept the draggable's data), then the drag target is asked to accept the draggable's data.</p> <p>Example: <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Drag and Drop example\"\n\n    def drag_will_accept(e):\n        e.control.content.border = ft.border.all(\n            2, ft.colors.BLACK45 if e.data == \"true\" else ft.colors.RED\n        )\n        e.control.update()\n\n    def drag_accept(e: ft.DragTargetEvent):\n        src = page.get_control(e.src_id)\n        e.control.content.bgcolor = src.content.bgcolor\n        e.control.content.border = None\n        e.control.update()\n\n    def drag_leave(e):\n        e.control.content.border = None\n        e.control.update()\n\n    page.add(\n        ft.Row(\n            [\n                ft.Column(\n                    [\n                        ft.Draggable(\n                            group=\"color\",\n                            content=ft.Container(\n                                width=50,\n                                height=50,\n                                bgcolor=ft.colors.CYAN,\n                                border_radius=5,\n                            ),\n                            content_feedback=ft.Container(\n                                width=20,\n                                height=20,\n                                bgcolor=ft.colors.CYAN,\n                                border_radius=3,\n                            ),\n                        ),\n                        ft.Draggable(\n                            group=\"color\",\n                            content=ft.Container(\n                                width=50,\n                                height=50,\n                                bgcolor=ft.colors.YELLOW,\n                                border_radius=5,\n                            ),\n                        ),\n                        ft.Draggable(\n                            group=\"color1\",\n                            content=ft.Container(\n                                width=50,\n                                height=50,\n                                bgcolor=ft.colors.GREEN,\n                                border_radius=5,\n                            ),\n                        ),\n                    ]\n                ),\n                ft.Container(width=100),\n                ft.DragTarget(\n                    group=\"color\",\n                    content=ft.Container(\n                        width=50,\n                        height=50,\n                        bgcolor=ft.colors.BLUE_GREY_100,\n                        border_radius=5,\n                    ),\n                    on_will_accept=drag_will_accept,\n                    on_accept=drag_accept,\n                    on_leave=drag_leave,\n                ),\n            ]\n        )\n    )\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/dragtarget</p>"
    },
    {
      "location": "controls/drag_target/#flet_core.drag_target.DragTarget.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/drag_target/#flet_core.drag_target.DragTarget.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/drag_target/#flet_core.drag_target.DragTarget.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/drag_target/#flet_core.drag_target.DragTarget.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/drag_target/#flet_core.drag_target.DragTarget.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/drag_target/#flet_core.drag_target.DragTarget.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/drag_target/#flet_core.drag_target.DragTarget.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/drag_target/#flet_core.drag_target.DragTarget.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/drag_target/#flet_core.drag_target.DragTarget.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/drag_target/#flet_core.drag_target.DragTarget.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/draggable/",
      "title": "Draggable",
      "text": "<p>               Bases: <code>Control</code></p> <p>A control that can be dragged from to a <code>DragTarget</code>.</p> <p>When a draggable control recognizes the start of a drag gesture, it displays a <code>content_feedback</code> control that tracks the user's finger across the screen. If the user lifts their finger while on top of a <code>DragTarget</code>, that target is given the opportunity to complete drag-and-drop flow.</p> <p>Example: <pre><code>import flet\nfrom flet import (\n    Column,\n    Container,\n    Draggable,\n    DragTarget,\n    DragTargetAcceptEvent,\n    Page,\n    Row,\n    border,\n    colors,\n)\n\n\ndef main(page: Page):\n    page.title = \"Drag and Drop example\"\n\n    def drag_will_accept(e):\n        e.control.content.border = border.all(\n            2, colors.BLACK45 if e.data == \"true\" else colors.RED\n        )\n        e.control.update()\n\n    def drag_accept(e: DragTargetAcceptEvent):\n        src = page.get_control(e.src_id)\n        e.control.content.bgcolor = src.content.bgcolor\n        e.control.content.border = None\n        e.control.update()\n\n    def drag_leave(e):\n        e.control.content.border = None\n        e.control.update()\n\n    page.add(\n        Row(\n            [\n                Column(\n                    [\n                        Draggable(\n                            group=\"color\",\n                            content=Container(\n                                width=50,\n                                height=50,\n                                bgcolor=colors.CYAN,\n                                border_radius=5,\n                            ),\n                            content_feedback=Container(\n                                width=20,\n                                height=20,\n                                bgcolor=colors.CYAN,\n                                border_radius=3,\n                            ),\n                        ),\n                        Draggable(\n                            group=\"color\",\n                            content=Container(\n                                width=50,\n                                height=50,\n                                bgcolor=colors.YELLOW,\n                                border_radius=5,\n                            ),\n                        ),\n                        Draggable(\n                            group=\"color1\",\n                            content=Container(\n                                width=50,\n                                height=50,\n                                bgcolor=colors.GREEN,\n                                border_radius=5,\n                            ),\n                        ),\n                    ]\n                ),\n                Container(width=100),\n                DragTarget(\n                    group=\"color\",\n                    content=Container(\n                        width=50,\n                        height=50,\n                        bgcolor=colors.BLUE_GREY_100,\n                        border_radius=5,\n                    ),\n                    on_will_accept=drag_will_accept,\n                    on_accept=drag_accept,\n                    on_leave=drag_leave,\n                ),\n            ]\n        )\n    )\n\n\nflet.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/draggable</p>"
    },
    {
      "location": "controls/draggable/#flet_core.draggable.Draggable.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/draggable/#flet_core.draggable.Draggable.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/draggable/#flet_core.draggable.Draggable.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/draggable/#flet_core.draggable.Draggable.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/draggable/#flet_core.draggable.Draggable.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/draggable/#flet_core.draggable.Draggable.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/draggable/#flet_core.draggable.Draggable.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/draggable/#flet_core.draggable.Draggable.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/draggable/#flet_core.draggable.Draggable.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/draggable/#flet_core.draggable.Draggable.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/dropdown/",
      "title": "DropdownButton",
      "text": "<p>               Bases: <code>FormFieldControl</code></p> <p>A dropdown lets the user select from a number of items. The dropdown shows the currently selected item as well as an arrow that opens a menu for selecting another item.</p> <p>Example: <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    def button_clicked(e):\n        t.value = f\"Dropdown value is:  {dd.value}\"\n        page.update()\n\n    t = ft.Text()\n    b = ft.ElevatedButton(text=\"Submit\", on_click=button_clicked)\n    dd = ft.Dropdown(\n        width=200,\n        options=[\n            ft.dropdown.Option(\"Red\"),\n            ft.dropdown.Option(\"Green\"),\n            ft.dropdown.Option(\"Blue\"),\n        ],\n    )\n    page.add(dd, b, t)\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/dropdown</p>"
    },
    {
      "location": "controls/dropdown/#flet_core.dropdown.Dropdown.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/dropdown/#flet_core.dropdown.Dropdown.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/dropdown/#flet_core.dropdown.Dropdown.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/dropdown/#flet_core.dropdown.Dropdown.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/dropdown/#flet_core.dropdown.Dropdown.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/dropdown/#flet_core.dropdown.Dropdown.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/dropdown/#flet_core.dropdown.Dropdown.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/dropdown/#flet_core.dropdown.Dropdown.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/dropdown/#flet_core.dropdown.Dropdown.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/dropdown/#flet_core.dropdown.Dropdown.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/dropdown/#flet_core.dropdown.Dropdown.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/dropdown/#flet_core.dropdown.Dropdown.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/dropdown/#flet_core.dropdown.Dropdown.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/dropdown/#flet_core.dropdown.Dropdown.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/dropdown/#flet_core.dropdown.Dropdown.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/dropdown/#flet_core.dropdown.Dropdown.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/dropdown/#flet_core.dropdown.Dropdown.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/dropdown/#flet_core.dropdown.Dropdown.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/dropdown/#flet_core.dropdown.Dropdown.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/elevated_button/",
      "title": "ElevatedButton",
      "text": "<p>               Bases: <code>ConstrainedControl</code>, <code>AdaptiveControl</code></p> <p>Elevated buttons are essentially filled tonal buttons with a shadow. To prevent shadow creep, only use them when absolutely necessary, such as when the button requires visual separation from a patterned background.</p> <p>Example: <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Basic elevated buttons\"\n    page.add(\n        ft.ElevatedButton(text=\"Elevated button\"),\n        ft.ElevatedButton(\"Disabled button\", disabled=True),\n    )\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/elevatedbutton</p>"
    },
    {
      "location": "controls/elevated_button/#flet_core.elevated_button.ElevatedButton.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/elevated_button/#flet_core.elevated_button.ElevatedButton.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/elevated_button/#flet_core.elevated_button.ElevatedButton.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/elevated_button/#flet_core.elevated_button.ElevatedButton.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/elevated_button/#flet_core.elevated_button.ElevatedButton.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/elevated_button/#flet_core.elevated_button.ElevatedButton.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/elevated_button/#flet_core.elevated_button.ElevatedButton.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/elevated_button/#flet_core.elevated_button.ElevatedButton.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/elevated_button/#flet_core.elevated_button.ElevatedButton.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/elevated_button/#flet_core.elevated_button.ElevatedButton.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/elevated_button/#flet_core.elevated_button.ElevatedButton.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/elevated_button/#flet_core.elevated_button.ElevatedButton.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/elevated_button/#flet_core.elevated_button.ElevatedButton.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/elevated_button/#flet_core.elevated_button.ElevatedButton.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/elevated_button/#flet_core.elevated_button.ElevatedButton.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/elevated_button/#flet_core.elevated_button.ElevatedButton.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/elevated_button/#flet_core.elevated_button.ElevatedButton.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/elevated_button/#flet_core.elevated_button.ElevatedButton.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/elevated_button/#flet_core.elevated_button.ElevatedButton.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/elevated_button/#flet_core.elevated_button.ElevatedButton.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/expansion_panel/",
      "title": "ExpansionPanel",
      "text": "<p>               Bases: <code>ConstrainedControl</code>, <code>AdaptiveControl</code></p> <p>A material expansion panel. It can either be expanded or collapsed. Its body is only visible when it is expanded.</p> <p>Online docs: https://flet.dev/docs/controls/expansionpanel</p>"
    },
    {
      "location": "controls/expansion_panel/#flet_core.expansion_panel.ExpansionPanel.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/expansion_panel/#flet_core.expansion_panel.ExpansionPanel.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/expansion_panel/#flet_core.expansion_panel.ExpansionPanel.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/expansion_panel/#flet_core.expansion_panel.ExpansionPanel.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/expansion_panel/#flet_core.expansion_panel.ExpansionPanel.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/expansion_panel/#flet_core.expansion_panel.ExpansionPanel.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/expansion_panel/#flet_core.expansion_panel.ExpansionPanel.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/expansion_panel/#flet_core.expansion_panel.ExpansionPanel.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/expansion_panel/#flet_core.expansion_panel.ExpansionPanel.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/expansion_panel/#flet_core.expansion_panel.ExpansionPanel.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/expansion_panel/#flet_core.expansion_panel.ExpansionPanel.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/expansion_panel/#flet_core.expansion_panel.ExpansionPanel.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/expansion_panel/#flet_core.expansion_panel.ExpansionPanel.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/expansion_panel/#flet_core.expansion_panel.ExpansionPanel.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/expansion_panel/#flet_core.expansion_panel.ExpansionPanel.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/expansion_panel/#flet_core.expansion_panel.ExpansionPanel.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/expansion_panel/#flet_core.expansion_panel.ExpansionPanel.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/expansion_panel/#flet_core.expansion_panel.ExpansionPanel.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/expansion_panel/#flet_core.expansion_panel.ExpansionPanel.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/expansion_panel/#flet_core.expansion_panel.ExpansionPanel.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/expansion_tile/",
      "title": "ExpansionTile",
      "text": "<p>               Bases: <code>ConstrainedControl</code>, <code>AdaptiveControl</code></p> <p>A single-line ListTile with an expansion arrow icon that expands or collapses the tile to reveal or hide its controls.</p> <p>Online docs: https://flet.dev/docs/controls/expansiontile</p>"
    },
    {
      "location": "controls/expansion_tile/#flet_core.expansion_tile.ExpansionTile.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/expansion_tile/#flet_core.expansion_tile.ExpansionTile.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/expansion_tile/#flet_core.expansion_tile.ExpansionTile.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/expansion_tile/#flet_core.expansion_tile.ExpansionTile.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/expansion_tile/#flet_core.expansion_tile.ExpansionTile.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/expansion_tile/#flet_core.expansion_tile.ExpansionTile.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/expansion_tile/#flet_core.expansion_tile.ExpansionTile.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/expansion_tile/#flet_core.expansion_tile.ExpansionTile.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/expansion_tile/#flet_core.expansion_tile.ExpansionTile.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/expansion_tile/#flet_core.expansion_tile.ExpansionTile.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/expansion_tile/#flet_core.expansion_tile.ExpansionTile.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/expansion_tile/#flet_core.expansion_tile.ExpansionTile.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/expansion_tile/#flet_core.expansion_tile.ExpansionTile.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/expansion_tile/#flet_core.expansion_tile.ExpansionTile.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/expansion_tile/#flet_core.expansion_tile.ExpansionTile.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/expansion_tile/#flet_core.expansion_tile.ExpansionTile.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/expansion_tile/#flet_core.expansion_tile.ExpansionTile.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/expansion_tile/#flet_core.expansion_tile.ExpansionTile.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/expansion_tile/#flet_core.expansion_tile.ExpansionTile.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/expansion_tile/#flet_core.expansion_tile.ExpansionTile.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/file_picker/",
      "title": "FilePicker",
      "text": "<p>               Bases: <code>Control</code></p> <p>A control that allows you to use the native file explorer to pick single or multiple files, with extensions filtering support and upload.</p> <p>Example: <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    def pick_files_result(e: ft.FilePickerResultEvent):\n        selected_files.value = (\n            \", \".join(map(lambda f: f.name, e.files)) if e.files else \"Cancelled!\"\n        )\n        selected_files.update()\n\n    pick_files_dialog = ft.FilePicker(on_result=pick_files_result)\n    selected_files = ft.Text()\n\n    page.overlay.append(pick_files_dialog)\n\n    page.add(\n        ft.Row(\n            [\n                ft.ElevatedButton(\n                    \"Pick files\",\n                    icon=ft.icons.UPLOAD_FILE,\n                    on_click=lambda _: pick_files_dialog.pick_files(\n                        allow_multiple=True\n                    ),\n                ),\n                selected_files,\n            ]\n        )\n    )\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/filepicker</p>"
    },
    {
      "location": "controls/file_picker/#flet_core.file_picker.FilePicker.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/file_picker/#flet_core.file_picker.FilePicker.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/file_picker/#flet_core.file_picker.FilePicker.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/file_picker/#flet_core.file_picker.FilePicker.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/file_picker/#flet_core.file_picker.FilePicker.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/file_picker/#flet_core.file_picker.FilePicker.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/file_picker/#flet_core.file_picker.FilePicker.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/file_picker/#flet_core.file_picker.FilePicker.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/file_picker/#flet_core.file_picker.FilePicker.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/file_picker/#flet_core.file_picker.FilePicker.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/filled_button/",
      "title": "FilledButton",
      "text": "<p>               Bases: <code>ElevatedButton</code></p> <p>Filled buttons have the most visual impact after the FloatingActionButton (https://flet.dev/docs/controls/floatingactionbutton), and should be used for important, final actions that complete a flow, like Save, Join now, or Confirm.</p> <p>Example: <pre><code>import flet as ft\n\n\ndef main(page: ft.Page):\n    page.title = \"Basic filled buttons\"\n    page.add(\n        ft.FilledButton(text=\"Filled button\"),\n        ft.FilledButton(\"Disabled button\", disabled=True),\n        ft.FilledButton(\"Button with icon\", icon=\"add\"),\n    )\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/filledbutton</p>"
    },
    {
      "location": "controls/filled_button/#flet_core.filled_button.FilledButton.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/filled_button/#flet_core.filled_button.FilledButton.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/filled_button/#flet_core.filled_button.FilledButton.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/filled_button/#flet_core.filled_button.FilledButton.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/filled_button/#flet_core.filled_button.FilledButton.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/filled_button/#flet_core.filled_button.FilledButton.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/filled_button/#flet_core.filled_button.FilledButton.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/filled_button/#flet_core.filled_button.FilledButton.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/filled_button/#flet_core.filled_button.FilledButton.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/filled_button/#flet_core.filled_button.FilledButton.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/filled_button/#flet_core.filled_button.FilledButton.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/filled_button/#flet_core.filled_button.FilledButton.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/filled_button/#flet_core.filled_button.FilledButton.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/filled_button/#flet_core.filled_button.FilledButton.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/filled_button/#flet_core.filled_button.FilledButton.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/filled_button/#flet_core.filled_button.FilledButton.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/filled_button/#flet_core.filled_button.FilledButton.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/filled_button/#flet_core.filled_button.FilledButton.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/filled_button/#flet_core.filled_button.FilledButton.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/filled_button/#flet_core.filled_button.FilledButton.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/filled_tonal_button/",
      "title": "FilledTonalButton",
      "text": "<p>               Bases: <code>ElevatedButton</code></p> <p>A filled tonal button is an alternative middle ground between FilledButton and OutlinedButton buttons. They\u2019re useful in contexts where a lower-priority button requires slightly more emphasis than an outline would give, such as \"Next\" in an onboarding flow. Tonal buttons use the secondary color mapping.</p> <p>Example: <pre><code>import flet as ft\n\n\ndef main(page: ft.Page):\n    page.title = \"Basic filled tonal buttons\"\n    page.add(\n        ft.FilledTonalButton(text=\"Filled tonal button\"),\n        ft.FilledTonalButton(\"Disabled button\", disabled=True),\n        ft.FilledTonalButton(\"Button with icon\", icon=\"add\"),\n    )\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/filledtonalbutton</p>"
    },
    {
      "location": "controls/filled_tonal_button/#flet_core.filled_tonal_button.FilledTonalButton.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/filled_tonal_button/#flet_core.filled_tonal_button.FilledTonalButton.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/filled_tonal_button/#flet_core.filled_tonal_button.FilledTonalButton.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/filled_tonal_button/#flet_core.filled_tonal_button.FilledTonalButton.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/filled_tonal_button/#flet_core.filled_tonal_button.FilledTonalButton.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/filled_tonal_button/#flet_core.filled_tonal_button.FilledTonalButton.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/filled_tonal_button/#flet_core.filled_tonal_button.FilledTonalButton.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/filled_tonal_button/#flet_core.filled_tonal_button.FilledTonalButton.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/filled_tonal_button/#flet_core.filled_tonal_button.FilledTonalButton.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/filled_tonal_button/#flet_core.filled_tonal_button.FilledTonalButton.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/filled_tonal_button/#flet_core.filled_tonal_button.FilledTonalButton.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/filled_tonal_button/#flet_core.filled_tonal_button.FilledTonalButton.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/filled_tonal_button/#flet_core.filled_tonal_button.FilledTonalButton.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/filled_tonal_button/#flet_core.filled_tonal_button.FilledTonalButton.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/filled_tonal_button/#flet_core.filled_tonal_button.FilledTonalButton.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/filled_tonal_button/#flet_core.filled_tonal_button.FilledTonalButton.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/filled_tonal_button/#flet_core.filled_tonal_button.FilledTonalButton.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/filled_tonal_button/#flet_core.filled_tonal_button.FilledTonalButton.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/filled_tonal_button/#flet_core.filled_tonal_button.FilledTonalButton.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/filled_tonal_button/#flet_core.filled_tonal_button.FilledTonalButton.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/flashlight/",
      "title": "Flashlight",
      "text": "<p>               Bases: <code>Control</code></p> <p>A control to use FlashLight. Works on iOS and Android. Based on torch_light Flutter widget (https://pub.dev/packages/torch_light).</p> <p>Flashlight control is non-visual and should be added to <code>page.overlay</code> list.</p> <p>Example: <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    flashLight = ft.Flashlight()\n    page.overlay.append(flashLight)\n    page.add(\n        ft.TextButton(\"toggle\", on_click: lambda _: flashlight.toggle())\n    )\n\nft.app(target=main)\n</code></pre></p>"
    },
    {
      "location": "controls/flashlight/#flet_core.flashlight.Flashlight.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/flashlight/#flet_core.flashlight.Flashlight.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/flashlight/#flet_core.flashlight.Flashlight.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/flashlight/#flet_core.flashlight.Flashlight.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/flashlight/#flet_core.flashlight.Flashlight.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/flashlight/#flet_core.flashlight.Flashlight.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/flashlight/#flet_core.flashlight.Flashlight.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/flashlight/#flet_core.flashlight.Flashlight.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/flashlight/#flet_core.flashlight.Flashlight.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/flashlight/#flet_core.flashlight.Flashlight.before_update",
      "title": "<code>before_update()</code>",
      "text": "<p>Mainly used when creating custom controls.</p> <p>It is called before this control is updated.</p> <p>Make sure not to call <code>update()</code> method within <code>before_update()</code>.</p>"
    },
    {
      "location": "controls/flashlight/#flet_core.flashlight.Flashlight.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/flet_app/",
      "title": "FletApp",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p>"
    },
    {
      "location": "controls/flet_app/#flet_core.flet_app.FletApp.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/flet_app/#flet_core.flet_app.FletApp.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/flet_app/#flet_core.flet_app.FletApp.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/flet_app/#flet_core.flet_app.FletApp.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/flet_app/#flet_core.flet_app.FletApp.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/flet_app/#flet_core.flet_app.FletApp.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/flet_app/#flet_core.flet_app.FletApp.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/flet_app/#flet_core.flet_app.FletApp.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/flet_app/#flet_core.flet_app.FletApp.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/flet_app/#flet_core.flet_app.FletApp.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/flet_app/#flet_core.flet_app.FletApp.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/flet_app/#flet_core.flet_app.FletApp.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/flet_app/#flet_core.flet_app.FletApp.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/flet_app/#flet_core.flet_app.FletApp.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/flet_app/#flet_core.flet_app.FletApp.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/flet_app/#flet_core.flet_app.FletApp.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/flet_app/#flet_core.flet_app.FletApp.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/flet_app/#flet_core.flet_app.FletApp.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/flet_app/#flet_core.flet_app.FletApp.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/floating_action_button/",
      "title": "FloatingActionButton",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>A floating action button is a circular icon button that hovers over content to promote a primary action in the application. Floating action button is usually set to <code>page.floating_action_button</code>, but can also be added as a regular control at any place on a page.</p> <p>Example: <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Floating Action Button\"\n    page.theme_mode = ft.ThemeMode.LIGHT\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n    page.auto_scroll = True\n    page.scroll = ft.ScrollMode.HIDDEN\n    page.appbar = ft.AppBar(\n        title=ft.Text(\n            \"Floating Action Button\", weight=ft.FontWeight.BOLD, color=ft.colors.BLACK87\n        ),\n        bgcolor=ft.colors.BLUE,\n        center_title=True,\n        actions=[\n            ft.IconButton(ft.icons.MENU, tooltip=\"Menu\", icon_color=ft.colors.BLACK87)\n        ],\n        color=ft.colors.WHITE,\n    )\n\n    # keeps track of the number of tiles already added\n    page.count = 0\n\n    def fab_pressed(e):\n        page.add(ft.ListTile(title=ft.Text(f\"Tile {page.count}\")))\n        page.show_snack_bar(\n            ft.SnackBar(ft.Text(\"Tile was added successfully!\"), open=True)\n        )\n        page.count += 1\n\n    page.floating_action_button = ft.FloatingActionButton(\n        icon=ft.icons.ADD, on_click=fab_pressed, bgcolor=ft.colors.LIME_300\n    )\n    page.add(ft.Text(\"Press the FAB to add a tile!\"))\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/floatingactionbutton</p>"
    },
    {
      "location": "controls/floating_action_button/#flet_core.floating_action_button.FloatingActionButton.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/floating_action_button/#flet_core.floating_action_button.FloatingActionButton.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/floating_action_button/#flet_core.floating_action_button.FloatingActionButton.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/floating_action_button/#flet_core.floating_action_button.FloatingActionButton.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/floating_action_button/#flet_core.floating_action_button.FloatingActionButton.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/floating_action_button/#flet_core.floating_action_button.FloatingActionButton.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/floating_action_button/#flet_core.floating_action_button.FloatingActionButton.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/floating_action_button/#flet_core.floating_action_button.FloatingActionButton.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/floating_action_button/#flet_core.floating_action_button.FloatingActionButton.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/floating_action_button/#flet_core.floating_action_button.FloatingActionButton.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/floating_action_button/#flet_core.floating_action_button.FloatingActionButton.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/floating_action_button/#flet_core.floating_action_button.FloatingActionButton.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/floating_action_button/#flet_core.floating_action_button.FloatingActionButton.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/floating_action_button/#flet_core.floating_action_button.FloatingActionButton.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/floating_action_button/#flet_core.floating_action_button.FloatingActionButton.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/floating_action_button/#flet_core.floating_action_button.FloatingActionButton.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/floating_action_button/#flet_core.floating_action_button.FloatingActionButton.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/floating_action_button/#flet_core.floating_action_button.FloatingActionButton.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/floating_action_button/#flet_core.floating_action_button.FloatingActionButton.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/geolocator/",
      "title": "Geolocator",
      "text": "<p>               Bases: <code>Control</code></p> <p>A control that allows you to fetch GPS data from your device. This control is non-visual and should be added to <code>page.overlay</code> list</p> <p>Online docs: https://flet.dev/docs/controls/geolocator</p>"
    },
    {
      "location": "controls/geolocator/#flet_core.geolocator.Geolocator.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/geolocator/#flet_core.geolocator.Geolocator.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/geolocator/#flet_core.geolocator.Geolocator.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/geolocator/#flet_core.geolocator.Geolocator.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/geolocator/#flet_core.geolocator.Geolocator.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/geolocator/#flet_core.geolocator.Geolocator.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/geolocator/#flet_core.geolocator.Geolocator.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/geolocator/#flet_core.geolocator.Geolocator.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/geolocator/#flet_core.geolocator.Geolocator.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/geolocator/#flet_core.geolocator.Geolocator.before_update",
      "title": "<code>before_update()</code>",
      "text": "<p>Mainly used when creating custom controls.</p> <p>It is called before this control is updated.</p> <p>Make sure not to call <code>update()</code> method within <code>before_update()</code>.</p>"
    },
    {
      "location": "controls/geolocator/#flet_core.geolocator.Geolocator.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/gesture_detector/",
      "title": "GestureDetector",
      "text": "<p>               Bases: <code>ConstrainedControl</code>, <code>AdaptiveControl</code></p> <p>A control that detects gestures.</p> <p>Attempts to recognize gestures that correspond to its non-null callbacks.</p> <p>If this control has a content, it defers to that child control for its sizing behavior. If it does not have a content, it grows to fit the parent instead.</p> <p>Example: <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    def on_pan_update1(e: ft.DragUpdateEvent):\n        c.top = max(0, c.top + e.delta_y)\n        c.left = max(0, c.left + e.delta_x)\n        c.update()\n\n    def on_pan_update2(e: ft.DragUpdateEvent):\n        e.control.top = max(0, e.control.top + e.delta_y)\n        e.control.left = max(0, e.control.left + e.delta_x)\n        e.control.update()\n\n    gd = ft.GestureDetector(\n        mouse_cursor=ft.MouseCursor.MOVE,\n        drag_interval=50,\n        on_pan_update=on_pan_update1,\n    )\n\n    c = ft.Container(gd, bgcolor=ft.colors.AMBER, width=50, height=50, left=0, top=0)\n\n    gd1 = ft.GestureDetector(\n        mouse_cursor=ft.MouseCursor.MOVE,\n        drag_interval=10,\n        on_vertical_drag_update=on_pan_update2,\n        left=100,\n        top=100,\n        content=ft.Container(bgcolor=ft.colors.BLUE, width=50, height=50),\n    )\n\n    page.add( ft.Stack([c, gd1], width=1000, height=500))\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/gesturedetector</p>"
    },
    {
      "location": "controls/gesture_detector/#flet_core.gesture_detector.GestureDetector.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/gesture_detector/#flet_core.gesture_detector.GestureDetector.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/gesture_detector/#flet_core.gesture_detector.GestureDetector.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/gesture_detector/#flet_core.gesture_detector.GestureDetector.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/gesture_detector/#flet_core.gesture_detector.GestureDetector.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/gesture_detector/#flet_core.gesture_detector.GestureDetector.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/gesture_detector/#flet_core.gesture_detector.GestureDetector.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/gesture_detector/#flet_core.gesture_detector.GestureDetector.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/gesture_detector/#flet_core.gesture_detector.GestureDetector.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/gesture_detector/#flet_core.gesture_detector.GestureDetector.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/gesture_detector/#flet_core.gesture_detector.GestureDetector.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/gesture_detector/#flet_core.gesture_detector.GestureDetector.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/gesture_detector/#flet_core.gesture_detector.GestureDetector.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/gesture_detector/#flet_core.gesture_detector.GestureDetector.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/gesture_detector/#flet_core.gesture_detector.GestureDetector.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/gesture_detector/#flet_core.gesture_detector.GestureDetector.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/gesture_detector/#flet_core.gesture_detector.GestureDetector.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/gesture_detector/#flet_core.gesture_detector.GestureDetector.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/gesture_detector/#flet_core.gesture_detector.GestureDetector.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/gesture_detector/#flet_core.gesture_detector.GestureDetector.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/haptic_feedback/",
      "title": "HapticFeedback",
      "text": "<p>               Bases: <code>Control</code></p> <p>Allows access to the haptic feedback interface on the device.</p> <p>It is non-visual and should be added to <code>page.overlay</code> list.</p> <p>Example: <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    hf = ft.HapticFeedback()\n    page.overlay.append(hf)\n\n    page.add(\n        ft.ElevatedButton(\"Heavy impact\", on_click=lambda _: hf.heavy_impact()),\n        ft.ElevatedButton(\"Medium impact\", on_click=lambda _: hf.medium_impact()),\n        ft.ElevatedButton(\"Light impact\", on_click=lambda _: hf.light_impact()),\n        ft.ElevatedButton(\"Vibrate\", on_click=lambda _: hf.vibrate()),\n    )\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/hapticfeedback</p>"
    },
    {
      "location": "controls/haptic_feedback/#flet_core.haptic_feedback.HapticFeedback.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/haptic_feedback/#flet_core.haptic_feedback.HapticFeedback.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/haptic_feedback/#flet_core.haptic_feedback.HapticFeedback.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/haptic_feedback/#flet_core.haptic_feedback.HapticFeedback.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/haptic_feedback/#flet_core.haptic_feedback.HapticFeedback.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/haptic_feedback/#flet_core.haptic_feedback.HapticFeedback.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/haptic_feedback/#flet_core.haptic_feedback.HapticFeedback.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/haptic_feedback/#flet_core.haptic_feedback.HapticFeedback.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/haptic_feedback/#flet_core.haptic_feedback.HapticFeedback.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/haptic_feedback/#flet_core.haptic_feedback.HapticFeedback.before_update",
      "title": "<code>before_update()</code>",
      "text": "<p>Mainly used when creating custom controls.</p> <p>It is called before this control is updated.</p> <p>Make sure not to call <code>update()</code> method within <code>before_update()</code>.</p>"
    },
    {
      "location": "controls/haptic_feedback/#flet_core.haptic_feedback.HapticFeedback.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/icon/",
      "title": "Icon",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>Displays a Material icon.</p> <p>Icon browser: https://flet-icons-browser.fly.dev/#/</p> <p>Example: <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.add(\n        ft.Row(\n            [\n                ft.Icon(name=ft.icons.FAVORITE, color=ft.colors.PINK),\n                ft.Icon(name=ft.icons.AUDIOTRACK, color=ft.colors.GREEN_400, size=30),\n                ft.Icon(name=ft.icons.BEACH_ACCESS, color=ft.colors.BLUE, size=50),\n                ft.Icon(name=\"settings\", color=\"#c1c1c1\"),\n            ]\n        )\n    )\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/icon</p>"
    },
    {
      "location": "controls/icon/#flet_core.icon.Icon.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/icon/#flet_core.icon.Icon.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/icon/#flet_core.icon.Icon.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/icon/#flet_core.icon.Icon.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/icon/#flet_core.icon.Icon.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/icon/#flet_core.icon.Icon.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/icon/#flet_core.icon.Icon.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/icon/#flet_core.icon.Icon.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/icon/#flet_core.icon.Icon.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/icon/#flet_core.icon.Icon.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/icon/#flet_core.icon.Icon.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/icon/#flet_core.icon.Icon.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/icon/#flet_core.icon.Icon.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/icon/#flet_core.icon.Icon.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/icon/#flet_core.icon.Icon.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/icon/#flet_core.icon.Icon.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/icon/#flet_core.icon.Icon.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/icon/#flet_core.icon.Icon.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/icon/#flet_core.icon.Icon.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/icon_button/",
      "title": "IconButton",
      "text": "<p>               Bases: <code>ConstrainedControl</code>, <code>AdaptiveControl</code></p> <p>An icon button is a round button with an icon in the middle that reacts to touches by filling with color (ink).</p> <p>Icon buttons are commonly used in the toolbars, but they can be used in many other places as well.</p> <p>Example: <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Icon buttons\"\n    page.add(\n        ft.Row(\n            [\n                ft.IconButton(\n                    icon=ft.icons.PAUSE_CIRCLE_FILLED_ROUNDED,\n                    icon_color=\"blue400\",\n                    icon_size=20,\n                    tooltip=\"Pause record\",\n                ),\n                ft.IconButton(\n                    icon=ft.icons.DELETE_FOREVER_ROUNDED,\n                    icon_color=\"pink600\",\n                    icon_size=40,\n                    tooltip=\"Delete record\",\n                ),\n            ]\n        ),\n    )\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/iconbutton</p>"
    },
    {
      "location": "controls/icon_button/#flet_core.icon_button.IconButton.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/icon_button/#flet_core.icon_button.IconButton.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/icon_button/#flet_core.icon_button.IconButton.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/icon_button/#flet_core.icon_button.IconButton.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/icon_button/#flet_core.icon_button.IconButton.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/icon_button/#flet_core.icon_button.IconButton.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/icon_button/#flet_core.icon_button.IconButton.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/icon_button/#flet_core.icon_button.IconButton.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/icon_button/#flet_core.icon_button.IconButton.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/icon_button/#flet_core.icon_button.IconButton.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/icon_button/#flet_core.icon_button.IconButton.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/icon_button/#flet_core.icon_button.IconButton.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/icon_button/#flet_core.icon_button.IconButton.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/icon_button/#flet_core.icon_button.IconButton.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/icon_button/#flet_core.icon_button.IconButton.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/icon_button/#flet_core.icon_button.IconButton.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/icon_button/#flet_core.icon_button.IconButton.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/icon_button/#flet_core.icon_button.IconButton.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/icon_button/#flet_core.icon_button.IconButton.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/icon_button/#flet_core.icon_button.IconButton.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/image/",
      "title": "Image",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>A control that displays an image.</p> <p>Example: <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Image Example\"\n\n    img = ft.Image(\n        src=f\"/icons/icon-512.png\",\n        width=100,\n        height=100,\n        fit=ft.ImageFit.CONTAIN,\n    )\n\n    page.add(img)\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/image</p>"
    },
    {
      "location": "controls/image/#flet_core.image.Image.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/image/#flet_core.image.Image.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/image/#flet_core.image.Image.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/image/#flet_core.image.Image.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/image/#flet_core.image.Image.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/image/#flet_core.image.Image.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/image/#flet_core.image.Image.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/image/#flet_core.image.Image.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/image/#flet_core.image.Image.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/image/#flet_core.image.Image.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/image/#flet_core.image.Image.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/image/#flet_core.image.Image.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/image/#flet_core.image.Image.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/image/#flet_core.image.Image.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/image/#flet_core.image.Image.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/image/#flet_core.image.Image.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/image/#flet_core.image.Image.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/image/#flet_core.image.Image.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/image/#flet_core.image.Image.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/list_tile/",
      "title": "ListTile",
      "text": "<p>               Bases: <code>ConstrainedControl</code>, <code>AdaptiveControl</code></p> <p>A single fixed-height row that typically contains some text as well as a leading or trailing icon.</p> <p>Example:</p> <pre><code>import flet as ft\n\ndef main(page):\n    page.title = \"ListTile Example\"\n    page.add(\n        ft.Card(\n            content=ft.Container(\n                width=500,\n                content=ft.Column(\n                    [\n                        ft.ListTile(\n                            title=ft.Text(\"One-line list tile\"),\n                        ),\n                        ft.ListTile(\n                            leading=ft.Icon(ft.icons.SETTINGS),\n                            title=ft.Text(\"One-line selected list tile\"),\n                            selected=True,\n                        ),\n                    ],\n                    spacing=0,\n                ),\n                padding=ft.padding.symmetric(vertical=10),\n            )\n        )\n    )\n\nft.app(target=main)\n</code></pre> <p>Online docs: https://flet.dev/docs/controls/listtile</p>"
    },
    {
      "location": "controls/list_tile/#flet_core.list_tile.ListTile.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/list_tile/#flet_core.list_tile.ListTile.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/list_tile/#flet_core.list_tile.ListTile.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/list_tile/#flet_core.list_tile.ListTile.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/list_tile/#flet_core.list_tile.ListTile.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/list_tile/#flet_core.list_tile.ListTile.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/list_tile/#flet_core.list_tile.ListTile.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/list_tile/#flet_core.list_tile.ListTile.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/list_tile/#flet_core.list_tile.ListTile.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/list_tile/#flet_core.list_tile.ListTile.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/list_tile/#flet_core.list_tile.ListTile.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/list_tile/#flet_core.list_tile.ListTile.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/list_tile/#flet_core.list_tile.ListTile.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/list_tile/#flet_core.list_tile.ListTile.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/list_tile/#flet_core.list_tile.ListTile.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/list_tile/#flet_core.list_tile.ListTile.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/list_tile/#flet_core.list_tile.ListTile.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/list_tile/#flet_core.list_tile.ListTile.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/list_tile/#flet_core.list_tile.ListTile.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/list_tile/#flet_core.list_tile.ListTile.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/list_view/",
      "title": "ListView",
      "text": "<p>               Bases: <code>ConstrainedControl</code>, <code>ScrollableControl</code>, <code>AdaptiveControl</code></p> <p>A scrollable list of controls arranged linearly.</p> <p>ListView is the most commonly used scrolling control. It displays its children one after another in the scroll direction. In the cross axis, the children are required to fill the ListView.</p> <p>Example:</p> <pre><code>from time import sleep\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Auto-scrolling ListView\"\n\n    lv = ft.ListView(expand=1, spacing=10, padding=20, auto_scroll=True)\n\n    count = 1\n\n    for i in range(0, 60):\n        lv.controls.append(ft.Text(f\"Line {count}\"))\n        count += 1\n\n    page.add(lv)\n\n    for i in range(0, 60):\n        sleep(1)\n        lv.controls.append(ft.Text(f\"Line {count}\"))\n        count += 1\n        page.update()\n\nft.app(target=main)\n</code></pre> <p>Online docs: https://flet.dev/docs/controls/listview</p>"
    },
    {
      "location": "controls/list_view/#flet_core.list_view.ListView.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/list_view/#flet_core.list_view.ListView.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/list_view/#flet_core.list_view.ListView.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/list_view/#flet_core.list_view.ListView.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/list_view/#flet_core.list_view.ListView.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/list_view/#flet_core.list_view.ListView.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/list_view/#flet_core.list_view.ListView.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/list_view/#flet_core.list_view.ListView.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/list_view/#flet_core.list_view.ListView.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/list_view/#flet_core.list_view.ListView.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/list_view/#flet_core.list_view.ListView.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/list_view/#flet_core.list_view.ListView.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/list_view/#flet_core.list_view.ListView.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/list_view/#flet_core.list_view.ListView.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/list_view/#flet_core.list_view.ListView.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/list_view/#flet_core.list_view.ListView.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/list_view/#flet_core.list_view.ListView.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/list_view/#flet_core.list_view.ListView.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/list_view/#flet_core.list_view.ListView.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/list_view/#flet_core.list_view.ListView.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/lottie/",
      "title": "Lottie",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>Displays lottie animations.</p> <p>Online docs: https://flet.dev/docs/controls/lottie</p>"
    },
    {
      "location": "controls/lottie/#flet_core.lottie.Lottie.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/lottie/#flet_core.lottie.Lottie.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/lottie/#flet_core.lottie.Lottie.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/lottie/#flet_core.lottie.Lottie.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/lottie/#flet_core.lottie.Lottie.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/lottie/#flet_core.lottie.Lottie.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/lottie/#flet_core.lottie.Lottie.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/lottie/#flet_core.lottie.Lottie.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/lottie/#flet_core.lottie.Lottie.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/lottie/#flet_core.lottie.Lottie.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/lottie/#flet_core.lottie.Lottie.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/lottie/#flet_core.lottie.Lottie.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/lottie/#flet_core.lottie.Lottie.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/lottie/#flet_core.lottie.Lottie.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/lottie/#flet_core.lottie.Lottie.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/lottie/#flet_core.lottie.Lottie.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/lottie/#flet_core.lottie.Lottie.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/lottie/#flet_core.lottie.Lottie.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/lottie/#flet_core.lottie.Lottie.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/markdown/",
      "title": "Markdown",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>Control for rendering text in markdown format.</p> <p>Online docs: https://flet.dev/docs/controls/markdown</p>"
    },
    {
      "location": "controls/markdown/#flet_core.markdown.Markdown.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/markdown/#flet_core.markdown.Markdown.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/markdown/#flet_core.markdown.Markdown.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/markdown/#flet_core.markdown.Markdown.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/markdown/#flet_core.markdown.Markdown.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/markdown/#flet_core.markdown.Markdown.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/markdown/#flet_core.markdown.Markdown.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/markdown/#flet_core.markdown.Markdown.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/markdown/#flet_core.markdown.Markdown.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/markdown/#flet_core.markdown.Markdown.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/markdown/#flet_core.markdown.Markdown.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/markdown/#flet_core.markdown.Markdown.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/markdown/#flet_core.markdown.Markdown.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/markdown/#flet_core.markdown.Markdown.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/markdown/#flet_core.markdown.Markdown.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/markdown/#flet_core.markdown.Markdown.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/markdown/#flet_core.markdown.Markdown.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/markdown/#flet_core.markdown.Markdown.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/markdown/#flet_core.markdown.Markdown.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/matplotlib_chart/",
      "title": "MatplotlibChart",
      "text": "<p>               Bases: <code>Container</code></p> <p>Displays Matplotlib(https://matplotlib.org/) chart.</p> <p>Example: <pre><code>import matplotlib\nimport matplotlib.pyplot as plt\n\nimport flet as ft\nfrom flet_core.matplotlib_chart import MatplotlibChart\n\nmatplotlib.use(\"svg\")\n\n\ndef main(page: ft.Page):\n\n    fig, ax = plt.subplots()\n\n    fruits = [\"apple\", \"blueberry\", \"cherry\", \"orange\"]\n    counts = [40, 100, 30, 55]\n    bar_labels = [\"red\", \"blue\", \"_red\", \"orange\"]\n    bar_colors = [\"tab:red\", \"tab:blue\", \"tab:red\", \"tab:orange\"]\n\n    ax.bar(fruits, counts, label=bar_labels, color=bar_colors)\n\n    ax.set_ylabel(\"fruit supply\")\n    ax.set_title(\"Fruit supply by kind and color\")\n    ax.legend(title=\"Fruit color\")\n\n    page.add(MatplotlibChart(fig, expand=True))\n\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/matplotlibchart</p>"
    },
    {
      "location": "controls/matplotlib_chart/#flet_core.matplotlib_chart.MatplotlibChart.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/matplotlib_chart/#flet_core.matplotlib_chart.MatplotlibChart.alignment",
      "title": "<code>alignment: Optional[Alignment]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>:obj:<code>Alignment</code>, optional: Align the child control within the container.</p> <p>Alignment is an instance of <code>alignment.Alignment</code> class object with <code>x</code> and <code>y</code> properties representing the distance from the center of a rectangle.</p>"
    },
    {
      "location": "controls/matplotlib_chart/#flet_core.matplotlib_chart.MatplotlibChart.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/matplotlib_chart/#flet_core.matplotlib_chart.MatplotlibChart.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/matplotlib_chart/#flet_core.matplotlib_chart.MatplotlibChart.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/matplotlib_chart/#flet_core.matplotlib_chart.MatplotlibChart.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/matplotlib_chart/#flet_core.matplotlib_chart.MatplotlibChart.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/matplotlib_chart/#flet_core.matplotlib_chart.MatplotlibChart.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/matplotlib_chart/#flet_core.matplotlib_chart.MatplotlibChart.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/matplotlib_chart/#flet_core.matplotlib_chart.MatplotlibChart.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/matplotlib_chart/#flet_core.matplotlib_chart.MatplotlibChart.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/matplotlib_chart/#flet_core.matplotlib_chart.MatplotlibChart.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/matplotlib_chart/#flet_core.matplotlib_chart.MatplotlibChart.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/matplotlib_chart/#flet_core.matplotlib_chart.MatplotlibChart.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/matplotlib_chart/#flet_core.matplotlib_chart.MatplotlibChart.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/matplotlib_chart/#flet_core.matplotlib_chart.MatplotlibChart.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/matplotlib_chart/#flet_core.matplotlib_chart.MatplotlibChart.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/matplotlib_chart/#flet_core.matplotlib_chart.MatplotlibChart.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/matplotlib_chart/#flet_core.matplotlib_chart.MatplotlibChart.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/matplotlib_chart/#flet_core.matplotlib_chart.MatplotlibChart.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/matplotlib_chart/#flet_core.matplotlib_chart.MatplotlibChart.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/menu_bar/",
      "title": "MenuBar",
      "text": "<p>               Bases: <code>Control</code></p> <p>A menu bar that manages cascading child menus.</p> <p>It could be placed anywhere but typically resides above the main body of the application and defines a menu system for invoking callbacks in response to user selection of a menu item.</p> <p>Online docs: https://flet.dev/docs/controls/menubar</p>"
    },
    {
      "location": "controls/menu_bar/#flet_core.menu_bar.MenuBar.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/menu_bar/#flet_core.menu_bar.MenuBar.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/menu_bar/#flet_core.menu_bar.MenuBar.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/menu_bar/#flet_core.menu_bar.MenuBar.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/menu_bar/#flet_core.menu_bar.MenuBar.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/menu_bar/#flet_core.menu_bar.MenuBar.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/menu_bar/#flet_core.menu_bar.MenuBar.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/menu_bar/#flet_core.menu_bar.MenuBar.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/menu_bar/#flet_core.menu_bar.MenuBar.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/menu_bar/#flet_core.menu_bar.MenuBar.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/menu_item_button/",
      "title": "MenuItemButton",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>A button for use in a MenuBar or on its own, that can be activated by click or keyboard navigation.</p> <p>Online docs: https://flet.dev/docs/controls/menuitembutton</p>"
    },
    {
      "location": "controls/menu_item_button/#flet_core.menu_item_button.MenuItemButton.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/menu_item_button/#flet_core.menu_item_button.MenuItemButton.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/menu_item_button/#flet_core.menu_item_button.MenuItemButton.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/menu_item_button/#flet_core.menu_item_button.MenuItemButton.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/menu_item_button/#flet_core.menu_item_button.MenuItemButton.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/menu_item_button/#flet_core.menu_item_button.MenuItemButton.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/menu_item_button/#flet_core.menu_item_button.MenuItemButton.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/menu_item_button/#flet_core.menu_item_button.MenuItemButton.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/menu_item_button/#flet_core.menu_item_button.MenuItemButton.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/menu_item_button/#flet_core.menu_item_button.MenuItemButton.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/menu_item_button/#flet_core.menu_item_button.MenuItemButton.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/menu_item_button/#flet_core.menu_item_button.MenuItemButton.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/menu_item_button/#flet_core.menu_item_button.MenuItemButton.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/menu_item_button/#flet_core.menu_item_button.MenuItemButton.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/menu_item_button/#flet_core.menu_item_button.MenuItemButton.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/menu_item_button/#flet_core.menu_item_button.MenuItemButton.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/menu_item_button/#flet_core.menu_item_button.MenuItemButton.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/menu_item_button/#flet_core.menu_item_button.MenuItemButton.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/menu_item_button/#flet_core.menu_item_button.MenuItemButton.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/merge_semantics/",
      "title": "MergeSemantics",
      "text": "<p>               Bases: <code>Control</code></p> <p>A control that merges the semantics of its descendants.</p> <p>Causes all the semantics of the subtree rooted at this node to be merged into one node in the semantics tree.</p> <p>Used by accessibility tools, search engines, and other semantic analysis software to determine the meaning of the application.</p> <p>Online docs: https://flet.dev/docs/controls/mergesemantics</p> <p>```</p>"
    },
    {
      "location": "controls/merge_semantics/#flet_core.merge_semantics.MergeSemantics.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/merge_semantics/#flet_core.merge_semantics.MergeSemantics.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/merge_semantics/#flet_core.merge_semantics.MergeSemantics.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/merge_semantics/#flet_core.merge_semantics.MergeSemantics.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/merge_semantics/#flet_core.merge_semantics.MergeSemantics.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/merge_semantics/#flet_core.merge_semantics.MergeSemantics.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/merge_semantics/#flet_core.merge_semantics.MergeSemantics.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/merge_semantics/#flet_core.merge_semantics.MergeSemantics.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/merge_semantics/#flet_core.merge_semantics.MergeSemantics.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/merge_semantics/#flet_core.merge_semantics.MergeSemantics.before_update",
      "title": "<code>before_update()</code>",
      "text": "<p>Mainly used when creating custom controls.</p> <p>It is called before this control is updated.</p> <p>Make sure not to call <code>update()</code> method within <code>before_update()</code>.</p>"
    },
    {
      "location": "controls/merge_semantics/#flet_core.merge_semantics.MergeSemantics.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/navigation_bar/",
      "title": "NavigationBar",
      "text": "<p>               Bases: <code>ConstrainedControl</code>, <code>AdaptiveControl</code></p> <p>Material 3 Navigation Bar component.</p> <p>Navigation bars offer a persistent and convenient way to switch between primary destinations in an app.</p> <p>Example:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"NavigationBar Example\"\n    page.navigation_bar = ft.NavigationBar(\n        destinations=[\n            ft.NavigationBarDestination(icon=ft.icons.EXPLORE, label=\"Explore\"),\n            ft.NavigationBarDestination(icon=ft.icons.COMMUTE, label=\"Commute\"),\n            ft.NavigationBarDestination(\n                icon=ft.icons.BOOKMARK_BORDER,\n                selected_icon=ft.icons.BOOKMARK,\n                label=\"Explore\"\n            ),\n        ]\n    )\n    page.add(ft.Text(\"Body!\"))\n\nft.app(target=main)\n</code></pre> <p>Online docs: https://flet.dev/docs/controls/navigationbar</p>"
    },
    {
      "location": "controls/navigation_bar/#flet_core.navigation_bar.NavigationBar.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/navigation_bar/#flet_core.navigation_bar.NavigationBar.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/navigation_bar/#flet_core.navigation_bar.NavigationBar.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/navigation_bar/#flet_core.navigation_bar.NavigationBar.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/navigation_bar/#flet_core.navigation_bar.NavigationBar.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/navigation_bar/#flet_core.navigation_bar.NavigationBar.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/navigation_bar/#flet_core.navigation_bar.NavigationBar.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/navigation_bar/#flet_core.navigation_bar.NavigationBar.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/navigation_bar/#flet_core.navigation_bar.NavigationBar.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/navigation_bar/#flet_core.navigation_bar.NavigationBar.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/navigation_bar/#flet_core.navigation_bar.NavigationBar.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/navigation_bar/#flet_core.navigation_bar.NavigationBar.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/navigation_bar/#flet_core.navigation_bar.NavigationBar.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/navigation_bar/#flet_core.navigation_bar.NavigationBar.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/navigation_bar/#flet_core.navigation_bar.NavigationBar.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/navigation_bar/#flet_core.navigation_bar.NavigationBar.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/navigation_bar/#flet_core.navigation_bar.NavigationBar.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/navigation_bar/#flet_core.navigation_bar.NavigationBar.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/navigation_bar/#flet_core.navigation_bar.NavigationBar.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/navigation_bar/#flet_core.navigation_bar.NavigationBar.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/navigation_drawer/",
      "title": "NavigationDrawer",
      "text": "<p>               Bases: <code>Control</code></p> <p>Material Design Navigation Drawer component.</p> <p>Navigation Drawer is a panel slides in horizontally from the left or right edge of a page to show primary destinations in an app.</p> <p>Example:</p> <pre><code>import flet as ft\n\n\ndef main(page: ft.Page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n\n    def handle_dismissal(e):\n        page.add(ft.Text(\"Drawer dismissed\"))\n\n    def handle_change(e):\n        page.add(ft.Text(f\"Selected Index changed: {e.selected_index}\"))\n        # page.close(drawer)\n\n    drawer = ft.NavigationDrawer(\n        on_dismiss=handle_dismissal,\n        on_change=handle_change,\n        controls=[\n            ft.Container(height=12),\n            ft.NavigationDrawerDestination(\n                label=\"Item 1\",\n                icon=ft.icons.DOOR_BACK_DOOR_OUTLINED,\n                selected_icon_content=ft.Icon(ft.icons.DOOR_BACK_DOOR),\n            ),\n            ft.Divider(thickness=2),\n            ft.NavigationDrawerDestination(\n                icon_content=ft.Icon(ft.icons.MAIL_OUTLINED),\n                label=\"Item 2\",\n                selected_icon=ft.icons.MAIL,\n            ),\n            ft.NavigationDrawerDestination(\n                icon_content=ft.Icon(ft.icons.PHONE_OUTLINED),\n                label=\"Item 3\",\n                selected_icon=ft.icons.PHONE,\n            ),\n        ],\n    )\n\n    page.add(ft.ElevatedButton(\"Show drawer\", on_click=lambda e: page.open(drawer)))\n\n\nft.app(main)\n</code></pre> <p>Online docs: https://flet.dev/docs/controls/navigationdrawer</p>"
    },
    {
      "location": "controls/navigation_drawer/#flet_core.navigation_drawer.NavigationDrawer.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/navigation_drawer/#flet_core.navigation_drawer.NavigationDrawer.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/navigation_drawer/#flet_core.navigation_drawer.NavigationDrawer.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/navigation_drawer/#flet_core.navigation_drawer.NavigationDrawer.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/navigation_drawer/#flet_core.navigation_drawer.NavigationDrawer.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/navigation_drawer/#flet_core.navigation_drawer.NavigationDrawer.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/navigation_drawer/#flet_core.navigation_drawer.NavigationDrawer.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/navigation_drawer/#flet_core.navigation_drawer.NavigationDrawer.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/navigation_drawer/#flet_core.navigation_drawer.NavigationDrawer.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/navigation_drawer/#flet_core.navigation_drawer.NavigationDrawer.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/navigation_rail/",
      "title": "NavigationRail",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>A material widget that is meant to be displayed at the left or right of an app to navigate between a small number of views, typically between three and five.</p> <p>Example:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    rail = ft.NavigationRail(\n        selected_index=1,\n        label_type=ft.NavigationRailLabelType.ALL,\n        # extended=True,\n        min_width=100,\n        min_extended_width=400,\n        leading=ft.FloatingActionButton(icon=ft.icons.CREATE, text=\"Add\"),\n        group_alignment=-0.9,\n        destinations=[\n            ft.NavigationRailDestination(\n                icon=ft.icons.FAVORITE_BORDER, selected_icon=ft.icons.FAVORITE, label=\"First\"\n            ),\n            ft.NavigationRailDestination(\n                icon_content=ft.Icon(ft.icons.BOOKMARK_BORDER),\n                selected_icon_content=ft.Icon(ft.icons.BOOKMARK),\n                label=\"Second\",\n            ),\n            ft.NavigationRailDestination(\n                icon=ft.icons.SETTINGS_OUTLINED,\n                selected_icon_content=ft.Icon(ft.icons.SETTINGS),\n                label_content=ft.Text(\"Settings\"),\n            ),\n        ],\n        on_change=lambda e: print(\"Selected destination:\", e.control.selected_index),\n    )\n\n    page.add(\n        ft.Row(\n            [\n                rail,\n                ft.VerticalDivider(width=1),\n                ft.Column([ ft.Text(\"Body!\")], alignment=ft.MainAxisAlignment.START, expand=True),\n            ],\n            expand=True,\n        )\n    )\n\nft.app(target=main)\n</code></pre> <p>Online docs: https://flet.dev/docs/controls/navigationrail</p>"
    },
    {
      "location": "controls/navigation_rail/#flet_core.navigation_rail.NavigationRail.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/navigation_rail/#flet_core.navigation_rail.NavigationRail.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/navigation_rail/#flet_core.navigation_rail.NavigationRail.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/navigation_rail/#flet_core.navigation_rail.NavigationRail.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/navigation_rail/#flet_core.navigation_rail.NavigationRail.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/navigation_rail/#flet_core.navigation_rail.NavigationRail.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/navigation_rail/#flet_core.navigation_rail.NavigationRail.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/navigation_rail/#flet_core.navigation_rail.NavigationRail.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/navigation_rail/#flet_core.navigation_rail.NavigationRail.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/navigation_rail/#flet_core.navigation_rail.NavigationRail.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/navigation_rail/#flet_core.navigation_rail.NavigationRail.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/navigation_rail/#flet_core.navigation_rail.NavigationRail.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/navigation_rail/#flet_core.navigation_rail.NavigationRail.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/navigation_rail/#flet_core.navigation_rail.NavigationRail.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/navigation_rail/#flet_core.navigation_rail.NavigationRail.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/navigation_rail/#flet_core.navigation_rail.NavigationRail.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/navigation_rail/#flet_core.navigation_rail.NavigationRail.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/navigation_rail/#flet_core.navigation_rail.NavigationRail.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/navigation_rail/#flet_core.navigation_rail.NavigationRail.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/outlined_button/",
      "title": "OutlinedButton",
      "text": "<p>               Bases: <code>ConstrainedControl</code>, <code>AdaptiveControl</code></p> <p>Outlined buttons are medium-emphasis buttons. They contain actions that are important, but aren\u2019t the primary action in an app. Outlined buttons pair well with filled buttons to indicate an alternative, secondary action.</p> <p>Example: <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Basic outlined buttons\"\n    page.add(\n        ft.OutlinedButton(text=\"Outlined button\"),\n        ft.OutlinedButton(\"Disabled button\", disabled=True),\n    )\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/outlinedbutton</p>"
    },
    {
      "location": "controls/outlined_button/#flet_core.outlined_button.OutlinedButton.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/outlined_button/#flet_core.outlined_button.OutlinedButton.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/outlined_button/#flet_core.outlined_button.OutlinedButton.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/outlined_button/#flet_core.outlined_button.OutlinedButton.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/outlined_button/#flet_core.outlined_button.OutlinedButton.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/outlined_button/#flet_core.outlined_button.OutlinedButton.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/outlined_button/#flet_core.outlined_button.OutlinedButton.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/outlined_button/#flet_core.outlined_button.OutlinedButton.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/outlined_button/#flet_core.outlined_button.OutlinedButton.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/outlined_button/#flet_core.outlined_button.OutlinedButton.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/outlined_button/#flet_core.outlined_button.OutlinedButton.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/outlined_button/#flet_core.outlined_button.OutlinedButton.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/outlined_button/#flet_core.outlined_button.OutlinedButton.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/outlined_button/#flet_core.outlined_button.OutlinedButton.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/outlined_button/#flet_core.outlined_button.OutlinedButton.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/outlined_button/#flet_core.outlined_button.OutlinedButton.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/outlined_button/#flet_core.outlined_button.OutlinedButton.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/outlined_button/#flet_core.outlined_button.OutlinedButton.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/outlined_button/#flet_core.outlined_button.OutlinedButton.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/outlined_button/#flet_core.outlined_button.OutlinedButton.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/pagelet/",
      "title": "Pagelet",
      "text": "<p>               Bases: <code>ConstrainedControl</code>, <code>AdaptiveControl</code></p> <pre><code>Pagelet implements the basic Material Design visual layout structure.\n\nUse it for projects that require \"page within a page\" layouts with its own AppBar, BottomBar, Drawer, such as demos and galleries.\n\nExample:\n```\n</code></pre> <p>import flet as ft</p> <p>def main(page: ft.Page):     page.add(         ft.Pagelet(             appbar=ft.CupertinoAppBar(middle=ft.Text(\"AppBar title\")),             content=ft.Text(\"This is pagelet\"),         )     )</p> <p>ft.app(target=main)     ```</p> <pre><code>-----\n\nOnline docs: https://flet.dev/docs/controls/pagelet\n</code></pre>"
    },
    {
      "location": "controls/pagelet/#flet_core.pagelet.Pagelet.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/pagelet/#flet_core.pagelet.Pagelet.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/pagelet/#flet_core.pagelet.Pagelet.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/pagelet/#flet_core.pagelet.Pagelet.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/pagelet/#flet_core.pagelet.Pagelet.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/pagelet/#flet_core.pagelet.Pagelet.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/pagelet/#flet_core.pagelet.Pagelet.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/pagelet/#flet_core.pagelet.Pagelet.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/pagelet/#flet_core.pagelet.Pagelet.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/pagelet/#flet_core.pagelet.Pagelet.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/pagelet/#flet_core.pagelet.Pagelet.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/pagelet/#flet_core.pagelet.Pagelet.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/pagelet/#flet_core.pagelet.Pagelet.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/pagelet/#flet_core.pagelet.Pagelet.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/pagelet/#flet_core.pagelet.Pagelet.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/pagelet/#flet_core.pagelet.Pagelet.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/pagelet/#flet_core.pagelet.Pagelet.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/pagelet/#flet_core.pagelet.Pagelet.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/pagelet/#flet_core.pagelet.Pagelet.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/pagelet/#flet_core.pagelet.Pagelet.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/permission_handler/",
      "title": "PermissionHandler",
      "text": "<p>               Bases: <code>Control</code></p> <p>A control that allows you check and request permission from your device. This control is non-visual and should be added to <code>page.overlay</code> list.</p> <p>Online docs: https://flet.dev/docs/controls/permissionhandler</p> <p>```</p>"
    },
    {
      "location": "controls/permission_handler/#flet_core.permission_handler.PermissionHandler.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/permission_handler/#flet_core.permission_handler.PermissionHandler.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/permission_handler/#flet_core.permission_handler.PermissionHandler.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/permission_handler/#flet_core.permission_handler.PermissionHandler.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/permission_handler/#flet_core.permission_handler.PermissionHandler.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/permission_handler/#flet_core.permission_handler.PermissionHandler.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/permission_handler/#flet_core.permission_handler.PermissionHandler.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/permission_handler/#flet_core.permission_handler.PermissionHandler.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/permission_handler/#flet_core.permission_handler.PermissionHandler.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/permission_handler/#flet_core.permission_handler.PermissionHandler.before_update",
      "title": "<code>before_update()</code>",
      "text": "<p>Mainly used when creating custom controls.</p> <p>It is called before this control is updated.</p> <p>Make sure not to call <code>update()</code> method within <code>before_update()</code>.</p>"
    },
    {
      "location": "controls/permission_handler/#flet_core.permission_handler.PermissionHandler.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/plotly_chart/",
      "title": "PlotlyChart",
      "text": "<p>               Bases: <code>Container</code></p> <p>Displays Plotly(https://plotly.com/python/) chart.</p> <p>Example: <pre><code>import plotly.express as px\n\nimport flet as ft\nfrom flet_core.plotly_chart import PlotlyChart\n\ndef main(page: ft.Page):\n\n    df = px.data.gapminder().query(\"continent=='Oceania'\")\n    fig = px.line(df, x=\"year\", y=\"lifeExp\", color=\"country\")\n\n    page.add(PlotlyChart(fig, expand=True))\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/plotlychart</p>"
    },
    {
      "location": "controls/plotly_chart/#flet_core.plotly_chart.PlotlyChart.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/plotly_chart/#flet_core.plotly_chart.PlotlyChart.alignment",
      "title": "<code>alignment: Optional[Alignment]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>:obj:<code>Alignment</code>, optional: Align the child control within the container.</p> <p>Alignment is an instance of <code>alignment.Alignment</code> class object with <code>x</code> and <code>y</code> properties representing the distance from the center of a rectangle.</p>"
    },
    {
      "location": "controls/plotly_chart/#flet_core.plotly_chart.PlotlyChart.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/plotly_chart/#flet_core.plotly_chart.PlotlyChart.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/plotly_chart/#flet_core.plotly_chart.PlotlyChart.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/plotly_chart/#flet_core.plotly_chart.PlotlyChart.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/plotly_chart/#flet_core.plotly_chart.PlotlyChart.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/plotly_chart/#flet_core.plotly_chart.PlotlyChart.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/plotly_chart/#flet_core.plotly_chart.PlotlyChart.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/plotly_chart/#flet_core.plotly_chart.PlotlyChart.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/plotly_chart/#flet_core.plotly_chart.PlotlyChart.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/plotly_chart/#flet_core.plotly_chart.PlotlyChart.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/plotly_chart/#flet_core.plotly_chart.PlotlyChart.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/plotly_chart/#flet_core.plotly_chart.PlotlyChart.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/plotly_chart/#flet_core.plotly_chart.PlotlyChart.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/plotly_chart/#flet_core.plotly_chart.PlotlyChart.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/plotly_chart/#flet_core.plotly_chart.PlotlyChart.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/plotly_chart/#flet_core.plotly_chart.PlotlyChart.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/plotly_chart/#flet_core.plotly_chart.PlotlyChart.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/plotly_chart/#flet_core.plotly_chart.PlotlyChart.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/plotly_chart/#flet_core.plotly_chart.PlotlyChart.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/popup_menu_button/",
      "title": "PopupMenuButton",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>An icon button which displays a menu when clicked.</p> <p>Example: <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    def check_item_clicked(e):\n        e.control.checked = not e.control.checked\n        page.update()\n\n    pb = ft.PopupMenuButton(\n        items=[\n            ft.PopupMenuItem(text=\"Item 1\"),\n            ft.PopupMenuItem(icon=ft.icons.POWER_INPUT, text=\"Check power\"),\n            ft.PopupMenuItem(\n                content=ft.Row(\n                    [\n                        ft.Icon(ft.icons.HOURGLASS_TOP_OUTLINED),\n                        ft.Text(\"Item with a custom content\"),\n                    ]\n                ),\n                on_click=lambda _: print(\"Button with a custom content clicked!\"),\n            ),\n            ft.PopupMenuItem(),  # divider\n            ft.PopupMenuItem(\n                text=\"Checked item\", checked=False, on_click=check_item_clicked\n            ),\n        ]\n    )\n    page.add(pb)\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/popupmenubutton</p>"
    },
    {
      "location": "controls/popup_menu_button/#flet_core.popup_menu_button.PopupMenuButton.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/popup_menu_button/#flet_core.popup_menu_button.PopupMenuButton.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/popup_menu_button/#flet_core.popup_menu_button.PopupMenuButton.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/popup_menu_button/#flet_core.popup_menu_button.PopupMenuButton.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/popup_menu_button/#flet_core.popup_menu_button.PopupMenuButton.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/popup_menu_button/#flet_core.popup_menu_button.PopupMenuButton.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/popup_menu_button/#flet_core.popup_menu_button.PopupMenuButton.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/popup_menu_button/#flet_core.popup_menu_button.PopupMenuButton.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/popup_menu_button/#flet_core.popup_menu_button.PopupMenuButton.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/popup_menu_button/#flet_core.popup_menu_button.PopupMenuButton.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/popup_menu_button/#flet_core.popup_menu_button.PopupMenuButton.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/popup_menu_button/#flet_core.popup_menu_button.PopupMenuButton.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/popup_menu_button/#flet_core.popup_menu_button.PopupMenuButton.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/popup_menu_button/#flet_core.popup_menu_button.PopupMenuButton.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/popup_menu_button/#flet_core.popup_menu_button.PopupMenuButton.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/popup_menu_button/#flet_core.popup_menu_button.PopupMenuButton.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/popup_menu_button/#flet_core.popup_menu_button.PopupMenuButton.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/popup_menu_button/#flet_core.popup_menu_button.PopupMenuButton.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/popup_menu_button/#flet_core.popup_menu_button.PopupMenuButton.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/progress_bar/",
      "title": "ProgressBar",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>A material design linear progress indicator, also known as a progress bar.</p> <p>A control that shows progress along a line.</p> <p>Example:</p> <pre><code>from time import sleep\n\nimport flet as ft\n\ndef main(page: ft.Page):\n    pb = ft.ProgressBar(width=400)\n\n    page.add(\n        ft.Text(\"Linear progress indicator\", style=\"headlineSmall\"),\n        ft.Column([ ft.Text(\"Doing something...\"), pb]),\n        ft.Text(\"Indeterminate progress bar\", style=\"headlineSmall\"),\n        ft.ProgressBar(width=400, color=\"amber\", bgcolor=\"#eeeeee\"),\n    )\n\n    for i in range(0, 101):\n        pb.value = i * 0.01\n        sleep(0.1)\n        page.update()\n\nft.app(target=main)\n</code></pre> <p>Online docs: https://flet.dev/docs/controls/progressbar</p>"
    },
    {
      "location": "controls/progress_bar/#flet_core.progress_bar.ProgressBar.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/progress_bar/#flet_core.progress_bar.ProgressBar.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/progress_bar/#flet_core.progress_bar.ProgressBar.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/progress_bar/#flet_core.progress_bar.ProgressBar.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/progress_bar/#flet_core.progress_bar.ProgressBar.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/progress_bar/#flet_core.progress_bar.ProgressBar.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/progress_bar/#flet_core.progress_bar.ProgressBar.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/progress_bar/#flet_core.progress_bar.ProgressBar.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/progress_bar/#flet_core.progress_bar.ProgressBar.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/progress_bar/#flet_core.progress_bar.ProgressBar.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/progress_bar/#flet_core.progress_bar.ProgressBar.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/progress_bar/#flet_core.progress_bar.ProgressBar.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/progress_bar/#flet_core.progress_bar.ProgressBar.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/progress_bar/#flet_core.progress_bar.ProgressBar.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/progress_bar/#flet_core.progress_bar.ProgressBar.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/progress_bar/#flet_core.progress_bar.ProgressBar.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/progress_bar/#flet_core.progress_bar.ProgressBar.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/progress_bar/#flet_core.progress_bar.ProgressBar.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/progress_bar/#flet_core.progress_bar.ProgressBar.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/progress_ring/",
      "title": "ProgressRing",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>A material design circular progress indicator, which spins to indicate that the application is busy.</p> <p>A control that shows progress along a circle.</p> <p>Example:</p> <pre><code>from time import sleep\nimport flet as ft\n\ndef main(page: ft.Page):\n    pr = ft.ProgressRing(width=16, height=16, stroke_width = 2)\n\n    page.add(\n        ft.Text(\"Circular progress indicator\", style=\"headlineSmall\"),\n        ft.Row([pr, ft.Text(\"Wait for the completion...\")]),\n        ft.Text(\"Indeterminate circular progress\", style=\"headlineSmall\"),\n        ft.Column(\n            [ft.ProgressRing(), ft.Text(\"I'm going to run for ages...\")],\n            horizontal_alignment=ft.CrossAxisAlignment.CENTER,\n        ),\n    )\n\n    for i in range(0, 101):\n        pr.value = i * 0.01\n        sleep(0.1)\n        page.update()\n\nft.app(target=main)\n</code></pre> <p>Online docs: https://flet.dev/docs/controls/progressring</p> <p>```</p>"
    },
    {
      "location": "controls/progress_ring/#flet_core.progress_ring.ProgressRing.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/progress_ring/#flet_core.progress_ring.ProgressRing.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/progress_ring/#flet_core.progress_ring.ProgressRing.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/progress_ring/#flet_core.progress_ring.ProgressRing.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/progress_ring/#flet_core.progress_ring.ProgressRing.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/progress_ring/#flet_core.progress_ring.ProgressRing.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/progress_ring/#flet_core.progress_ring.ProgressRing.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/progress_ring/#flet_core.progress_ring.ProgressRing.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/progress_ring/#flet_core.progress_ring.ProgressRing.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/progress_ring/#flet_core.progress_ring.ProgressRing.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/progress_ring/#flet_core.progress_ring.ProgressRing.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/progress_ring/#flet_core.progress_ring.ProgressRing.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/progress_ring/#flet_core.progress_ring.ProgressRing.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/progress_ring/#flet_core.progress_ring.ProgressRing.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/progress_ring/#flet_core.progress_ring.ProgressRing.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/progress_ring/#flet_core.progress_ring.ProgressRing.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/progress_ring/#flet_core.progress_ring.ProgressRing.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/progress_ring/#flet_core.progress_ring.ProgressRing.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/progress_ring/#flet_core.progress_ring.ProgressRing.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/radio/",
      "title": "Radio",
      "text": "<p>               Bases: <code>ConstrainedControl</code>, <code>AdaptiveControl</code></p> <p>Radio buttons let people select a single option from two or more choices.</p> <p>Example: <pre><code>import flet as ft\n\ndef main(page):\ndef button_clicked(e):\n    t.value = f\"Your favorite color is:  {cg.value}\"\n    page.update()\n\nt = ft.Text()\nb = ft.ElevatedButton(text='Submit', on_click=button_clicked)\ncg = ft.RadioGroup(content=ft.Column([\n    ft.Radio(value=\"red\", label=\"Red\"),\n    ft.Radio(value=\"green\", label=\"Green\"),\n    ft.Radio(value=\"blue\", label=\"Blue\")]))\n\npage.add(ft.Text(\"Select your favorite color:\"), cg, b, t)\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/radio</p>"
    },
    {
      "location": "controls/radio/#flet_core.radio.Radio.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/radio/#flet_core.radio.Radio.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/radio/#flet_core.radio.Radio.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/radio/#flet_core.radio.Radio.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/radio/#flet_core.radio.Radio.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/radio/#flet_core.radio.Radio.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/radio/#flet_core.radio.Radio.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/radio/#flet_core.radio.Radio.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/radio/#flet_core.radio.Radio.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/radio/#flet_core.radio.Radio.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/radio/#flet_core.radio.Radio.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/radio/#flet_core.radio.Radio.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/radio/#flet_core.radio.Radio.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/radio/#flet_core.radio.Radio.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/radio/#flet_core.radio.Radio.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/radio/#flet_core.radio.Radio.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/radio/#flet_core.radio.Radio.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/radio/#flet_core.radio.Radio.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/radio/#flet_core.radio.Radio.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/radio/#flet_core.radio.Radio.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/radio_group/",
      "title": "RadioGroup",
      "text": "<p>               Bases: <code>Control</code></p> <p>Radio buttons let people select a single option from two or more choices.</p> <p>Example: <pre><code>import flet as ft\n\ndef main(page):\ndef button_clicked(e):\n    t.value = f\"Your favorite color is:  {cg.value}\"\n    page.update()\n\nt = ft.Text()\nb = ft.ElevatedButton(text='Submit', on_click=button_clicked)\ncg = ft.RadioGroup(content=ft.Column([\n    ft.Radio(value=\"red\", label=\"Red\"),\n    ft.Radio(value=\"green\", label=\"Green\"),\n    ft.Radio(value=\"blue\", label=\"Blue\")]))\n\npage.add(ft.Text(\"Select your favorite color:\"), cg, b, t)\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/radio</p>"
    },
    {
      "location": "controls/radio_group/#flet_core.radio_group.RadioGroup.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/radio_group/#flet_core.radio_group.RadioGroup.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/radio_group/#flet_core.radio_group.RadioGroup.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/radio_group/#flet_core.radio_group.RadioGroup.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/radio_group/#flet_core.radio_group.RadioGroup.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/radio_group/#flet_core.radio_group.RadioGroup.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/radio_group/#flet_core.radio_group.RadioGroup.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/radio_group/#flet_core.radio_group.RadioGroup.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/radio_group/#flet_core.radio_group.RadioGroup.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/radio_group/#flet_core.radio_group.RadioGroup.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/range_slider/",
      "title": "RangeSlider",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>A Material Design range slider. Used to select a range from a range of values. A range slider can be used to select from either a continuous or a discrete set of values. The default is to use a continuous range of values from min to max.</p> Example <p>```</p> <p>import flet as ft</p> <p>def range_slider_changed(e):     print(f\"On change! Values are ({e.control.start_value}, {e.control.end_value})\")</p> <p>def range_slider_started_change(e):     print(         f\"On change start! Values are ({e.control.start_value}, {e.control.end_value})\"     )</p> <p>def range_slider_ended_change(e):     print(f\"On change end! Values are ({e.control.start_value}, {e.control.end_value})\")</p> <p>def main(page: ft.Page):     range_slider = ft.RangeSlider(         min=0,         max=50,         start_value=10,         divisions=10,         end_value=20,         inactive_color=ft.colors.GREEN_300,         active_color=ft.colors.GREEN_700,         overlay_color=ft.colors.GREEN_100,         on_change=range_slider_changed,         on_change_start=range_slider_started_change,         on_change_end=range_slider_ended_change,         label=\"{value}%\",     )</p> <pre><code>page.add(\n    ft.Column(\n        horizontal_alignment=ft.CrossAxisAlignment.CENTER,\n        controls=[\n            ft.Text(\"Range slider\", size=20, weight=ft.FontWeight.BOLD),\n            range_slider,\n        ],\n    )\n)\n</code></pre> <p>ft.app(target=main)     ```</p> <pre><code>-----\n</code></pre> <p>Online docs: https://flet.dev/docs/controls/rangeslider</p>"
    },
    {
      "location": "controls/range_slider/#flet_core.range_slider.RangeSlider.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/range_slider/#flet_core.range_slider.RangeSlider.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/range_slider/#flet_core.range_slider.RangeSlider.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/range_slider/#flet_core.range_slider.RangeSlider.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/range_slider/#flet_core.range_slider.RangeSlider.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/range_slider/#flet_core.range_slider.RangeSlider.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/range_slider/#flet_core.range_slider.RangeSlider.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/range_slider/#flet_core.range_slider.RangeSlider.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/range_slider/#flet_core.range_slider.RangeSlider.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/range_slider/#flet_core.range_slider.RangeSlider.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/range_slider/#flet_core.range_slider.RangeSlider.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/range_slider/#flet_core.range_slider.RangeSlider.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/range_slider/#flet_core.range_slider.RangeSlider.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/range_slider/#flet_core.range_slider.RangeSlider.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/range_slider/#flet_core.range_slider.RangeSlider.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/range_slider/#flet_core.range_slider.RangeSlider.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/range_slider/#flet_core.range_slider.RangeSlider.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/range_slider/#flet_core.range_slider.RangeSlider.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/range_slider/#flet_core.range_slider.RangeSlider.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/responsive_row/",
      "title": "ResponsiveRow",
      "text": "<p>               Bases: <code>ConstrainedControl</code>, <code>AdaptiveControl</code></p> <p>ResponsiveRow allows aligning child controls to virtual columns. By default, a virtual grid has 12 columns, but that can be customized with <code>ResponsiveRow.columns</code> property.</p> <p>Similar to <code>expand</code> property, every control now has <code>col</code> property which allows specifying how many columns a control should span.</p> <p>Example:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.ResponsiveRow(\n            [\n                ft.TextField(label=\"TextField 1\", col={\"md\": 4}),\n                ft.TextField(label=\"TextField 2\", col={\"md\": 4}),\n                ft.TextField(label=\"TextField 3\", col={\"md\": 4}),\n            ],\n            run_spacing={\"xs\": 10},\n        ),\n    )\n\nft.app(target=main)\n</code></pre> <p>Online docs: https://flet.dev/docs/controls/responsiverow</p>"
    },
    {
      "location": "controls/responsive_row/#flet_core.responsive_row.ResponsiveRow.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/responsive_row/#flet_core.responsive_row.ResponsiveRow.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/responsive_row/#flet_core.responsive_row.ResponsiveRow.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/responsive_row/#flet_core.responsive_row.ResponsiveRow.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/responsive_row/#flet_core.responsive_row.ResponsiveRow.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/responsive_row/#flet_core.responsive_row.ResponsiveRow.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/responsive_row/#flet_core.responsive_row.ResponsiveRow.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/responsive_row/#flet_core.responsive_row.ResponsiveRow.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/responsive_row/#flet_core.responsive_row.ResponsiveRow.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/responsive_row/#flet_core.responsive_row.ResponsiveRow.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/responsive_row/#flet_core.responsive_row.ResponsiveRow.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/responsive_row/#flet_core.responsive_row.ResponsiveRow.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/responsive_row/#flet_core.responsive_row.ResponsiveRow.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/responsive_row/#flet_core.responsive_row.ResponsiveRow.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/responsive_row/#flet_core.responsive_row.ResponsiveRow.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/responsive_row/#flet_core.responsive_row.ResponsiveRow.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/responsive_row/#flet_core.responsive_row.ResponsiveRow.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/responsive_row/#flet_core.responsive_row.ResponsiveRow.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/responsive_row/#flet_core.responsive_row.ResponsiveRow.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/responsive_row/#flet_core.responsive_row.ResponsiveRow.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/rive/",
      "title": "Rive",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>Displays rive animations.</p> <p>Online docs: https://flet.dev/docs/controls/rive</p>"
    },
    {
      "location": "controls/rive/#flet_core.rive.Rive.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/rive/#flet_core.rive.Rive.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/rive/#flet_core.rive.Rive.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/rive/#flet_core.rive.Rive.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/rive/#flet_core.rive.Rive.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/rive/#flet_core.rive.Rive.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/rive/#flet_core.rive.Rive.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/rive/#flet_core.rive.Rive.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/rive/#flet_core.rive.Rive.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/rive/#flet_core.rive.Rive.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/rive/#flet_core.rive.Rive.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/rive/#flet_core.rive.Rive.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/rive/#flet_core.rive.Rive.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/rive/#flet_core.rive.Rive.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/rive/#flet_core.rive.Rive.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/rive/#flet_core.rive.Rive.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/rive/#flet_core.rive.Rive.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/rive/#flet_core.rive.Rive.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/rive/#flet_core.rive.Rive.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/row/",
      "title": "Row",
      "text": "<p>               Bases: <code>ConstrainedControl</code>, <code>ScrollableControl</code>, <code>AdaptiveControl</code></p> <p>A control that displays its children in a horizontal array.</p> <p>To cause a child control to expand and fill the available horizontal space, set its <code>expand</code> property.</p> <p>Example:</p> <pre><code>import flet as ft\n\n\ndef main(page: ft.Page):\n    page.title = \"Row example\"\n\n    page.add(\n        ft.Row(\n            controls=[\n                ft.Container(\n                    expand=1,\n                    content=ft.Text(\"Container 1\"),\n                    bgcolor=ft.colors.GREEN_100,\n                ),\n                ft.Container(\n                    expand=2, content=ft.Text(\"Container 2\"), bgcolor=ft.colors.RED_100\n                ),\n            ],\n        ),\n    ),\n\n\nft.app(target=main)\n</code></pre> <p>Online docs: https://flet.dev/docs/controls/row</p>"
    },
    {
      "location": "controls/row/#flet_core.row.Row.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/row/#flet_core.row.Row.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/row/#flet_core.row.Row.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/row/#flet_core.row.Row.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/row/#flet_core.row.Row.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/row/#flet_core.row.Row.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/row/#flet_core.row.Row.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/row/#flet_core.row.Row.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/row/#flet_core.row.Row.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/row/#flet_core.row.Row.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/row/#flet_core.row.Row.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/row/#flet_core.row.Row.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/row/#flet_core.row.Row.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/row/#flet_core.row.Row.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/row/#flet_core.row.Row.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/row/#flet_core.row.Row.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/row/#flet_core.row.Row.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/row/#flet_core.row.Row.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/row/#flet_core.row.Row.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/row/#flet_core.row.Row.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/safe_area/",
      "title": "SafeArea",
      "text": "<p>               Bases: <code>ConstrainedControl</code>, <code>AdaptiveControl</code></p>"
    },
    {
      "location": "controls/safe_area/#flet_core.safe_area.SafeArea.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/safe_area/#flet_core.safe_area.SafeArea.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/safe_area/#flet_core.safe_area.SafeArea.bottom",
      "title": "<code>bottom: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether to avoid system intrusions on the bottom side of the screen.</p> <p>Defaults to <code>True</code>.</p>"
    },
    {
      "location": "controls/safe_area/#flet_core.safe_area.SafeArea.content",
      "title": "<code>content: Control</code>  <code>property</code> <code>writable</code>",
      "text": "<p>A <code>Control</code> to display inside safe area.</p>"
    },
    {
      "location": "controls/safe_area/#flet_core.safe_area.SafeArea.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/safe_area/#flet_core.safe_area.SafeArea.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/safe_area/#flet_core.safe_area.SafeArea.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/safe_area/#flet_core.safe_area.SafeArea.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/safe_area/#flet_core.safe_area.SafeArea.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/safe_area/#flet_core.safe_area.SafeArea.left",
      "title": "<code>left: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether to avoid system intrusions on the left.</p> <p>Defaults to <code>True</code>.</p>"
    },
    {
      "location": "controls/safe_area/#flet_core.safe_area.SafeArea.maintain_bottom_view_padding",
      "title": "<code>maintain_bottom_view_padding: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the <code>SafeArea</code> should maintain the bottom <code>MediaQueryData.viewPadding</code> instead of the bottom <code>MediaQueryData.padding</code>. Defaults to <code>False</code>.</p> <p>For example, if there is an onscreen keyboard displayed above the SafeArea, the padding can be maintained below the obstruction rather than being consumed. This can be helpful in cases where your layout contains flexible controls, which could visibly move when opening a software keyboard due to the change in the padding value. Setting this to true will avoid the UI shift.</p>"
    },
    {
      "location": "controls/safe_area/#flet_core.safe_area.SafeArea.minimum",
      "title": "<code>minimum: PaddingValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>This minimum padding to apply. The greater of the minimum insets and the media padding will be applied.</p>"
    },
    {
      "location": "controls/safe_area/#flet_core.safe_area.SafeArea.minimum_padding",
      "title": "<code>minimum_padding: PaddingValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>This minimum padding to apply. The greater of the minimum insets and the media padding will be applied.</p>"
    },
    {
      "location": "controls/safe_area/#flet_core.safe_area.SafeArea.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/safe_area/#flet_core.safe_area.SafeArea.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/safe_area/#flet_core.safe_area.SafeArea.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/safe_area/#flet_core.safe_area.SafeArea.right",
      "title": "<code>right: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether to avoid system intrusions on the right.</p> <p>Defaults to <code>True</code>.</p>"
    },
    {
      "location": "controls/safe_area/#flet_core.safe_area.SafeArea.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/safe_area/#flet_core.safe_area.SafeArea.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/safe_area/#flet_core.safe_area.SafeArea.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/safe_area/#flet_core.safe_area.SafeArea.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/safe_area/#flet_core.safe_area.SafeArea.top",
      "title": "<code>top: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether to avoid system intrusions at the top of the screen, typically the system status bar.</p> <p>Defaults to <code>True</code>.</p>"
    },
    {
      "location": "controls/safe_area/#flet_core.safe_area.SafeArea.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/safe_area/#flet_core.safe_area.SafeArea.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/safe_area/#flet_core.safe_area.SafeArea.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/search_bar/",
      "title": "SearchBar",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>Manages a \"search view\" route that allows the user to select one of the suggested completions for a search query.</p> <p>Online docs: https://flet.dev/docs/controls/searchbar</p>"
    },
    {
      "location": "controls/search_bar/#flet_core.search_bar.SearchBar.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/search_bar/#flet_core.search_bar.SearchBar.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/search_bar/#flet_core.search_bar.SearchBar.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/search_bar/#flet_core.search_bar.SearchBar.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/search_bar/#flet_core.search_bar.SearchBar.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/search_bar/#flet_core.search_bar.SearchBar.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/search_bar/#flet_core.search_bar.SearchBar.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/search_bar/#flet_core.search_bar.SearchBar.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/search_bar/#flet_core.search_bar.SearchBar.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/search_bar/#flet_core.search_bar.SearchBar.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/search_bar/#flet_core.search_bar.SearchBar.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/search_bar/#flet_core.search_bar.SearchBar.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/search_bar/#flet_core.search_bar.SearchBar.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/search_bar/#flet_core.search_bar.SearchBar.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/search_bar/#flet_core.search_bar.SearchBar.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/search_bar/#flet_core.search_bar.SearchBar.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/search_bar/#flet_core.search_bar.SearchBar.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/search_bar/#flet_core.search_bar.SearchBar.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/search_bar/#flet_core.search_bar.SearchBar.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/segmented_button/",
      "title": "SegmentedButton",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>A segmented button control.</p> <p>Online docs: https://flet.dev/docs/controls/segmentedbutton</p>"
    },
    {
      "location": "controls/segmented_button/#flet_core.segmented_button.SegmentedButton.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/segmented_button/#flet_core.segmented_button.SegmentedButton.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/segmented_button/#flet_core.segmented_button.SegmentedButton.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/segmented_button/#flet_core.segmented_button.SegmentedButton.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/segmented_button/#flet_core.segmented_button.SegmentedButton.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/segmented_button/#flet_core.segmented_button.SegmentedButton.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/segmented_button/#flet_core.segmented_button.SegmentedButton.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/segmented_button/#flet_core.segmented_button.SegmentedButton.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/segmented_button/#flet_core.segmented_button.SegmentedButton.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/segmented_button/#flet_core.segmented_button.SegmentedButton.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/segmented_button/#flet_core.segmented_button.SegmentedButton.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/segmented_button/#flet_core.segmented_button.SegmentedButton.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/segmented_button/#flet_core.segmented_button.SegmentedButton.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/segmented_button/#flet_core.segmented_button.SegmentedButton.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/segmented_button/#flet_core.segmented_button.SegmentedButton.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/segmented_button/#flet_core.segmented_button.SegmentedButton.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/segmented_button/#flet_core.segmented_button.SegmentedButton.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/segmented_button/#flet_core.segmented_button.SegmentedButton.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/segmented_button/#flet_core.segmented_button.SegmentedButton.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/selection_area/",
      "title": "SelectionArea",
      "text": "<p>               Bases: <code>Control</code></p> <p>Flet controls are not selectable by default. SelectionArea is used to enable selection for its child control.</p> <p>Example: <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.add(\n        ft.SelectionArea(\n            content=ft.Column([ft.Text(\"Selectable text\"), ft.Text(\"Also selectable\")])\n        )\n    )\n    page.add(ft.Text(\"Not selectable\"))\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/selectionarea</p>"
    },
    {
      "location": "controls/selection_area/#flet_core.selection_area.SelectionArea.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/selection_area/#flet_core.selection_area.SelectionArea.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/selection_area/#flet_core.selection_area.SelectionArea.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/selection_area/#flet_core.selection_area.SelectionArea.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/selection_area/#flet_core.selection_area.SelectionArea.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/selection_area/#flet_core.selection_area.SelectionArea.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/selection_area/#flet_core.selection_area.SelectionArea.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/selection_area/#flet_core.selection_area.SelectionArea.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/selection_area/#flet_core.selection_area.SelectionArea.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/selection_area/#flet_core.selection_area.SelectionArea.before_update",
      "title": "<code>before_update()</code>",
      "text": "<p>Mainly used when creating custom controls.</p> <p>It is called before this control is updated.</p> <p>Make sure not to call <code>update()</code> method within <code>before_update()</code>.</p>"
    },
    {
      "location": "controls/selection_area/#flet_core.selection_area.SelectionArea.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/semantics/",
      "title": "Semantics",
      "text": "<p>               Bases: <code>Control</code></p> <p>A control that annotates the control tree with a description of the meaning of the widgets.</p> <p>Used by accessibility tools, search engines, and other semantic analysis software to determine the meaning of the application.</p> <p>Online docs: https://flet.dev/docs/controls/semantics</p>"
    },
    {
      "location": "controls/semantics/#flet_core.semantics.Semantics.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/semantics/#flet_core.semantics.Semantics.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/semantics/#flet_core.semantics.Semantics.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/semantics/#flet_core.semantics.Semantics.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/semantics/#flet_core.semantics.Semantics.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/semantics/#flet_core.semantics.Semantics.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/semantics/#flet_core.semantics.Semantics.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/semantics/#flet_core.semantics.Semantics.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/semantics/#flet_core.semantics.Semantics.before_update",
      "title": "<code>before_update()</code>",
      "text": "<p>Mainly used when creating custom controls.</p> <p>It is called before this control is updated.</p> <p>Make sure not to call <code>update()</code> method within <code>before_update()</code>.</p>"
    },
    {
      "location": "controls/semantics/#flet_core.semantics.Semantics.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/semantics_service/",
      "title": "SemanticsService",
      "text": "<p>               Bases: <code>Control</code></p>"
    },
    {
      "location": "controls/semantics_service/#flet_core.semantics_service.SemanticsService.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/semantics_service/#flet_core.semantics_service.SemanticsService.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/semantics_service/#flet_core.semantics_service.SemanticsService.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/semantics_service/#flet_core.semantics_service.SemanticsService.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/semantics_service/#flet_core.semantics_service.SemanticsService.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/semantics_service/#flet_core.semantics_service.SemanticsService.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/semantics_service/#flet_core.semantics_service.SemanticsService.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/semantics_service/#flet_core.semantics_service.SemanticsService.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/semantics_service/#flet_core.semantics_service.SemanticsService.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/semantics_service/#flet_core.semantics_service.SemanticsService.before_update",
      "title": "<code>before_update()</code>",
      "text": "<p>Mainly used when creating custom controls.</p> <p>It is called before this control is updated.</p> <p>Make sure not to call <code>update()</code> method within <code>before_update()</code>.</p>"
    },
    {
      "location": "controls/semantics_service/#flet_core.semantics_service.SemanticsService.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/session_storage/",
      "title": "SessionStorage",
      "text": ""
    },
    {
      "location": "controls/shader_mask/",
      "title": "ShaderMask",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>A control that applies a mask generated by a shader to its child.</p> <p>For example, ShaderMask can be used to gradually fade out the edge of a child by using a <code>LinearGradient</code> mask.</p> <p>Example: <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.add(\n        ft.Row(\n            [\n                ft.ShaderMask(\n                    ft.Image(src=\"https://picsum.photos/100/200?2\"),\n                    blend_mode=ft.BlendMode.DST_IN,\n                    shader=ft.LinearGradient(\n                        begin=ft.alignment.top_center,\n                        end=ft.alignment.bottom_center,\n                        colors=[ft.colors.BLACK, ft.colors.TRANSPARENT],\n                        stops=[0.5, 1.0],\n                    ),\n                    border_radius=10,\n                ),\n            ]\n        )\n    )\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/shadermask</p>"
    },
    {
      "location": "controls/shader_mask/#flet_core.shader_mask.ShaderMask.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/shader_mask/#flet_core.shader_mask.ShaderMask.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/shader_mask/#flet_core.shader_mask.ShaderMask.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/shader_mask/#flet_core.shader_mask.ShaderMask.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/shader_mask/#flet_core.shader_mask.ShaderMask.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/shader_mask/#flet_core.shader_mask.ShaderMask.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/shader_mask/#flet_core.shader_mask.ShaderMask.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/shader_mask/#flet_core.shader_mask.ShaderMask.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/shader_mask/#flet_core.shader_mask.ShaderMask.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/shader_mask/#flet_core.shader_mask.ShaderMask.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/shader_mask/#flet_core.shader_mask.ShaderMask.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/shader_mask/#flet_core.shader_mask.ShaderMask.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/shader_mask/#flet_core.shader_mask.ShaderMask.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/shader_mask/#flet_core.shader_mask.ShaderMask.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/shader_mask/#flet_core.shader_mask.ShaderMask.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/shader_mask/#flet_core.shader_mask.ShaderMask.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/shader_mask/#flet_core.shader_mask.ShaderMask.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/shader_mask/#flet_core.shader_mask.ShaderMask.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/shader_mask/#flet_core.shader_mask.ShaderMask.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/shake_detector/",
      "title": "ShakeDetector",
      "text": "<p>               Bases: <code>Control</code></p> <p>Detects phone shakes.</p> <p>It is non-visual and should be added to <code>page.overlay</code> list.</p> <p>Example: <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    shd = ft.ShakeDetector(\n        minimum_shake_count=2,\n        shake_slop_time_ms=300,\n        shake_count_reset_time_ms=1000,\n        on_shake=lambda _: print(\"SHAKE DETECTED!\"),\n    )\n    page.overlay.append(shd)\n\n    page.add(ft.Text(\"Program body\"))\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/shakedetector</p>"
    },
    {
      "location": "controls/shake_detector/#flet_core.shake_detector.ShakeDetector.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/shake_detector/#flet_core.shake_detector.ShakeDetector.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/shake_detector/#flet_core.shake_detector.ShakeDetector.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/shake_detector/#flet_core.shake_detector.ShakeDetector.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/shake_detector/#flet_core.shake_detector.ShakeDetector.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/shake_detector/#flet_core.shake_detector.ShakeDetector.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/shake_detector/#flet_core.shake_detector.ShakeDetector.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/shake_detector/#flet_core.shake_detector.ShakeDetector.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/shake_detector/#flet_core.shake_detector.ShakeDetector.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/shake_detector/#flet_core.shake_detector.ShakeDetector.before_update",
      "title": "<code>before_update()</code>",
      "text": "<p>Mainly used when creating custom controls.</p> <p>It is called before this control is updated.</p> <p>Make sure not to call <code>update()</code> method within <code>before_update()</code>.</p>"
    },
    {
      "location": "controls/shake_detector/#flet_core.shake_detector.ShakeDetector.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/slider/",
      "title": "Slider",
      "text": "<p>               Bases: <code>ConstrainedControl</code>, <code>AdaptiveControl</code></p> <p>A slider provides a visual indication of adjustable content, as well as the current setting in the total range of content.</p> <p>Use a slider when you want people to set defined values (such as volume or brightness), or when people would benefit from instant feedback on the effect of setting changes.</p> <p>Example: <pre><code>import flet as ft\n\ndef main(page):\n    page.add(\n        ft.Text(\"Slider with value:\"),\n        ft.Slider(value=0.3),\n        ft.Text(\"Slider with a custom range and label:\"),\n        ft.Slider(min=0, max=100, divisions=10, label=\"{value}%\"))\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/slider</p>"
    },
    {
      "location": "controls/slider/#flet_core.slider.Slider.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/slider/#flet_core.slider.Slider.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/slider/#flet_core.slider.Slider.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/slider/#flet_core.slider.Slider.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/slider/#flet_core.slider.Slider.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/slider/#flet_core.slider.Slider.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/slider/#flet_core.slider.Slider.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/slider/#flet_core.slider.Slider.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/slider/#flet_core.slider.Slider.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/slider/#flet_core.slider.Slider.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/slider/#flet_core.slider.Slider.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/slider/#flet_core.slider.Slider.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/slider/#flet_core.slider.Slider.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/slider/#flet_core.slider.Slider.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/slider/#flet_core.slider.Slider.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/slider/#flet_core.slider.Slider.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/slider/#flet_core.slider.Slider.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/slider/#flet_core.slider.Slider.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/slider/#flet_core.slider.Slider.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/slider/#flet_core.slider.Slider.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/snack_bar/",
      "title": "SnackBar",
      "text": "<p>               Bases: <code>Control</code></p> <p>A lightweight message with an optional action which briefly displays at the bottom of the screen.</p> <p>Example: <pre><code>import flet as ft\n\nclass Data:\n    def __init__(self) -&gt; None:\n        self.counter = 0\n\nd = Data()\n\ndef main(page):\n\n    page.snack_bar = ft.SnackBar(\n        content=ft.Text(\"Hello, world!\"),\n        action=\"Alright!\",\n    )\n    page.snack_bar.open = True\n\n    def on_click(e):\n        page.snack_bar = ft.SnackBar(ft.Text(f\"Hello {d.counter}\"))\n        page.snack_bar.open = True\n        d.counter += 1\n        page.update()\n\n    page.add(ft.ElevatedButton(\"Open SnackBar\", on_click=on_click))\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/snackbar</p>"
    },
    {
      "location": "controls/snack_bar/#flet_core.snack_bar.SnackBar.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/snack_bar/#flet_core.snack_bar.SnackBar.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/snack_bar/#flet_core.snack_bar.SnackBar.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/snack_bar/#flet_core.snack_bar.SnackBar.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/snack_bar/#flet_core.snack_bar.SnackBar.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/snack_bar/#flet_core.snack_bar.SnackBar.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/snack_bar/#flet_core.snack_bar.SnackBar.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/snack_bar/#flet_core.snack_bar.SnackBar.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/snack_bar/#flet_core.snack_bar.SnackBar.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/snack_bar/#flet_core.snack_bar.SnackBar.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/stack/",
      "title": "Stack",
      "text": "<p>               Bases: <code>ConstrainedControl</code>, <code>AdaptiveControl</code></p> <p>A control that positions its children on top of each other.</p> <p>This control is useful if you want to overlap several children in a simple way, for example having some text and an image, overlaid with a gradient and a button attached to the bottom.</p> <p>Stack is also useful if you want to implement implicit animations (https://flet.dev/docs/guides/python/animations/) that require knowing absolute position of a target value.</p> <p>Example:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    st = ft.Stack(\n        controls=[\n            ft.Image(\n                src=f\"https://picsum.photos/300/300\",\n                width=300,\n                height=300,\n                fit=ft.ImageFit.CONTAIN,\n            ),\n            ft.Row(\n                controls=[\n                    ft.Text(\n                        \"Image title\",\n                        color=\"white\",\n                        size=40,\n                        weight=\"bold\",\n                        opacity=0.5,\n                    )\n                ],\n                alignment=ft.MainAxisAlignment.CENTER,\n            ),\n        ],\n        width=300,\n        height=300,\n    )\n\n    page.add(st)\n\nft.app(target=main)\n</code></pre> <p>Online docs: https://flet.dev/docs/controls/stack</p>"
    },
    {
      "location": "controls/stack/#flet_core.stack.Stack.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/stack/#flet_core.stack.Stack.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/stack/#flet_core.stack.Stack.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/stack/#flet_core.stack.Stack.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/stack/#flet_core.stack.Stack.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/stack/#flet_core.stack.Stack.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/stack/#flet_core.stack.Stack.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/stack/#flet_core.stack.Stack.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/stack/#flet_core.stack.Stack.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/stack/#flet_core.stack.Stack.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/stack/#flet_core.stack.Stack.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/stack/#flet_core.stack.Stack.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/stack/#flet_core.stack.Stack.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/stack/#flet_core.stack.Stack.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/stack/#flet_core.stack.Stack.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/stack/#flet_core.stack.Stack.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/stack/#flet_core.stack.Stack.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/stack/#flet_core.stack.Stack.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/stack/#flet_core.stack.Stack.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/stack/#flet_core.stack.Stack.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/submenu_button/",
      "title": "SubmenuButton",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>A menu button that displays a cascading menu. It can be used as part of a MenuBar, or as a standalone control.</p> <p>Online docs: https://flet.dev/docs/controls/submenubutton</p>"
    },
    {
      "location": "controls/submenu_button/#flet_core.submenu_button.SubmenuButton.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/submenu_button/#flet_core.submenu_button.SubmenuButton.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/submenu_button/#flet_core.submenu_button.SubmenuButton.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/submenu_button/#flet_core.submenu_button.SubmenuButton.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/submenu_button/#flet_core.submenu_button.SubmenuButton.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/submenu_button/#flet_core.submenu_button.SubmenuButton.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/submenu_button/#flet_core.submenu_button.SubmenuButton.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/submenu_button/#flet_core.submenu_button.SubmenuButton.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/submenu_button/#flet_core.submenu_button.SubmenuButton.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/submenu_button/#flet_core.submenu_button.SubmenuButton.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/submenu_button/#flet_core.submenu_button.SubmenuButton.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/submenu_button/#flet_core.submenu_button.SubmenuButton.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/submenu_button/#flet_core.submenu_button.SubmenuButton.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/submenu_button/#flet_core.submenu_button.SubmenuButton.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/submenu_button/#flet_core.submenu_button.SubmenuButton.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/submenu_button/#flet_core.submenu_button.SubmenuButton.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/submenu_button/#flet_core.submenu_button.SubmenuButton.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/submenu_button/#flet_core.submenu_button.SubmenuButton.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/submenu_button/#flet_core.submenu_button.SubmenuButton.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/switch/",
      "title": "Switch",
      "text": "<p>               Bases: <code>ConstrainedControl</code>, <code>AdaptiveControl</code></p> <p>A toggle represents a physical switch that allows someone to choose between two mutually exclusive options.</p> <p>or example, \"On/Off\", \"Show/Hide\". Choosing an option should produce an immediate result.</p> <p>Example: <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    def theme_changed(e):\n        page.theme_mode = (\n            ft.ThemeMode.DARK\n            if page.theme_mode == ft.ThemeMode.LIGHT\n            else ft.ThemeMode.LIGHT\n        )\n        c.label = (\n            \"Light theme\" if page.theme_mode == ft.ThemeMode.LIGHT else \"Dark theme\"\n        )\n        page.update()\n\n    page.theme_mode = ft.ThemeMode.LIGHT\n    c = ft.Switch(label=\"Light theme\", on_change=theme_changed)\n    page.add(c)\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/switch</p>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.active_color",
      "title": "<code>active_color: Optional[str]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The color to use when this switch is on.</p>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.active_track_color",
      "title": "<code>active_track_color: Optional[str]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The color to use on the track when this switch is on.</p> <p>If <code>track_color</code> returns a non-null color in the <code>selected</code> state, it will be used instead of this color.</p>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.autofocus",
      "title": "<code>autofocus: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>True if the control will be selected as the initial focus. If there is more than one control on a page with autofocus set, then the first one added to the page will get focus.</p>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.focus_color",
      "title": "<code>focus_color: Optional[str]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The color to use for the focus highlight for keyboard interactions.</p>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.hover_color",
      "title": "<code>hover_color: Optional[str]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The color to be used when it is being hovered over by the mouse pointer.</p>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.inactive_thumb_color",
      "title": "<code>inactive_thumb_color: Optional[str]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The color to use on the thumb when this switch is off.</p> <p>If <code>thumb_color</code> returns a non-null color in the default state, it will be used instead of this color.</p>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.inactive_track_color",
      "title": "<code>inactive_track_color: Optional[str]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The color to use on the track when this switch is off.</p> <p>If <code>track_color</code> returns a non-null color in the default state, it will be used instead of this color.</p>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.label",
      "title": "<code>label: Optional[str]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The clickable label to display on the right of the Switch.</p>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.label_position",
      "title": "<code>label_position: Optional[LabelPosition]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Value is of type <code>LabelPosition</code> and defaults to <code>LabelPosition.RIGHT</code>.</p>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.label_style",
      "title": "<code>label_style: Optional[TextStyle]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The label's style.</p> <p>Value is of type <code>TextStyle</code>.</p>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.mouse_cursor",
      "title": "<code>mouse_cursor: Optional[MouseCursor]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The cursor to be displayed when a mouse pointer enters or is hovering over this control. The value is <code>MouseCursor</code> enum.</p>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.overlay_color",
      "title": "<code>overlay_color: Union[None, str, Dict[ControlState, str]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The color for the switch's Material in various <code>ControlState</code> states. The following <code>ControlState</code> values are supported: <code>PRESSED</code>, <code>SELECTED</code>, <code>HOVERED</code>, <code>FOCUSED</code> and <code>DEFAULT</code>.</p>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.splash_radius",
      "title": "<code>splash_radius: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The radius of the splash effect when the switch is pressed.</p>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.thumb_color",
      "title": "<code>thumb_color: Union[None, str, Dict[ControlState, str]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The color of this switch's thumb in various <code>ControlState</code> states. The following <code>ControlState</code> values are supported: <code>SELECTED</code>, <code>HOVERED</code>, <code>DISABLED</code>, <code>FOCUSED</code> and <code>DEFAULT</code> (fallback).</p>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.thumb_icon",
      "title": "<code>thumb_icon: Union[None, str, Dict[ControlState, str]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The icon of this Switch's thumb in various <code>ControlState</code> states. The following <code>ControlState</code> values are supported: <code>SELECTED</code>, <code>HOVERED</code>, <code>DISABLED</code>, <code>FOCUSED</code> and <code>DEFAULT</code> (fallback).</p>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.track_color",
      "title": "<code>track_color: Union[None, str, Dict[ControlState, str]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The color of this switch's track in various <code>ControlState</code> states. The following <code>ControlState</code> values are supported: <code>SELECTED</code>, <code>HOVERED</code>, <code>DISABLED</code>, <code>FOCUSED</code> and <code>DEFAULT</code> (fallback).</p>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.track_outline_color",
      "title": "<code>track_outline_color: Union[None, str, Dict[ControlState, str]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The outline color of this switch's track in various <code>ControlState</code> states. The following <code>ControlState</code> values are supported: <code>SELECTED</code>, <code>HOVERED</code>, <code>DISABLED</code>, <code>FOCUSED</code> and <code>DEFAULT</code> (fallback).</p>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.value",
      "title": "<code>value: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Current value of the Switch.</p>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/switch/#flet_core.switch.Switch.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/tabs/",
      "title": "Tabs",
      "text": "<p>               Bases: <code>ConstrainedControl</code>, <code>AdaptiveControl</code></p> <p>The Tabs control is used for navigating frequently accessed, distinct content categories. Tabs allow for navigation between two or more content views and relies on text headers to articulate the different sections of content.</p> <p>Example: <pre><code>import flet as ft\n\n\ndef main(page: ft.Page):\n\n    t = ft.Tabs(\n        selected_index=1,\n        animation_duration=300,\n        tabs=[\n            ft.Tab(\n                text=\"Tab 1\",\n                content=ft.Container(\n                    content=ft.Text(\"This is Tab 1\"), alignment=ft.alignment.center\n                ),\n            ),\n            ft.Tab(\n                tab_content=ft.Icon(ft.icons.SEARCH),\n                content=ft.Text(\"This is Tab 2\"),\n            ),\n            ft.Tab(\n                text=\"Tab 3\",\n                icon=ft.icons.SETTINGS,\n                content=ft.Text(\"This is Tab 3\"),\n            ),\n        ],\n        expand=1,\n    )\n\n    page.add(t)\n\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/tabs</p>"
    },
    {
      "location": "controls/tabs/#flet_core.tabs.Tabs.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/tabs/#flet_core.tabs.Tabs.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/tabs/#flet_core.tabs.Tabs.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/tabs/#flet_core.tabs.Tabs.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/tabs/#flet_core.tabs.Tabs.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/tabs/#flet_core.tabs.Tabs.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/tabs/#flet_core.tabs.Tabs.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/tabs/#flet_core.tabs.Tabs.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/tabs/#flet_core.tabs.Tabs.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/tabs/#flet_core.tabs.Tabs.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/tabs/#flet_core.tabs.Tabs.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/tabs/#flet_core.tabs.Tabs.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/tabs/#flet_core.tabs.Tabs.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/tabs/#flet_core.tabs.Tabs.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/tabs/#flet_core.tabs.Tabs.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/tabs/#flet_core.tabs.Tabs.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/tabs/#flet_core.tabs.Tabs.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/tabs/#flet_core.tabs.Tabs.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/tabs/#flet_core.tabs.Tabs.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/tabs/#flet_core.tabs.Tabs.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/template_route/",
      "title": "TemplateRoute",
      "text": ""
    },
    {
      "location": "controls/text/",
      "title": "Text",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>Text is a control for displaying text.</p> <p>Example: <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Text examples\"\n\n    page.add(\n        ft.Text(\"Size 10\", size=10),\n        ft.Text(\"Size 30, Italic\", size=20, color=\"pink600\", italic=True),\n        ft.Text(\"Limit long text to 2 lines and fading\", style=ft.TextThemeStyle.HEADLINE_SMALL),\n        ft.Text(\n            \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur quis nibh vitae purus consectetur facilisis sed vitae ipsum. Quisque faucibus sed nulla placerat sagittis. Phasellus condimentum risus vitae nulla vestibulum auctor. Curabitur scelerisque, nibh eget imperdiet consequat, odio ante tempus diam, sed volutpat nisl erat eget turpis. Sed viverra, diam sit amet blandit vulputate, mi tellus dapibus lorem, vitae vehicula diam mauris placerat diam. Morbi sit amet pretium turpis, et consequat ligula. Nulla velit sem, suscipit sit amet dictum non, tincidunt sed nulla. Aenean pellentesque odio porttitor sagittis aliquam. Nam varius at metus vitae vulputate. Praesent faucibus nibh lorem, eu pretium dolor dictum nec. Phasellus eget dui laoreet, viverra magna vitae, pellentesque diam.\",\n            max_lines=2,\n        ),\n    )\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/text</p>"
    },
    {
      "location": "controls/text/#flet_core.text.Text.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/text/#flet_core.text.Text.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/text/#flet_core.text.Text.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/text/#flet_core.text.Text.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/text/#flet_core.text.Text.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/text/#flet_core.text.Text.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/text/#flet_core.text.Text.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/text/#flet_core.text.Text.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/text/#flet_core.text.Text.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/text/#flet_core.text.Text.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/text/#flet_core.text.Text.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/text/#flet_core.text.Text.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/text/#flet_core.text.Text.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/text/#flet_core.text.Text.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/text/#flet_core.text.Text.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/text/#flet_core.text.Text.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/text/#flet_core.text.Text.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/text/#flet_core.text.Text.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/text/#flet_core.text.Text.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/text_button/",
      "title": "TextButton",
      "text": "<p>               Bases: <code>ConstrainedControl</code>, <code>AdaptiveControl</code></p> <p>Text buttons are used for the lowest priority actions, especially when presenting multiple options. Text buttons can be placed on a variety of backgrounds. Until the button is interacted with, its container isn\u2019t visible.</p> <p>Example: <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Basic text buttons\"\n    page.add(\n        ft.TextButton(text=\"Text button\"),\n        ft.TextButton(\"Disabled button\", disabled=True),\n    )\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/textbutton</p>"
    },
    {
      "location": "controls/text_button/#flet_core.text_button.TextButton.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/text_button/#flet_core.text_button.TextButton.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/text_button/#flet_core.text_button.TextButton.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/text_button/#flet_core.text_button.TextButton.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/text_button/#flet_core.text_button.TextButton.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/text_button/#flet_core.text_button.TextButton.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/text_button/#flet_core.text_button.TextButton.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/text_button/#flet_core.text_button.TextButton.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/text_button/#flet_core.text_button.TextButton.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/text_button/#flet_core.text_button.TextButton.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/text_button/#flet_core.text_button.TextButton.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/text_button/#flet_core.text_button.TextButton.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/text_button/#flet_core.text_button.TextButton.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/text_button/#flet_core.text_button.TextButton.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/text_button/#flet_core.text_button.TextButton.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/text_button/#flet_core.text_button.TextButton.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/text_button/#flet_core.text_button.TextButton.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/text_button/#flet_core.text_button.TextButton.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/text_button/#flet_core.text_button.TextButton.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/text_button/#flet_core.text_button.TextButton.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/text_span/",
      "title": "TextSpan",
      "text": "<p>               Bases: <code>InlineSpan</code></p>"
    },
    {
      "location": "controls/text_span/#flet_core.text_span.TextSpan.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/text_span/#flet_core.text_span.TextSpan.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/text_span/#flet_core.text_span.TextSpan.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/text_span/#flet_core.text_span.TextSpan.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/text_span/#flet_core.text_span.TextSpan.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/text_span/#flet_core.text_span.TextSpan.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/text_span/#flet_core.text_span.TextSpan.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/text_span/#flet_core.text_span.TextSpan.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/text_span/#flet_core.text_span.TextSpan.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/text_span/#flet_core.text_span.TextSpan.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/textfield/",
      "title": "TextField",
      "text": "<p>               Bases: <code>FormFieldControl</code>, <code>AdaptiveControl</code></p> <p>A text field lets the user enter text, either with hardware keyboard or with an onscreen keyboard.</p> <p>Example: <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    def button_clicked(e):\n        t.value = f\"Textboxes values are:  '{tb1.value}', '{tb2.value}', '{tb3.value}', '{tb4.value}', '{tb5.value}'.\"\n        page.update()\n\n    t = ft.Text()\n    tb1 = ft.TextField(label=\"Standard\")\n    tb2 = ft.TextField(label=\"Disabled\", disabled=True, value=\"First name\")\n    tb3 = ft.TextField(label=\"Read-only\", read_only=True, value=\"Last name\")\n    tb4 = ft.TextField(label=\"With placeholder\", hint_text=\"Please enter text here\")\n    tb5 = ft.TextField(label=\"With an icon\", icon=ft.icons.EMOJI_EMOTIONS)\n    b = ft.ElevatedButton(text=\"Submit\", on_click=button_clicked)\n    page.add(tb1, tb2, tb3, tb4, tb5, b, t)\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/textfield</p>"
    },
    {
      "location": "controls/textfield/#flet_core.textfield.TextField.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/textfield/#flet_core.textfield.TextField.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/textfield/#flet_core.textfield.TextField.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/textfield/#flet_core.textfield.TextField.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/textfield/#flet_core.textfield.TextField.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/textfield/#flet_core.textfield.TextField.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/textfield/#flet_core.textfield.TextField.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/textfield/#flet_core.textfield.TextField.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/textfield/#flet_core.textfield.TextField.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/textfield/#flet_core.textfield.TextField.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/textfield/#flet_core.textfield.TextField.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/textfield/#flet_core.textfield.TextField.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/textfield/#flet_core.textfield.TextField.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/textfield/#flet_core.textfield.TextField.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/textfield/#flet_core.textfield.TextField.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/textfield/#flet_core.textfield.TextField.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/textfield/#flet_core.textfield.TextField.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/textfield/#flet_core.textfield.TextField.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/textfield/#flet_core.textfield.TextField.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/textfield/#flet_core.textfield.TextField.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/theme/",
      "title": "Theme",
      "text": ""
    },
    {
      "location": "controls/time_picker/",
      "title": "TimePicker",
      "text": "<p>               Bases: <code>Control</code></p> <p>A Material-style time picker dialog.</p> <p>It is added to <code>page.overlay</code> and can be opened by setting <code>open=True</code> or by calling <code>Page.open()</code> method.</p> <p>Depending on the <code>time_picker_entry_mode</code>, it will show either a Dial or an Input (hour and minute text fields) for picking a time.</p> <p>Example: <pre><code>import flet as ft\n\n\ndef main(page: ft.Page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n\n    def handle_change(e):\n        page.add(ft.Text(f\"TimePicker change: {time_picker.value}\"))\n\n    def handle_dismissal(e):\n        page.add(ft.Text(f\"TimePicker dismissed: {time_picker.value}\"))\n\n    def handle_entry_mode_change(e):\n        page.add(ft.Text(f\"TimePicker Entry mode changed to {e.entry_mode}\"))\n\n    time_picker = ft.TimePicker(\n        confirm_text=\"Confirm\",\n        error_invalid_text=\"Time out of range\",\n        help_text=\"Pick your time slot\",\n        on_change=handle_change,\n        on_dismiss=handle_dismissal,\n        on_entry_mode_change=handle_entry_mode_change,\n    )\n\n    page.add(\n        ft.ElevatedButton(\n            \"Pick time\",\n            icon=ft.icons.TIME_TO_LEAVE,\n            on_click=lambda _: page.open(time_picker),\n        )\n    )\n\n\nft.app(main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/time_picker</p>"
    },
    {
      "location": "controls/time_picker/#flet_core.time_picker.TimePicker.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/time_picker/#flet_core.time_picker.TimePicker.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/time_picker/#flet_core.time_picker.TimePicker.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/time_picker/#flet_core.time_picker.TimePicker.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/time_picker/#flet_core.time_picker.TimePicker.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/time_picker/#flet_core.time_picker.TimePicker.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/time_picker/#flet_core.time_picker.TimePicker.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/time_picker/#flet_core.time_picker.TimePicker.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/time_picker/#flet_core.time_picker.TimePicker.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/time_picker/#flet_core.time_picker.TimePicker.before_update",
      "title": "<code>before_update()</code>",
      "text": "<p>Mainly used when creating custom controls.</p> <p>It is called before this control is updated.</p> <p>Make sure not to call <code>update()</code> method within <code>before_update()</code>.</p>"
    },
    {
      "location": "controls/time_picker/#flet_core.time_picker.TimePicker.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/tooltip/",
      "title": "Tooltip",
      "text": "<p>               Bases: <code>Control</code></p> <p>Tooltips provide text labels which help explain the function of a button or other user interface action. Wrap the button in a Tooltip control and provide a message which will be shown when the control is long pressed.</p> <p>Example: <pre><code>import math\n\nimport flet as ft\nfrom flet import alignment\n\ndef main(page: ft.Page):\n    page.title = \"Tooltip Example\"\n    page.add(\n        ft.Tooltip(\n            message=\"This is tooltip\",\n            content=ft.Text(\"Hover to see tooltip\"),\n            padding=20,\n            border_radius=10,\n            text_style=ft.TextStyle(size=20, color=ft.colors.WHITE),\n            gradient=ft.LinearGradient(\n                begin=alignment.top_left,\n                end=alignment.Alignment(0.8, 1),\n                colors=[\n                    \"0xff1f005c\",\n                    \"0xff5b0060\",\n                    \"0xff870160\",\n                    \"0xffac255e\",\n                    \"0xffca485c\",\n                    \"0xffe16b5c\",\n                    \"0xfff39060\",\n                    \"0xffffb56b\",\n                ],\n                tile_mode=ft.GradientTileMode.MIRROR,\n                rotation=math.pi / 3,\n            ),\n        )\n    )\n\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/tooltip</p>"
    },
    {
      "location": "controls/tooltip/#flet_core.tooltip.Tooltip.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/tooltip/#flet_core.tooltip.Tooltip.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/tooltip/#flet_core.tooltip.Tooltip.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/tooltip/#flet_core.tooltip.Tooltip.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/tooltip/#flet_core.tooltip.Tooltip.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/tooltip/#flet_core.tooltip.Tooltip.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/tooltip/#flet_core.tooltip.Tooltip.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/tooltip/#flet_core.tooltip.Tooltip.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/tooltip/#flet_core.tooltip.Tooltip.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/tooltip/#flet_core.tooltip.Tooltip.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/transparent_pointer/",
      "title": "TransparentPointer",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p>"
    },
    {
      "location": "controls/transparent_pointer/#flet_core.transparent_pointer.TransparentPointer.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/transparent_pointer/#flet_core.transparent_pointer.TransparentPointer.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/transparent_pointer/#flet_core.transparent_pointer.TransparentPointer.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/transparent_pointer/#flet_core.transparent_pointer.TransparentPointer.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/transparent_pointer/#flet_core.transparent_pointer.TransparentPointer.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/transparent_pointer/#flet_core.transparent_pointer.TransparentPointer.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/transparent_pointer/#flet_core.transparent_pointer.TransparentPointer.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/transparent_pointer/#flet_core.transparent_pointer.TransparentPointer.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/transparent_pointer/#flet_core.transparent_pointer.TransparentPointer.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/transparent_pointer/#flet_core.transparent_pointer.TransparentPointer.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/transparent_pointer/#flet_core.transparent_pointer.TransparentPointer.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/transparent_pointer/#flet_core.transparent_pointer.TransparentPointer.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/transparent_pointer/#flet_core.transparent_pointer.TransparentPointer.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/transparent_pointer/#flet_core.transparent_pointer.TransparentPointer.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/transparent_pointer/#flet_core.transparent_pointer.TransparentPointer.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/transparent_pointer/#flet_core.transparent_pointer.TransparentPointer.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/transparent_pointer/#flet_core.transparent_pointer.TransparentPointer.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/transparent_pointer/#flet_core.transparent_pointer.TransparentPointer.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/transparent_pointer/#flet_core.transparent_pointer.TransparentPointer.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/user_control/",
      "title": "UserControl",
      "text": "<p>               Bases: <code>Stack</code></p>"
    },
    {
      "location": "controls/user_control/#flet_core.user_control.UserControl.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/user_control/#flet_core.user_control.UserControl.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/user_control/#flet_core.user_control.UserControl.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/user_control/#flet_core.user_control.UserControl.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/user_control/#flet_core.user_control.UserControl.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/user_control/#flet_core.user_control.UserControl.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/user_control/#flet_core.user_control.UserControl.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/user_control/#flet_core.user_control.UserControl.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/user_control/#flet_core.user_control.UserControl.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/user_control/#flet_core.user_control.UserControl.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/user_control/#flet_core.user_control.UserControl.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/user_control/#flet_core.user_control.UserControl.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/user_control/#flet_core.user_control.UserControl.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/user_control/#flet_core.user_control.UserControl.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/user_control/#flet_core.user_control.UserControl.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/user_control/#flet_core.user_control.UserControl.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/user_control/#flet_core.user_control.UserControl.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/user_control/#flet_core.user_control.UserControl.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/user_control/#flet_core.user_control.UserControl.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/user_control/#flet_core.user_control.UserControl.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/vertical_divider/",
      "title": "VerticalDivider",
      "text": "<p>               Bases: <code>Control</code></p> <p>A thin vertical line, with padding on either side.</p> <p>In the material design language, this represents a divider.</p> <p>Example:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Row(\n            [\n                ft.Container(\n                    bgcolor=ft.colors.ORANGE_300,\n                    alignment=ft.alignment.center,\n                    expand=True,\n                ),\n                ft.VerticalDivider(),\n                ft.Container(\n                    bgcolor=ft.colors.BROWN_400,\n                    alignment=ft.alignment.center,\n                    expand=True,\n                ),\n            ],\n            spacing=0,\n            expand=True,\n        )\n    )\n\nft.app(target=main)\n</code></pre> <p>Online docs: https://flet.dev/docs/controls/verticaldivider</p>"
    },
    {
      "location": "controls/vertical_divider/#flet_core.vertical_divider.VerticalDivider.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/vertical_divider/#flet_core.vertical_divider.VerticalDivider.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/vertical_divider/#flet_core.vertical_divider.VerticalDivider.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/vertical_divider/#flet_core.vertical_divider.VerticalDivider.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/vertical_divider/#flet_core.vertical_divider.VerticalDivider.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/vertical_divider/#flet_core.vertical_divider.VerticalDivider.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/vertical_divider/#flet_core.vertical_divider.VerticalDivider.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/vertical_divider/#flet_core.vertical_divider.VerticalDivider.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/vertical_divider/#flet_core.vertical_divider.VerticalDivider.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/vertical_divider/#flet_core.vertical_divider.VerticalDivider.before_update",
      "title": "<code>before_update()</code>",
      "text": "<p>Mainly used when creating custom controls.</p> <p>It is called before this control is updated.</p> <p>Make sure not to call <code>update()</code> method within <code>before_update()</code>.</p>"
    },
    {
      "location": "controls/vertical_divider/#flet_core.vertical_divider.VerticalDivider.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/video/",
      "title": "Video",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>A control that displays a video from a playlist.</p> <p>Online docs: https://flet.dev/docs/controls/video</p>"
    },
    {
      "location": "controls/video/#flet_core.video.Video.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/video/#flet_core.video.Video.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/video/#flet_core.video.Video.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/video/#flet_core.video.Video.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/video/#flet_core.video.Video.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/video/#flet_core.video.Video.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/video/#flet_core.video.Video.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/video/#flet_core.video.Video.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/video/#flet_core.video.Video.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/video/#flet_core.video.Video.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/video/#flet_core.video.Video.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/video/#flet_core.video.Video.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/video/#flet_core.video.Video.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/video/#flet_core.video.Video.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/video/#flet_core.video.Video.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/video/#flet_core.video.Video.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/video/#flet_core.video.Video.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/video/#flet_core.video.Video.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/video/#flet_core.video.Video.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/view/",
      "title": "View",
      "text": "<p>               Bases: <code>ScrollableControl</code>, <code>AdaptiveControl</code></p> <p>View is the top most container for all other controls.</p> <p>A root view is automatically created when a new user session started. From layout perspective the View represents a <code>Column</code>(https://flet.dev/docs/controls/column/) control, so it has a similar behavior and shares same properties.</p> <p>Online docs: https://flet.dev/docs/controls/view</p>"
    },
    {
      "location": "controls/view/#flet_core.view.View.adaptive",
      "title": "<code>adaptive: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be platform-adaptive.</p>"
    },
    {
      "location": "controls/view/#flet_core.view.View.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/view/#flet_core.view.View.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/view/#flet_core.view.View.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/view/#flet_core.view.View.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/view/#flet_core.view.View.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/view/#flet_core.view.View.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/view/#flet_core.view.View.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/view/#flet_core.view.View.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/view/#flet_core.view.View.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/view/#flet_core.view.View.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/webview/",
      "title": "WebView",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>Easily load webpages while allowing user interaction.</p> <p>The <code>WebView</code> control is designed exclusively for iOS and Android platforms.</p> <p>```</p>"
    },
    {
      "location": "controls/webview/#flet_core.webview.WebView--examples",
      "title": "Examples",
      "text": "<p>A simple webview implementation using this class could be like:</p> <pre><code>import flet\n\ndef main(page: flet.Page):\n    wv = flet.WebView(\n        \"https://flet.dev\",\n        expand=True,\n        on_page_started=lambda _: print(\"Page started\"),\n        on_page_ended=lambda _: print(\"Page ended\"),\n        on_web_resource_error=lambda e: print(\"Page error:\", e.data),\n    )\n    page.add(wv)\n\nflet.app(main)\n</code></pre>"
    },
    {
      "location": "controls/webview/#flet_core.webview.WebView--properties",
      "title": "Properties",
      "text": ""
    },
    {
      "location": "controls/webview/#flet_core.webview.WebView--url",
      "title": "<code>url</code>",
      "text": "<p>Start the webview by loading the <code>url</code> value.</p>"
    },
    {
      "location": "controls/webview/#flet_core.webview.WebView--javascript_enabled",
      "title": "<code>javascript_enabled</code>",
      "text": "<p>Enable or disable the javascript execution of the page. Note that disabling the javascript execution of the page may result unexpected webpage behaviour.</p>"
    },
    {
      "location": "controls/webview/#flet_core.webview.WebView--prevent_link",
      "title": "<code>prevent_link</code>",
      "text": "<p>Specify a link to prevent it from downloading.</p>"
    },
    {
      "location": "controls/webview/#flet_core.webview.WebView--bgcolor",
      "title": "<code>bgcolor</code>",
      "text": "<p>Set the background color of the webview.</p>"
    },
    {
      "location": "controls/webview/#flet_core.webview.WebView--events",
      "title": "Events",
      "text": ""
    },
    {
      "location": "controls/webview/#flet_core.webview.WebView--on_page_started",
      "title": "<code>on_page_started</code>",
      "text": "<p>Fires soon as the first loading process of the webpage is started.</p>"
    },
    {
      "location": "controls/webview/#flet_core.webview.WebView--on_page_ended",
      "title": "<code>on_page_ended</code>",
      "text": "<p>Fires when all the webpage loading processes are ended.</p>"
    },
    {
      "location": "controls/webview/#flet_core.webview.WebView--on_web_resource_error",
      "title": "<code>on_web_resource_error</code>",
      "text": "<p>Fires when there is error with loading a webpage resource.</p> <p>View docs: WebView</p>"
    },
    {
      "location": "controls/webview/#flet_core.webview.WebView.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/webview/#flet_core.webview.WebView.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/webview/#flet_core.webview.WebView.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/webview/#flet_core.webview.WebView.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/webview/#flet_core.webview.WebView.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/webview/#flet_core.webview.WebView.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/webview/#flet_core.webview.WebView.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/webview/#flet_core.webview.WebView.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/webview/#flet_core.webview.WebView.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/webview/#flet_core.webview.WebView.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/webview/#flet_core.webview.WebView.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/webview/#flet_core.webview.WebView.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/webview/#flet_core.webview.WebView.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/webview/#flet_core.webview.WebView.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/webview/#flet_core.webview.WebView.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/webview/#flet_core.webview.WebView.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/webview/#flet_core.webview.WebView.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/webview/#flet_core.webview.WebView.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/webview/#flet_core.webview.WebView.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    },
    {
      "location": "controls/window_drag_area/",
      "title": "WindowDragArea",
      "text": "<p>               Bases: <code>ConstrainedControl</code></p> <p>A control for drag to move, maximize and restore application window.</p> <p>When you have hidden the title bar with <code>page.window_title_bar_hidden</code>, you can add this control to move the window position.</p> <p>Example: <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.window_title_bar_hidden = True\n    page.window_title_bar_buttons_hidden = True\n\n    page.add(\n        ft.Row(\n            [\n                ft.WindowDragArea(ft.Container(ft.Text(\"Drag this area to move, maximize and restore application window.\"), bgcolor=ft.colors.AMBER_300, padding=10), expand=True),\n                ft.IconButton(ft.icons.CLOSE, on_click=lambda _: page.window_close())\n            ]\n        )\n    )\n\nft.app(target=main)\n</code></pre></p> <p>Online docs: https://flet.dev/docs/controls/windowdragarea</p>"
    },
    {
      "location": "controls/window_drag_area/#flet_core.window_drag_area.WindowDragArea.aspect_ratio",
      "title": "<code>aspect_ratio: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The aspect ratio (width to height) of this control.</p>"
    },
    {
      "location": "controls/window_drag_area/#flet_core.window_drag_area.WindowDragArea.bottom",
      "title": "<code>bottom: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's bottom edge is inset from the bottom of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/window_drag_area/#flet_core.window_drag_area.WindowDragArea.data",
      "title": "<code>data: Optional[Any]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Arbitrary data of any type that can be attached to a control.</p>"
    },
    {
      "location": "controls/window_drag_area/#flet_core.window_drag_area.WindowDragArea.disabled",
      "title": "<code>disabled: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control is disabled. Has effect on this control and all its possible descendants.</p> <p>For example, to create a disabled button:</p> <pre><code>ft.ElevatedButton(\"Disabled Button\", disabled=True)\n</code></pre>"
    },
    {
      "location": "controls/window_drag_area/#flet_core.window_drag_area.WindowDragArea.expand",
      "title": "<code>expand: Optional[Union[bool, int]]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control can expand to fill the available space. Value can be a boolean or an integer (an \"expand factor\" specifying how to divide a free space with other expanded child controls).</p> <p>Effective only for children of the following: <code>Column</code>, <code>Row</code>, Page, View.</p> <p>For more information and examples about <code>expand</code> property see <code>Column</code> or <code>Row</code>.</p>"
    },
    {
      "location": "controls/window_drag_area/#flet_core.window_drag_area.WindowDragArea.expand_loose",
      "title": "<code>expand_loose: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the child control of a <code>Column</code> or a <code>Row</code> will be given the flexibility to expand to fill the available space in the main axis (e.g., horizontally for a <code>Row</code> or vertically for a <code>Column</code> ), but will not be required to fill the available space.</p> <p>Effective only if <code>expand</code> is <code>True</code>.</p>"
    },
    {
      "location": "controls/window_drag_area/#flet_core.window_drag_area.WindowDragArea.height",
      "title": "<code>height: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The height of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/window_drag_area/#flet_core.window_drag_area.WindowDragArea.left",
      "title": "<code>left: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's left edge is inset from the left of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/window_drag_area/#flet_core.window_drag_area.WindowDragArea.offset",
      "title": "<code>offset: OffsetValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Applies a translation transformation before painting the control.</p> <p>The translation is expressed as a <code>transform.Offset</code> scaled to the control's size. For example, an <code>Offset</code> with a <code>x</code> of <code>0.25</code> will result in a horizontal translation of one quarter the width of the control.</p> <p>The following example displays container at <code>0, 0</code> top left corner of a stack as transform applies <code>-1 * 100, -1 * 100</code> (<code>offset * control_size</code>) horizontal and vertical translations to the control:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\n\nft.app(main)\n</code></pre>"
    },
    {
      "location": "controls/window_drag_area/#flet_core.window_drag_area.WindowDragArea.opacity",
      "title": "<code>opacity: float</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The opacity of the control.</p>"
    },
    {
      "location": "controls/window_drag_area/#flet_core.window_drag_area.WindowDragArea.page",
      "title": "<code>page: Optional[Page]</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The page this control is attached to.</p>"
    },
    {
      "location": "controls/window_drag_area/#flet_core.window_drag_area.WindowDragArea.right",
      "title": "<code>right: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The distance that the child's right edge is inset from the right of the stack.</p> <p>Effective inside a <code>Stack</code> only.</p>"
    },
    {
      "location": "controls/window_drag_area/#flet_core.window_drag_area.WindowDragArea.rotate",
      "title": "<code>rotate: RotateValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Transforms control using a rotation around the center.</p> <p>The value of <code>rotate</code> property could be one of the following types:</p> <ul> <li><code>number</code> - a rotation in clockwise radians. Full circle <code>360\u00b0</code> is <code>math.pi * 2</code> radians, <code>90\u00b0</code> is <code>pi / 2</code>, <code>45\u00b0</code> is <code>pi / 4</code>, etc.</li> <li><code>transform.Rotate</code> - allows to specify rotation <code>angle</code> as well as <code>alignment</code> - the location of rotation center.</li> </ul> <p>For example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n</code></pre>"
    },
    {
      "location": "controls/window_drag_area/#flet_core.window_drag_area.WindowDragArea.rtl",
      "title": "<code>rtl: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether the text direction is right-to-left.</p>"
    },
    {
      "location": "controls/window_drag_area/#flet_core.window_drag_area.WindowDragArea.scale",
      "title": "<code>scale: ScaleValue</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Scale control along the 2D plane. Default scale factor is <code>1.0</code> - control is not scaled. <code>0.5</code> - the control is twice smaller, <code>2.0</code> - the control is twice larger.</p> <p>Different scale multipliers can be specified for <code>x</code> and <code>y</code> axis, but setting <code>Control.scale</code> property to an instance of <code>transform.Scale</code> class:</p> <pre><code>from dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n</code></pre> <p>Either <code>scale</code> or <code>scale_x</code> and <code>scale_y</code> could be specified, but not all of them, for example:</p> <pre><code>ft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n</code></pre>"
    },
    {
      "location": "controls/window_drag_area/#flet_core.window_drag_area.WindowDragArea.tooltip",
      "title": "<code>tooltip</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The tooltip text to be shown when this control is hovered over.</p>"
    },
    {
      "location": "controls/window_drag_area/#flet_core.window_drag_area.WindowDragArea.visible",
      "title": "<code>visible: bool</code>  <code>property</code> <code>writable</code>",
      "text": "<p>Whether this control should be visible on the page canvas. Has effect on this control and all its possible descendants. Invisible controls can't be focused or selected with a keyboard or mouse and they do not emit any events.</p>"
    },
    {
      "location": "controls/window_drag_area/#flet_core.window_drag_area.WindowDragArea.width",
      "title": "<code>width: OptionalNumber</code>  <code>property</code> <code>writable</code>",
      "text": "<p>The width of the control in virtual pixels.</p>"
    },
    {
      "location": "controls/window_drag_area/#flet_core.window_drag_area.WindowDragArea.update",
      "title": "<code>update()</code>",
      "text": "<p>Update this control.</p>"
    }
  ]
}